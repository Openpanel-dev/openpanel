/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import * as path from 'node:path';
import * as process from 'node:process';
import { fileURLToPath } from 'node:url';
const __dirname = path.dirname(fileURLToPath(import.meta.url));

import type * as runtime from '@prisma/client/runtime/library';
import * as $Enums from './enums.ts';
import * as $Class from './internal/class.ts';
import * as Prisma from './internal/prismaNamespace.ts';

export * as $Enums from './enums.ts';
/**
 * ## Prisma Client
 *
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CodeMigrations
 * const codeMigrations = await prisma.codeMigration.findMany()
 * ```
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export const PrismaClient = $Class.getPrismaClientClass(__dirname);
export type PrismaClient<
  LogOpts extends Prisma.LogLevel = never,
  OmitOpts extends
    Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = $Class.PrismaClient<LogOpts, OmitOpts, ExtArgs>;
export { Prisma };

// file annotations for bundling tools to include these files
path.join(__dirname, 'libquery_engine-darwin-arm64.dylib.node');
path.join(
  process.cwd(),
  'src/generated/prisma/libquery_engine-darwin-arm64.dylib.node',
);

/**
 * Model CodeMigration
 *
 */
export type CodeMigration = Prisma.CodeMigrationModel;
/**
 * Model Chat
 *
 */
export type Chat = Prisma.ChatModel;
/**
 * Model Organization
 *
 */
export type Organization = Prisma.OrganizationModel;
/**
 * Model User
 *
 */
export type User = Prisma.UserModel;
/**
 * Model Account
 *
 */
export type Account = Prisma.AccountModel;
/**
 * Model Session
 *
 */
export type Session = Prisma.SessionModel;
/**
 * Model Member
 *
 */
export type Member = Prisma.MemberModel;
/**
 * Model Invite
 *
 */
export type Invite = Prisma.InviteModel;
/**
 * Model Project
 *
 */
export type Project = Prisma.ProjectModel;
/**
 * Model ProjectAccess
 *
 */
export type ProjectAccess = Prisma.ProjectAccessModel;
/**
 * Model Salt
 *
 */
export type Salt = Prisma.SaltModel;
/**
 * Model Client
 *
 */
export type Client = Prisma.ClientModel;
/**
 * Model Dashboard
 *
 */
export type Dashboard = Prisma.DashboardModel;
/**
 * Model Report
 *
 */
export type Report = Prisma.ReportModel;
/**
 * Model ShareOverview
 *
 */
export type ShareOverview = Prisma.ShareOverviewModel;
/**
 * Model EventMeta
 *
 */
export type EventMeta = Prisma.EventMetaModel;
/**
 * Model Reference
 *
 */
export type Reference = Prisma.ReferenceModel;
/**
 * Model NotificationRule
 *
 */
export type NotificationRule = Prisma.NotificationRuleModel;
/**
 * Model Notification
 *
 */
export type Notification = Prisma.NotificationModel;
/**
 * Model Integration
 *
 */
export type Integration = Prisma.IntegrationModel;
/**
 * Model ResetPassword
 *
 */
export type ResetPassword = Prisma.ResetPasswordModel;

export type ProjectType = $Enums.ProjectType;
export const ProjectType = $Enums.ProjectType;

export type AccessLevel = $Enums.AccessLevel;
export const AccessLevel = $Enums.AccessLevel;

export type ClientType = $Enums.ClientType;
export const ClientType = $Enums.ClientType;

export type Interval = $Enums.Interval;
export const Interval = $Enums.Interval;

export type ChartType = $Enums.ChartType;
export const ChartType = $Enums.ChartType;

export type Metric = $Enums.Metric;
export const Metric = $Enums.Metric;

export type IntegrationType = $Enums.IntegrationType;
export const IntegrationType = $Enums.IntegrationType;
