/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from '@prisma/client/runtime/library';
import type * as Prisma from '../models.ts';
import type { PrismaClient } from './class.ts';

export type * from '../models.ts';

export type DMMF = typeof runtime.DMMF;

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>;

/**
 * Validator
 */
export const validator = runtime.Public.validator;

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError =
  runtime.PrismaClientKnownRequestError;
export type PrismaClientKnownRequestError =
  runtime.PrismaClientKnownRequestError;

export const PrismaClientUnknownRequestError =
  runtime.PrismaClientUnknownRequestError;
export type PrismaClientUnknownRequestError =
  runtime.PrismaClientUnknownRequestError;

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;

export const PrismaClientInitializationError =
  runtime.PrismaClientInitializationError;
export type PrismaClientInitializationError =
  runtime.PrismaClientInitializationError;

export const PrismaClientValidationError = runtime.PrismaClientValidationError;
export type PrismaClientValidationError = runtime.PrismaClientValidationError;

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
export type Sql = runtime.Sql;

/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export type Decimal = runtime.Decimal;

export type DecimalJsLike = runtime.DecimalJsLike;

/**
 * Metrics
 */
export type Metrics = runtime.Metrics;
export type Metric<T> = runtime.Metric<T>;
export type MetricHistogram = runtime.MetricHistogram;
export type MetricHistogramBucket = runtime.MetricHistogramBucket;

/**
 * Extensions
 */
export type Extension = runtime.Types.Extensions.UserArgs;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<
  T,
  F
>;
export type Payload<
  T,
  F extends runtime.Operation = never,
> = runtime.Types.Public.Payload<T, F>;
export type Result<
  T,
  A,
  F extends runtime.Operation,
> = runtime.Types.Public.Result<T, A, F>;
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>;

export type PrismaVersion = {
  client: string;
  engine: string;
};

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
export const prismaVersion: PrismaVersion = {
  client: '6.14.0',
  engine: '717184b7b35ea05dfa71a3236b7af656013e1e49',
};

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject;
export type JsonArray = runtime.JsonArray;
export type JsonValue = runtime.JsonValue;
export type InputJsonObject = runtime.InputJsonObject;
export type InputJsonArray = runtime.InputJsonArray;
export type InputJsonValue = runtime.InputJsonValue;

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.DbNull,
  JsonNull: runtime.objectEnumValues.classes.JsonNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.JsonNull,
  AnyNull: runtime.objectEnumValues.classes.AnyNull as new (
    secret: never,
  ) => typeof runtime.objectEnumValues.instances.AnyNull,
};

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;

type SelectAndInclude = {
  select: any;
  include: any;
};

type SelectAndOmit = {
  select: any;
  omit: any;
};

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
  [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & (T extends SelectAndInclude
  ? 'Please either choose `select` or `include`.'
  : T extends SelectAndOmit
    ? 'Please either choose `select` or `omit`.'
    : {});

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
} & K;

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> = T extends object
  ? U extends object
    ? (Without<T, U> & U) | (Without<U, T> & T)
    : U
  : T;

/**
 * Is T a Record?
 */
type IsObject<T> = T extends Array<any>
  ? False
  : T extends Date
    ? False
    : T extends Uint8Array
      ? False
      : T extends bigint
        ? False
        : T extends object
          ? True
          : False;

/**
 * If it's T[], return T
 */
export type UnEnumerate<T> = T extends Array<infer U> ? U : T;

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O>; // With K possibilities
  }[K];

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>;

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>;

type _Either<O extends object, K extends Key, strict extends Boolean> = {
  1: EitherStrict<O, K>;
  0: EitherLoose<O, K>;
}[strict];

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1,
> = O extends unknown ? _Either<O, K, strict> : never;

export type Union = any;

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K];
} & {};

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown
    ? (k: U) => void
    : never
) extends (k: infer I) => void
  ? I
  : never;

export type Overwrite<O extends object, O1 extends object> = {
  [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<
  Overwrite<
    U,
    {
      [K in keyof U]-?: At<U, K>;
    }
  >
>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown
  ? AtStrict<O, K>
  : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
  1: AtStrict<O, K>;
  0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A> = A extends Function
  ? A
  : {
      [K in keyof A]: A[K];
    } & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
    ?
        | (K extends keyof O ? { [P in K]: O[P] } & O : O)
        | ({ [P in keyof O as P extends K ? P : never]-?: O[P] } & O)
    : never
>;

type _Strict<U, _U = U> = U extends unknown
  ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>>
  : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False;

export type True = 1;

export type False = 0;

export type Not<B extends Boolean> = {
  0: 1;
  1: 0;
}[B];

export type Extends<A1, A2> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
    ? 1
    : 0;

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>;

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0;
    1: 1;
  };
  1: {
    0: 1;
    1: 1;
  };
}[B1][B2];

export type Keys<U extends Union> = U extends unknown ? keyof U : never;

export type GetScalarType<T, O> = O extends object
  ? {
      [P in keyof T]: P extends keyof O ? O[P] : never;
    }
  : never;

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>,
> = IsObject<T> extends True ? U : T;

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<
          UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never
        >
      : never
    : {} extends FieldPaths<T[K]>
      ? never
      : K;
}[keyof T];

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never;
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>;
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T;

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<
  T,
  K extends Enumerable<keyof T> | keyof T,
> = Prisma__Pick<T, MaybeTupleToUnion<K>>;

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}`
  ? never
  : T;

export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>;

type FieldRefInputType<Model, FieldType> = Model extends never
  ? never
  : FieldRef<Model, FieldType>;

export const ModelName = {
  CodeMigration: 'CodeMigration',
  Chat: 'Chat',
  Organization: 'Organization',
  User: 'User',
  Account: 'Account',
  Session: 'Session',
  Member: 'Member',
  Invite: 'Invite',
  Project: 'Project',
  ProjectAccess: 'ProjectAccess',
  Salt: 'Salt',
  Client: 'Client',
  Dashboard: 'Dashboard',
  Report: 'Report',
  ShareOverview: 'ShareOverview',
  EventMeta: 'EventMeta',
  Reference: 'Reference',
  NotificationRule: 'NotificationRule',
  Notification: 'Notification',
  Integration: 'Integration',
  ResetPassword: 'ResetPassword',
} as const;

export type ModelName = (typeof ModelName)[keyof typeof ModelName];

export interface TypeMapCb<GlobalOmitOptions = {}>
  extends runtime.Types.Utils.Fn<
    { extArgs: runtime.Types.Extensions.InternalArgs },
    runtime.Types.Utils.Record<string, any>
  > {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>;
}

export type TypeMap<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions;
  };
  meta: {
    modelProps:
      | 'codeMigration'
      | 'chat'
      | 'organization'
      | 'user'
      | 'account'
      | 'session'
      | 'member'
      | 'invite'
      | 'project'
      | 'projectAccess'
      | 'salt'
      | 'client'
      | 'dashboard'
      | 'report'
      | 'shareOverview'
      | 'eventMeta'
      | 'reference'
      | 'notificationRule'
      | 'notification'
      | 'integration'
      | 'resetPassword';
    txIsolationLevel: TransactionIsolationLevel;
  };
  model: {
    CodeMigration: {
      payload: Prisma.$CodeMigrationPayload<ExtArgs>;
      fields: Prisma.CodeMigrationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.CodeMigrationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.CodeMigrationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        findFirst: {
          args: Prisma.CodeMigrationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.CodeMigrationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        findMany: {
          args: Prisma.CodeMigrationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>[];
        };
        create: {
          args: Prisma.CodeMigrationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        createMany: {
          args: Prisma.CodeMigrationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.CodeMigrationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>[];
        };
        delete: {
          args: Prisma.CodeMigrationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        update: {
          args: Prisma.CodeMigrationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        deleteMany: {
          args: Prisma.CodeMigrationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.CodeMigrationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.CodeMigrationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>[];
        };
        upsert: {
          args: Prisma.CodeMigrationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$CodeMigrationPayload>;
        };
        aggregate: {
          args: Prisma.CodeMigrationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateCodeMigration>;
        };
        groupBy: {
          args: Prisma.CodeMigrationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.CodeMigrationGroupByOutputType>[];
        };
        count: {
          args: Prisma.CodeMigrationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.CodeMigrationCountAggregateOutputType>
            | number;
        };
      };
    };
    Chat: {
      payload: Prisma.$ChatPayload<ExtArgs>;
      fields: Prisma.ChatFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ChatFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        findFirst: {
          args: Prisma.ChatFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        findMany: {
          args: Prisma.ChatFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[];
        };
        create: {
          args: Prisma.ChatCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        createMany: {
          args: Prisma.ChatCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[];
        };
        delete: {
          args: Prisma.ChatDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        update: {
          args: Prisma.ChatUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        deleteMany: {
          args: Prisma.ChatDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ChatUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ChatUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>[];
        };
        upsert: {
          args: Prisma.ChatUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ChatPayload>;
        };
        aggregate: {
          args: Prisma.ChatAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateChat>;
        };
        groupBy: {
          args: Prisma.ChatGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ChatGroupByOutputType>[];
        };
        count: {
          args: Prisma.ChatCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ChatCountAggregateOutputType>
            | number;
        };
      };
    };
    Organization: {
      payload: Prisma.$OrganizationPayload<ExtArgs>;
      fields: Prisma.OrganizationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.OrganizationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        findFirst: {
          args: Prisma.OrganizationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        findMany: {
          args: Prisma.OrganizationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[];
        };
        create: {
          args: Prisma.OrganizationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        createMany: {
          args: Prisma.OrganizationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[];
        };
        delete: {
          args: Prisma.OrganizationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        update: {
          args: Prisma.OrganizationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        deleteMany: {
          args: Prisma.OrganizationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.OrganizationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>[];
        };
        upsert: {
          args: Prisma.OrganizationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$OrganizationPayload>;
        };
        aggregate: {
          args: Prisma.OrganizationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrganization>;
        };
        groupBy: {
          args: Prisma.OrganizationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.OrganizationGroupByOutputType>[];
        };
        count: {
          args: Prisma.OrganizationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.OrganizationCountAggregateOutputType>
            | number;
        };
      };
    };
    User: {
      payload: Prisma.$UserPayload<ExtArgs>;
      fields: Prisma.UserFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[];
        };
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>;
        };
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>;
        };
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[];
        };
        count: {
          args: Prisma.UserCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType>
            | number;
        };
      };
    };
    Account: {
      payload: Prisma.$AccountPayload<ExtArgs>;
      fields: Prisma.AccountFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.AccountFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findFirst: {
          args: Prisma.AccountFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        findMany: {
          args: Prisma.AccountFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        create: {
          args: Prisma.AccountCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        createMany: {
          args: Prisma.AccountCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        delete: {
          args: Prisma.AccountDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        update: {
          args: Prisma.AccountUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        deleteMany: {
          args: Prisma.AccountDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.AccountUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>[];
        };
        upsert: {
          args: Prisma.AccountUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$AccountPayload>;
        };
        aggregate: {
          args: Prisma.AccountAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateAccount>;
        };
        groupBy: {
          args: Prisma.AccountGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AccountGroupByOutputType>[];
        };
        count: {
          args: Prisma.AccountCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.AccountCountAggregateOutputType>
            | number;
        };
      };
    };
    Session: {
      payload: Prisma.$SessionPayload<ExtArgs>;
      fields: Prisma.SessionFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SessionFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findFirst: {
          args: Prisma.SessionFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        findMany: {
          args: Prisma.SessionFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        create: {
          args: Prisma.SessionCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        createMany: {
          args: Prisma.SessionCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        delete: {
          args: Prisma.SessionDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        update: {
          args: Prisma.SessionUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        deleteMany: {
          args: Prisma.SessionDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SessionUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>[];
        };
        upsert: {
          args: Prisma.SessionUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SessionPayload>;
        };
        aggregate: {
          args: Prisma.SessionAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSession>;
        };
        groupBy: {
          args: Prisma.SessionGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SessionGroupByOutputType>[];
        };
        count: {
          args: Prisma.SessionCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.SessionCountAggregateOutputType>
            | number;
        };
      };
    };
    Member: {
      payload: Prisma.$MemberPayload<ExtArgs>;
      fields: Prisma.MemberFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.MemberFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        findFirst: {
          args: Prisma.MemberFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        findMany: {
          args: Prisma.MemberFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[];
        };
        create: {
          args: Prisma.MemberCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        createMany: {
          args: Prisma.MemberCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[];
        };
        delete: {
          args: Prisma.MemberDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        update: {
          args: Prisma.MemberUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        deleteMany: {
          args: Prisma.MemberDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.MemberUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>[];
        };
        upsert: {
          args: Prisma.MemberUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MemberPayload>;
        };
        aggregate: {
          args: Prisma.MemberAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateMember>;
        };
        groupBy: {
          args: Prisma.MemberGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.MemberGroupByOutputType>[];
        };
        count: {
          args: Prisma.MemberCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.MemberCountAggregateOutputType>
            | number;
        };
      };
    };
    Invite: {
      payload: Prisma.$InvitePayload<ExtArgs>;
      fields: Prisma.InviteFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.InviteFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.InviteFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        findFirst: {
          args: Prisma.InviteFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.InviteFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        findMany: {
          args: Prisma.InviteFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>[];
        };
        create: {
          args: Prisma.InviteCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        createMany: {
          args: Prisma.InviteCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.InviteCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>[];
        };
        delete: {
          args: Prisma.InviteDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        update: {
          args: Prisma.InviteUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        deleteMany: {
          args: Prisma.InviteDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.InviteUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.InviteUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>[];
        };
        upsert: {
          args: Prisma.InviteUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$InvitePayload>;
        };
        aggregate: {
          args: Prisma.InviteAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateInvite>;
        };
        groupBy: {
          args: Prisma.InviteGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.InviteGroupByOutputType>[];
        };
        count: {
          args: Prisma.InviteCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.InviteCountAggregateOutputType>
            | number;
        };
      };
    };
    Project: {
      payload: Prisma.$ProjectPayload<ExtArgs>;
      fields: Prisma.ProjectFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ProjectFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        findFirst: {
          args: Prisma.ProjectFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        findMany: {
          args: Prisma.ProjectFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[];
        };
        create: {
          args: Prisma.ProjectCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        createMany: {
          args: Prisma.ProjectCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[];
        };
        delete: {
          args: Prisma.ProjectDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        update: {
          args: Prisma.ProjectUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        deleteMany: {
          args: Prisma.ProjectDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ProjectUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>[];
        };
        upsert: {
          args: Prisma.ProjectUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectPayload>;
        };
        aggregate: {
          args: Prisma.ProjectAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateProject>;
        };
        groupBy: {
          args: Prisma.ProjectGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProjectGroupByOutputType>[];
        };
        count: {
          args: Prisma.ProjectCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ProjectCountAggregateOutputType>
            | number;
        };
      };
    };
    ProjectAccess: {
      payload: Prisma.$ProjectAccessPayload<ExtArgs>;
      fields: Prisma.ProjectAccessFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ProjectAccessFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ProjectAccessFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        findFirst: {
          args: Prisma.ProjectAccessFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ProjectAccessFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        findMany: {
          args: Prisma.ProjectAccessFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>[];
        };
        create: {
          args: Prisma.ProjectAccessCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        createMany: {
          args: Prisma.ProjectAccessCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ProjectAccessCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>[];
        };
        delete: {
          args: Prisma.ProjectAccessDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        update: {
          args: Prisma.ProjectAccessUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        deleteMany: {
          args: Prisma.ProjectAccessDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ProjectAccessUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ProjectAccessUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>[];
        };
        upsert: {
          args: Prisma.ProjectAccessUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ProjectAccessPayload>;
        };
        aggregate: {
          args: Prisma.ProjectAccessAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateProjectAccess>;
        };
        groupBy: {
          args: Prisma.ProjectAccessGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ProjectAccessGroupByOutputType>[];
        };
        count: {
          args: Prisma.ProjectAccessCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ProjectAccessCountAggregateOutputType>
            | number;
        };
      };
    };
    Salt: {
      payload: Prisma.$SaltPayload<ExtArgs>;
      fields: Prisma.SaltFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.SaltFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.SaltFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        findFirst: {
          args: Prisma.SaltFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.SaltFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        findMany: {
          args: Prisma.SaltFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>[];
        };
        create: {
          args: Prisma.SaltCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        createMany: {
          args: Prisma.SaltCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.SaltCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>[];
        };
        delete: {
          args: Prisma.SaltDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        update: {
          args: Prisma.SaltUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        deleteMany: {
          args: Prisma.SaltDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.SaltUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.SaltUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>[];
        };
        upsert: {
          args: Prisma.SaltUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SaltPayload>;
        };
        aggregate: {
          args: Prisma.SaltAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateSalt>;
        };
        groupBy: {
          args: Prisma.SaltGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.SaltGroupByOutputType>[];
        };
        count: {
          args: Prisma.SaltCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.SaltCountAggregateOutputType>
            | number;
        };
      };
    };
    Client: {
      payload: Prisma.$ClientPayload<ExtArgs>;
      fields: Prisma.ClientFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ClientFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ClientFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        findFirst: {
          args: Prisma.ClientFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ClientFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        findMany: {
          args: Prisma.ClientFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[];
        };
        create: {
          args: Prisma.ClientCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        createMany: {
          args: Prisma.ClientCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ClientCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[];
        };
        delete: {
          args: Prisma.ClientDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        update: {
          args: Prisma.ClientUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        deleteMany: {
          args: Prisma.ClientDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ClientUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ClientUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>[];
        };
        upsert: {
          args: Prisma.ClientUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ClientPayload>;
        };
        aggregate: {
          args: Prisma.ClientAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateClient>;
        };
        groupBy: {
          args: Prisma.ClientGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ClientGroupByOutputType>[];
        };
        count: {
          args: Prisma.ClientCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ClientCountAggregateOutputType>
            | number;
        };
      };
    };
    Dashboard: {
      payload: Prisma.$DashboardPayload<ExtArgs>;
      fields: Prisma.DashboardFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.DashboardFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.DashboardFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        findFirst: {
          args: Prisma.DashboardFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.DashboardFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        findMany: {
          args: Prisma.DashboardFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[];
        };
        create: {
          args: Prisma.DashboardCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        createMany: {
          args: Prisma.DashboardCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.DashboardCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[];
        };
        delete: {
          args: Prisma.DashboardDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        update: {
          args: Prisma.DashboardUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        deleteMany: {
          args: Prisma.DashboardDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.DashboardUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.DashboardUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>[];
        };
        upsert: {
          args: Prisma.DashboardUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$DashboardPayload>;
        };
        aggregate: {
          args: Prisma.DashboardAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateDashboard>;
        };
        groupBy: {
          args: Prisma.DashboardGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.DashboardGroupByOutputType>[];
        };
        count: {
          args: Prisma.DashboardCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.DashboardCountAggregateOutputType>
            | number;
        };
      };
    };
    Report: {
      payload: Prisma.$ReportPayload<ExtArgs>;
      fields: Prisma.ReportFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ReportFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        findFirst: {
          args: Prisma.ReportFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        findMany: {
          args: Prisma.ReportFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[];
        };
        create: {
          args: Prisma.ReportCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        createMany: {
          args: Prisma.ReportCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[];
        };
        delete: {
          args: Prisma.ReportDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        update: {
          args: Prisma.ReportUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        deleteMany: {
          args: Prisma.ReportDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ReportUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>[];
        };
        upsert: {
          args: Prisma.ReportUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReportPayload>;
        };
        aggregate: {
          args: Prisma.ReportAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateReport>;
        };
        groupBy: {
          args: Prisma.ReportGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ReportGroupByOutputType>[];
        };
        count: {
          args: Prisma.ReportCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ReportCountAggregateOutputType>
            | number;
        };
      };
    };
    ShareOverview: {
      payload: Prisma.$ShareOverviewPayload<ExtArgs>;
      fields: Prisma.ShareOverviewFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ShareOverviewFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ShareOverviewFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        findFirst: {
          args: Prisma.ShareOverviewFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ShareOverviewFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        findMany: {
          args: Prisma.ShareOverviewFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>[];
        };
        create: {
          args: Prisma.ShareOverviewCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        createMany: {
          args: Prisma.ShareOverviewCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ShareOverviewCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>[];
        };
        delete: {
          args: Prisma.ShareOverviewDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        update: {
          args: Prisma.ShareOverviewUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        deleteMany: {
          args: Prisma.ShareOverviewDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ShareOverviewUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ShareOverviewUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>[];
        };
        upsert: {
          args: Prisma.ShareOverviewUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ShareOverviewPayload>;
        };
        aggregate: {
          args: Prisma.ShareOverviewAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateShareOverview>;
        };
        groupBy: {
          args: Prisma.ShareOverviewGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ShareOverviewGroupByOutputType>[];
        };
        count: {
          args: Prisma.ShareOverviewCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ShareOverviewCountAggregateOutputType>
            | number;
        };
      };
    };
    EventMeta: {
      payload: Prisma.$EventMetaPayload<ExtArgs>;
      fields: Prisma.EventMetaFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.EventMetaFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.EventMetaFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        findFirst: {
          args: Prisma.EventMetaFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.EventMetaFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        findMany: {
          args: Prisma.EventMetaFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>[];
        };
        create: {
          args: Prisma.EventMetaCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        createMany: {
          args: Prisma.EventMetaCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.EventMetaCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>[];
        };
        delete: {
          args: Prisma.EventMetaDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        update: {
          args: Prisma.EventMetaUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        deleteMany: {
          args: Prisma.EventMetaDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.EventMetaUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.EventMetaUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>[];
        };
        upsert: {
          args: Prisma.EventMetaUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EventMetaPayload>;
        };
        aggregate: {
          args: Prisma.EventMetaAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateEventMeta>;
        };
        groupBy: {
          args: Prisma.EventMetaGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.EventMetaGroupByOutputType>[];
        };
        count: {
          args: Prisma.EventMetaCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.EventMetaCountAggregateOutputType>
            | number;
        };
      };
    };
    Reference: {
      payload: Prisma.$ReferencePayload<ExtArgs>;
      fields: Prisma.ReferenceFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ReferenceFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ReferenceFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        findFirst: {
          args: Prisma.ReferenceFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ReferenceFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        findMany: {
          args: Prisma.ReferenceFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>[];
        };
        create: {
          args: Prisma.ReferenceCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        createMany: {
          args: Prisma.ReferenceCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ReferenceCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>[];
        };
        delete: {
          args: Prisma.ReferenceDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        update: {
          args: Prisma.ReferenceUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        deleteMany: {
          args: Prisma.ReferenceDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ReferenceUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ReferenceUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>[];
        };
        upsert: {
          args: Prisma.ReferenceUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ReferencePayload>;
        };
        aggregate: {
          args: Prisma.ReferenceAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateReference>;
        };
        groupBy: {
          args: Prisma.ReferenceGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ReferenceGroupByOutputType>[];
        };
        count: {
          args: Prisma.ReferenceCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ReferenceCountAggregateOutputType>
            | number;
        };
      };
    };
    NotificationRule: {
      payload: Prisma.$NotificationRulePayload<ExtArgs>;
      fields: Prisma.NotificationRuleFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.NotificationRuleFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.NotificationRuleFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        findFirst: {
          args: Prisma.NotificationRuleFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.NotificationRuleFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        findMany: {
          args: Prisma.NotificationRuleFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>[];
        };
        create: {
          args: Prisma.NotificationRuleCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        createMany: {
          args: Prisma.NotificationRuleCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.NotificationRuleCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>[];
        };
        delete: {
          args: Prisma.NotificationRuleDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        update: {
          args: Prisma.NotificationRuleUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        deleteMany: {
          args: Prisma.NotificationRuleDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.NotificationRuleUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.NotificationRuleUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>[];
        };
        upsert: {
          args: Prisma.NotificationRuleUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationRulePayload>;
        };
        aggregate: {
          args: Prisma.NotificationRuleAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotificationRule>;
        };
        groupBy: {
          args: Prisma.NotificationRuleGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.NotificationRuleGroupByOutputType>[];
        };
        count: {
          args: Prisma.NotificationRuleCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationRuleCountAggregateOutputType>
            | number;
        };
      };
    };
    Notification: {
      payload: Prisma.$NotificationPayload<ExtArgs>;
      fields: Prisma.NotificationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.NotificationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        findFirst: {
          args: Prisma.NotificationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        findMany: {
          args: Prisma.NotificationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        create: {
          args: Prisma.NotificationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        createMany: {
          args: Prisma.NotificationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        delete: {
          args: Prisma.NotificationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        update: {
          args: Prisma.NotificationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        deleteMany: {
          args: Prisma.NotificationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.NotificationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>[];
        };
        upsert: {
          args: Prisma.NotificationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$NotificationPayload>;
        };
        aggregate: {
          args: Prisma.NotificationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateNotification>;
        };
        groupBy: {
          args: Prisma.NotificationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.NotificationGroupByOutputType>[];
        };
        count: {
          args: Prisma.NotificationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.NotificationCountAggregateOutputType>
            | number;
        };
      };
    };
    Integration: {
      payload: Prisma.$IntegrationPayload<ExtArgs>;
      fields: Prisma.IntegrationFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.IntegrationFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.IntegrationFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        findFirst: {
          args: Prisma.IntegrationFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.IntegrationFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        findMany: {
          args: Prisma.IntegrationFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>[];
        };
        create: {
          args: Prisma.IntegrationCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        createMany: {
          args: Prisma.IntegrationCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.IntegrationCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>[];
        };
        delete: {
          args: Prisma.IntegrationDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        update: {
          args: Prisma.IntegrationUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        deleteMany: {
          args: Prisma.IntegrationDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.IntegrationUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.IntegrationUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>[];
        };
        upsert: {
          args: Prisma.IntegrationUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$IntegrationPayload>;
        };
        aggregate: {
          args: Prisma.IntegrationAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateIntegration>;
        };
        groupBy: {
          args: Prisma.IntegrationGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.IntegrationGroupByOutputType>[];
        };
        count: {
          args: Prisma.IntegrationCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.IntegrationCountAggregateOutputType>
            | number;
        };
      };
    };
    ResetPassword: {
      payload: Prisma.$ResetPasswordPayload<ExtArgs>;
      fields: Prisma.ResetPasswordFieldRefs;
      operations: {
        findUnique: {
          args: Prisma.ResetPasswordFindUniqueArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload> | null;
        };
        findUniqueOrThrow: {
          args: Prisma.ResetPasswordFindUniqueOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        findFirst: {
          args: Prisma.ResetPasswordFindFirstArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload> | null;
        };
        findFirstOrThrow: {
          args: Prisma.ResetPasswordFindFirstOrThrowArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        findMany: {
          args: Prisma.ResetPasswordFindManyArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>[];
        };
        create: {
          args: Prisma.ResetPasswordCreateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        createMany: {
          args: Prisma.ResetPasswordCreateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        createManyAndReturn: {
          args: Prisma.ResetPasswordCreateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>[];
        };
        delete: {
          args: Prisma.ResetPasswordDeleteArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        update: {
          args: Prisma.ResetPasswordUpdateArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        deleteMany: {
          args: Prisma.ResetPasswordDeleteManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateMany: {
          args: Prisma.ResetPasswordUpdateManyArgs<ExtArgs>;
          result: BatchPayload;
        };
        updateManyAndReturn: {
          args: Prisma.ResetPasswordUpdateManyAndReturnArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>[];
        };
        upsert: {
          args: Prisma.ResetPasswordUpsertArgs<ExtArgs>;
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ResetPasswordPayload>;
        };
        aggregate: {
          args: Prisma.ResetPasswordAggregateArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.AggregateResetPassword>;
        };
        groupBy: {
          args: Prisma.ResetPasswordGroupByArgs<ExtArgs>;
          result: runtime.Types.Utils.Optional<Prisma.ResetPasswordGroupByOutputType>[];
        };
        count: {
          args: Prisma.ResetPasswordCountArgs<ExtArgs>;
          result:
            | runtime.Types.Utils.Optional<Prisma.ResetPasswordCountAggregateOutputType>
            | number;
        };
      };
    };
  };
} & {
  other: {
    payload: any;
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]];
        result: any;
      };
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]];
        result: any;
      };
    };
  };
};

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
} as const);

export type TransactionIsolationLevel =
  (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel];

export const CodeMigrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type CodeMigrationScalarFieldEnum =
  (typeof CodeMigrationScalarFieldEnum)[keyof typeof CodeMigrationScalarFieldEnum];

export const ChatScalarFieldEnum = {
  id: 'id',
  messages: 'messages',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ChatScalarFieldEnum =
  (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum];

export const OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdByUserId: 'createdByUserId',
  timezone: 'timezone',
  subscriptionId: 'subscriptionId',
  subscriptionCustomerId: 'subscriptionCustomerId',
  subscriptionPriceId: 'subscriptionPriceId',
  subscriptionProductId: 'subscriptionProductId',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionStartsAt: 'subscriptionStartsAt',
  subscriptionEndsAt: 'subscriptionEndsAt',
  subscriptionCanceledAt: 'subscriptionCanceledAt',
  subscriptionCreatedByUserId: 'subscriptionCreatedByUserId',
  subscriptionPeriodEventsCount: 'subscriptionPeriodEventsCount',
  subscriptionPeriodEventsCountExceededAt:
    'subscriptionPeriodEventsCountExceededAt',
  subscriptionPeriodEventsLimit: 'subscriptionPeriodEventsLimit',
  subscriptionInterval: 'subscriptionInterval',
  deleteAt: 'deleteAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type OrganizationScalarFieldEnum =
  (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum];

export const UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
} as const;

export type UserScalarFieldEnum =
  (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum];

export const AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  provider: 'provider',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type AccountScalarFieldEnum =
  (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum];

export const SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type SessionScalarFieldEnum =
  (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum];

export const MemberScalarFieldEnum = {
  id: 'id',
  role: 'role',
  email: 'email',
  userId: 'userId',
  invitedById: 'invitedById',
  organizationId: 'organizationId',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type MemberScalarFieldEnum =
  (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum];

export const InviteScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdById: 'createdById',
  organizationId: 'organizationId',
  projectAccess: 'projectAccess',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  role: 'role',
} as const;

export type InviteScalarFieldEnum =
  (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum];

export const ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationId: 'organizationId',
  eventsCount: 'eventsCount',
  types: 'types',
  domain: 'domain',
  cors: 'cors',
  crossDomain: 'crossDomain',
  filters: 'filters',
  deleteAt: 'deleteAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ProjectScalarFieldEnum =
  (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum];

export const ProjectAccessScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  organizationId: 'organizationId',
  userId: 'userId',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ProjectAccessScalarFieldEnum =
  (typeof ProjectAccessScalarFieldEnum)[keyof typeof ProjectAccessScalarFieldEnum];

export const SaltScalarFieldEnum = {
  salt: 'salt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type SaltScalarFieldEnum =
  (typeof SaltScalarFieldEnum)[keyof typeof SaltScalarFieldEnum];

export const ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  secret: 'secret',
  type: 'type',
  projectId: 'projectId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ClientScalarFieldEnum =
  (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum];

export const DashboardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organizationId: 'organizationId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type DashboardScalarFieldEnum =
  (typeof DashboardScalarFieldEnum)[keyof typeof DashboardScalarFieldEnum];

export const ReportScalarFieldEnum = {
  id: 'id',
  name: 'name',
  interval: 'interval',
  range: 'range',
  chartType: 'chartType',
  lineType: 'lineType',
  breakdowns: 'breakdowns',
  events: 'events',
  formula: 'formula',
  unit: 'unit',
  metric: 'metric',
  projectId: 'projectId',
  previous: 'previous',
  criteria: 'criteria',
  funnelGroup: 'funnelGroup',
  funnelWindow: 'funnelWindow',
  dashboardId: 'dashboardId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ReportScalarFieldEnum =
  (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum];

export const ShareOverviewScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  organizationId: 'organizationId',
  public: 'public',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ShareOverviewScalarFieldEnum =
  (typeof ShareOverviewScalarFieldEnum)[keyof typeof ShareOverviewScalarFieldEnum];

export const EventMetaScalarFieldEnum = {
  id: 'id',
  name: 'name',
  conversion: 'conversion',
  color: 'color',
  icon: 'icon',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type EventMetaScalarFieldEnum =
  (typeof EventMetaScalarFieldEnum)[keyof typeof EventMetaScalarFieldEnum];

export const ReferenceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  date: 'date',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ReferenceScalarFieldEnum =
  (typeof ReferenceScalarFieldEnum)[keyof typeof ReferenceScalarFieldEnum];

export const NotificationRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  projectId: 'projectId',
  sendToApp: 'sendToApp',
  sendToEmail: 'sendToEmail',
  config: 'config',
  template: 'template',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type NotificationRuleScalarFieldEnum =
  (typeof NotificationRuleScalarFieldEnum)[keyof typeof NotificationRuleScalarFieldEnum];

export const NotificationScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  title: 'title',
  message: 'message',
  isReadAt: 'isReadAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sendToApp: 'sendToApp',
  sendToEmail: 'sendToEmail',
  integrationId: 'integrationId',
  notificationRuleId: 'notificationRuleId',
  payload: 'payload',
} as const;

export type NotificationScalarFieldEnum =
  (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum];

export const IntegrationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  config: 'config',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type IntegrationScalarFieldEnum =
  (typeof IntegrationScalarFieldEnum)[keyof typeof IntegrationScalarFieldEnum];

export const ResetPasswordScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
} as const;

export type ResetPasswordScalarFieldEnum =
  (typeof ResetPasswordScalarFieldEnum)[keyof typeof ResetPasswordScalarFieldEnum];

export const SortOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];

export const JsonNullValueInput = {
  JsonNull: JsonNull,
} as const;

export type JsonNullValueInput =
  (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput];

export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull,
} as const;

export type NullableJsonNullValueInput =
  (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput];

export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive',
} as const;

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode];

export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull,
} as const;

export type JsonNullValueFilter =
  (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter];

export const NullsOrder = {
  first: 'first',
  last: 'last',
} as const;

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder];

/**
 * Field references
 */

/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'String'
>;

/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'String[]'
>;

/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'DateTime'
>;

/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'DateTime[]'
>;

/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Json'
>;

/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'QueryMode'
>;

/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Int'
>;

/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Int[]'
>;

/**
 * Reference to a field of type 'ProjectType[]'
 */
export type ListEnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ProjectType[]'
>;

/**
 * Reference to a field of type 'ProjectType'
 */
export type EnumProjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ProjectType'
>;

/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Boolean'
>;

/**
 * Reference to a field of type 'AccessLevel'
 */
export type EnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'AccessLevel'
>;

/**
 * Reference to a field of type 'AccessLevel[]'
 */
export type ListEnumAccessLevelFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'AccessLevel[]'
>;

/**
 * Reference to a field of type 'ClientType'
 */
export type EnumClientTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ClientType'
>;

/**
 * Reference to a field of type 'ClientType[]'
 */
export type ListEnumClientTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ClientType[]'
>;

/**
 * Reference to a field of type 'Interval'
 */
export type EnumIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Interval'
>;

/**
 * Reference to a field of type 'Interval[]'
 */
export type ListEnumIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Interval[]'
>;

/**
 * Reference to a field of type 'ChartType'
 */
export type EnumChartTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ChartType'
>;

/**
 * Reference to a field of type 'ChartType[]'
 */
export type ListEnumChartTypeFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'ChartType[]'
>;

/**
 * Reference to a field of type 'Metric'
 */
export type EnumMetricFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Metric'
>;

/**
 * Reference to a field of type 'Metric[]'
 */
export type ListEnumMetricFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Metric[]'
>;

/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Float'
>;

/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<
  $PrismaModel,
  'Float[]'
>;

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number;
};

export type Datasource = {
  url?: string;
};
export type Datasources = {
  db?: Datasource;
};

export const defineExtension = runtime.Extensions
  .defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<
  'define',
  TypeMapCb,
  runtime.Types.Extensions.DefaultArgs
>;
export type DefaultPrismaClient = PrismaClient;
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal';
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources;
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string;
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat;
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   *
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   *
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   *
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[];
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number;
    timeout?: number;
    isolationLevel?: TransactionIsolationLevel;
  };
  /**
   * Global configuration for omitting model fields by default.
   *
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig;
}
export type GlobalOmitConfig = {
  codeMigration?: Prisma.CodeMigrationOmit;
  chat?: Prisma.ChatOmit;
  organization?: Prisma.OrganizationOmit;
  user?: Prisma.UserOmit;
  account?: Prisma.AccountOmit;
  session?: Prisma.SessionOmit;
  member?: Prisma.MemberOmit;
  invite?: Prisma.InviteOmit;
  project?: Prisma.ProjectOmit;
  projectAccess?: Prisma.ProjectAccessOmit;
  salt?: Prisma.SaltOmit;
  client?: Prisma.ClientOmit;
  dashboard?: Prisma.DashboardOmit;
  report?: Prisma.ReportOmit;
  shareOverview?: Prisma.ShareOverviewOmit;
  eventMeta?: Prisma.EventMetaOmit;
  reference?: Prisma.ReferenceOmit;
  notificationRule?: Prisma.NotificationRuleOmit;
  notification?: Prisma.NotificationOmit;
  integration?: Prisma.IntegrationOmit;
  resetPassword?: Prisma.ResetPasswordOmit;
};

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error';
export type LogDefinition = {
  level: LogLevel;
  emit: 'stdout' | 'event';
};

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<
  LogLevel | LogDefinition
>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date;
  query: string;
  params: string;
  duration: number;
  target: string;
};

export type LogEvent = {
  timestamp: Date;
  message: string;
  target: string;
};
/* End Types for Logging */

export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy';

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<
  DefaultPrismaClient,
  runtime.ITXClientDenyList
>;
