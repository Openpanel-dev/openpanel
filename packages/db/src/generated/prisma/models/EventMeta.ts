
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EventMeta` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EventMeta
 * 
 */
export type EventMetaModel = runtime.Types.Result.DefaultSelection<Prisma.$EventMetaPayload>

export type AggregateEventMeta = {
  _count: EventMetaCountAggregateOutputType | null
  _min: EventMetaMinAggregateOutputType | null
  _max: EventMetaMaxAggregateOutputType | null
}

export type EventMetaMinAggregateOutputType = {
  id: string | null
  name: string | null
  conversion: boolean | null
  color: string | null
  icon: string | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EventMetaMaxAggregateOutputType = {
  id: string | null
  name: string | null
  conversion: boolean | null
  color: string | null
  icon: string | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EventMetaCountAggregateOutputType = {
  id: number
  name: number
  conversion: number
  color: number
  icon: number
  projectId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EventMetaMinAggregateInputType = {
  id?: true
  name?: true
  conversion?: true
  color?: true
  icon?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type EventMetaMaxAggregateInputType = {
  id?: true
  name?: true
  conversion?: true
  color?: true
  icon?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type EventMetaCountAggregateInputType = {
  id?: true
  name?: true
  conversion?: true
  color?: true
  icon?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EventMetaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventMeta to aggregate.
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventMetas to fetch.
   */
  orderBy?: Prisma.EventMetaOrderByWithRelationInput | Prisma.EventMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EventMetas
  **/
  _count?: true | EventMetaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventMetaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventMetaMaxAggregateInputType
}

export type GetEventMetaAggregateType<T extends EventMetaAggregateArgs> = {
      [P in keyof T & keyof AggregateEventMeta]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEventMeta[P]>
    : Prisma.GetScalarType<T[P], AggregateEventMeta[P]>
}




export type EventMetaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventMetaWhereInput
  orderBy?: Prisma.EventMetaOrderByWithAggregationInput | Prisma.EventMetaOrderByWithAggregationInput[]
  by: Prisma.EventMetaScalarFieldEnum[] | Prisma.EventMetaScalarFieldEnum
  having?: Prisma.EventMetaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventMetaCountAggregateInputType | true
  _min?: EventMetaMinAggregateInputType
  _max?: EventMetaMaxAggregateInputType
}

export type EventMetaGroupByOutputType = {
  id: string
  name: string
  conversion: boolean | null
  color: string | null
  icon: string | null
  projectId: string
  createdAt: Date
  updatedAt: Date
  _count: EventMetaCountAggregateOutputType | null
  _min: EventMetaMinAggregateOutputType | null
  _max: EventMetaMaxAggregateOutputType | null
}

type GetEventMetaGroupByPayload<T extends EventMetaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventMetaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventMetaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventMetaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventMetaGroupByOutputType[P]>
      }
    >
  >



export type EventMetaWhereInput = {
  AND?: Prisma.EventMetaWhereInput | Prisma.EventMetaWhereInput[]
  OR?: Prisma.EventMetaWhereInput[]
  NOT?: Prisma.EventMetaWhereInput | Prisma.EventMetaWhereInput[]
  id?: Prisma.UuidFilter<"EventMeta"> | string
  name?: Prisma.StringFilter<"EventMeta"> | string
  conversion?: Prisma.BoolNullableFilter<"EventMeta"> | boolean | null
  color?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  icon?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  projectId?: Prisma.StringFilter<"EventMeta"> | string
  createdAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}

export type EventMetaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conversion?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrderInput | Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type EventMetaWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name_projectId?: Prisma.EventMetaNameProjectIdCompoundUniqueInput
  AND?: Prisma.EventMetaWhereInput | Prisma.EventMetaWhereInput[]
  OR?: Prisma.EventMetaWhereInput[]
  NOT?: Prisma.EventMetaWhereInput | Prisma.EventMetaWhereInput[]
  name?: Prisma.StringFilter<"EventMeta"> | string
  conversion?: Prisma.BoolNullableFilter<"EventMeta"> | boolean | null
  color?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  icon?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  projectId?: Prisma.StringFilter<"EventMeta"> | string
  createdAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}, "id" | "name_projectId">

export type EventMetaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conversion?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrderInput | Prisma.SortOrder
  icon?: Prisma.SortOrderInput | Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EventMetaCountOrderByAggregateInput
  _max?: Prisma.EventMetaMaxOrderByAggregateInput
  _min?: Prisma.EventMetaMinOrderByAggregateInput
}

export type EventMetaScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventMetaScalarWhereWithAggregatesInput | Prisma.EventMetaScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventMetaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventMetaScalarWhereWithAggregatesInput | Prisma.EventMetaScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"EventMeta"> | string
  name?: Prisma.StringWithAggregatesFilter<"EventMeta"> | string
  conversion?: Prisma.BoolNullableWithAggregatesFilter<"EventMeta"> | boolean | null
  color?: Prisma.StringNullableWithAggregatesFilter<"EventMeta"> | string | null
  icon?: Prisma.StringNullableWithAggregatesFilter<"EventMeta"> | string | null
  projectId?: Prisma.StringWithAggregatesFilter<"EventMeta"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EventMeta"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EventMeta"> | Date | string
}

export type EventMetaCreateInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutMetaInput
}

export type EventMetaUncheckedCreateInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventMetaUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutMetaNestedInput
}

export type EventMetaUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventMetaCreateManyInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventMetaUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventMetaUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventMetaListRelationFilter = {
  every?: Prisma.EventMetaWhereInput
  some?: Prisma.EventMetaWhereInput
  none?: Prisma.EventMetaWhereInput
}

export type EventMetaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EventMetaNameProjectIdCompoundUniqueInput = {
  name: string
  projectId: string
}

export type EventMetaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conversion?: Prisma.SortOrder
  color?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventMetaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conversion?: Prisma.SortOrder
  color?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventMetaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  conversion?: Prisma.SortOrder
  color?: Prisma.SortOrder
  icon?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EventMetaCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput> | Prisma.EventMetaCreateWithoutProjectInput[] | Prisma.EventMetaUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.EventMetaCreateOrConnectWithoutProjectInput | Prisma.EventMetaCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.EventMetaCreateManyProjectInputEnvelope
  connect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
}

export type EventMetaUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput> | Prisma.EventMetaCreateWithoutProjectInput[] | Prisma.EventMetaUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.EventMetaCreateOrConnectWithoutProjectInput | Prisma.EventMetaCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.EventMetaCreateManyProjectInputEnvelope
  connect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
}

export type EventMetaUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput> | Prisma.EventMetaCreateWithoutProjectInput[] | Prisma.EventMetaUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.EventMetaCreateOrConnectWithoutProjectInput | Prisma.EventMetaCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.EventMetaUpsertWithWhereUniqueWithoutProjectInput | Prisma.EventMetaUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.EventMetaCreateManyProjectInputEnvelope
  set?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  disconnect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  delete?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  connect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  update?: Prisma.EventMetaUpdateWithWhereUniqueWithoutProjectInput | Prisma.EventMetaUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.EventMetaUpdateManyWithWhereWithoutProjectInput | Prisma.EventMetaUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.EventMetaScalarWhereInput | Prisma.EventMetaScalarWhereInput[]
}

export type EventMetaUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput> | Prisma.EventMetaCreateWithoutProjectInput[] | Prisma.EventMetaUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.EventMetaCreateOrConnectWithoutProjectInput | Prisma.EventMetaCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.EventMetaUpsertWithWhereUniqueWithoutProjectInput | Prisma.EventMetaUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.EventMetaCreateManyProjectInputEnvelope
  set?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  disconnect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  delete?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  connect?: Prisma.EventMetaWhereUniqueInput | Prisma.EventMetaWhereUniqueInput[]
  update?: Prisma.EventMetaUpdateWithWhereUniqueWithoutProjectInput | Prisma.EventMetaUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.EventMetaUpdateManyWithWhereWithoutProjectInput | Prisma.EventMetaUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.EventMetaScalarWhereInput | Prisma.EventMetaScalarWhereInput[]
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type EventMetaCreateWithoutProjectInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventMetaUncheckedCreateWithoutProjectInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventMetaCreateOrConnectWithoutProjectInput = {
  where: Prisma.EventMetaWhereUniqueInput
  create: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput>
}

export type EventMetaCreateManyProjectInputEnvelope = {
  data: Prisma.EventMetaCreateManyProjectInput | Prisma.EventMetaCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type EventMetaUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.EventMetaWhereUniqueInput
  update: Prisma.XOR<Prisma.EventMetaUpdateWithoutProjectInput, Prisma.EventMetaUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.EventMetaCreateWithoutProjectInput, Prisma.EventMetaUncheckedCreateWithoutProjectInput>
}

export type EventMetaUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.EventMetaWhereUniqueInput
  data: Prisma.XOR<Prisma.EventMetaUpdateWithoutProjectInput, Prisma.EventMetaUncheckedUpdateWithoutProjectInput>
}

export type EventMetaUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.EventMetaScalarWhereInput
  data: Prisma.XOR<Prisma.EventMetaUpdateManyMutationInput, Prisma.EventMetaUncheckedUpdateManyWithoutProjectInput>
}

export type EventMetaScalarWhereInput = {
  AND?: Prisma.EventMetaScalarWhereInput | Prisma.EventMetaScalarWhereInput[]
  OR?: Prisma.EventMetaScalarWhereInput[]
  NOT?: Prisma.EventMetaScalarWhereInput | Prisma.EventMetaScalarWhereInput[]
  id?: Prisma.UuidFilter<"EventMeta"> | string
  name?: Prisma.StringFilter<"EventMeta"> | string
  conversion?: Prisma.BoolNullableFilter<"EventMeta"> | boolean | null
  color?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  icon?: Prisma.StringNullableFilter<"EventMeta"> | string | null
  projectId?: Prisma.StringFilter<"EventMeta"> | string
  createdAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EventMeta"> | Date | string
}

export type EventMetaCreateManyProjectInput = {
  id?: string
  name: string
  conversion?: boolean | null
  color?: string | null
  icon?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EventMetaUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventMetaUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EventMetaUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  conversion?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  icon?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type EventMetaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  conversion?: boolean
  color?: boolean
  icon?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventMeta"]>

export type EventMetaSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  conversion?: boolean
  color?: boolean
  icon?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventMeta"]>

export type EventMetaSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  conversion?: boolean
  color?: boolean
  icon?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["eventMeta"]>

export type EventMetaSelectScalar = {
  id?: boolean
  name?: boolean
  conversion?: boolean
  color?: boolean
  icon?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EventMetaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "conversion" | "color" | "icon" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["eventMeta"]>
export type EventMetaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type EventMetaIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type EventMetaIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $EventMetaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EventMeta"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    conversion: boolean | null
    color: string | null
    icon: string | null
    projectId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["eventMeta"]>
  composites: {}
}

export type EventMetaGetPayload<S extends boolean | null | undefined | EventMetaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventMetaPayload, S>

export type EventMetaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventMetaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventMetaCountAggregateInputType | true
  }

export interface EventMetaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventMeta'], meta: { name: 'EventMeta' } }
  /**
   * Find zero or one EventMeta that matches the filter.
   * @param {EventMetaFindUniqueArgs} args - Arguments to find a EventMeta
   * @example
   * // Get one EventMeta
   * const eventMeta = await prisma.eventMeta.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventMetaFindUniqueArgs>(args: Prisma.SelectSubset<T, EventMetaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EventMeta that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventMetaFindUniqueOrThrowArgs} args - Arguments to find a EventMeta
   * @example
   * // Get one EventMeta
   * const eventMeta = await prisma.eventMeta.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventMetaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventMetaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventMeta that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaFindFirstArgs} args - Arguments to find a EventMeta
   * @example
   * // Get one EventMeta
   * const eventMeta = await prisma.eventMeta.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventMetaFindFirstArgs>(args?: Prisma.SelectSubset<T, EventMetaFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EventMeta that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaFindFirstOrThrowArgs} args - Arguments to find a EventMeta
   * @example
   * // Get one EventMeta
   * const eventMeta = await prisma.eventMeta.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventMetaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventMetaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EventMetas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EventMetas
   * const eventMetas = await prisma.eventMeta.findMany()
   * 
   * // Get first 10 EventMetas
   * const eventMetas = await prisma.eventMeta.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventMetaWithIdOnly = await prisma.eventMeta.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventMetaFindManyArgs>(args?: Prisma.SelectSubset<T, EventMetaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EventMeta.
   * @param {EventMetaCreateArgs} args - Arguments to create a EventMeta.
   * @example
   * // Create one EventMeta
   * const EventMeta = await prisma.eventMeta.create({
   *   data: {
   *     // ... data to create a EventMeta
   *   }
   * })
   * 
   */
  create<T extends EventMetaCreateArgs>(args: Prisma.SelectSubset<T, EventMetaCreateArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EventMetas.
   * @param {EventMetaCreateManyArgs} args - Arguments to create many EventMetas.
   * @example
   * // Create many EventMetas
   * const eventMeta = await prisma.eventMeta.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventMetaCreateManyArgs>(args?: Prisma.SelectSubset<T, EventMetaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EventMetas and returns the data saved in the database.
   * @param {EventMetaCreateManyAndReturnArgs} args - Arguments to create many EventMetas.
   * @example
   * // Create many EventMetas
   * const eventMeta = await prisma.eventMeta.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EventMetas and only return the `id`
   * const eventMetaWithIdOnly = await prisma.eventMeta.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EventMetaCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EventMetaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EventMeta.
   * @param {EventMetaDeleteArgs} args - Arguments to delete one EventMeta.
   * @example
   * // Delete one EventMeta
   * const EventMeta = await prisma.eventMeta.delete({
   *   where: {
   *     // ... filter to delete one EventMeta
   *   }
   * })
   * 
   */
  delete<T extends EventMetaDeleteArgs>(args: Prisma.SelectSubset<T, EventMetaDeleteArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EventMeta.
   * @param {EventMetaUpdateArgs} args - Arguments to update one EventMeta.
   * @example
   * // Update one EventMeta
   * const eventMeta = await prisma.eventMeta.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventMetaUpdateArgs>(args: Prisma.SelectSubset<T, EventMetaUpdateArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EventMetas.
   * @param {EventMetaDeleteManyArgs} args - Arguments to filter EventMetas to delete.
   * @example
   * // Delete a few EventMetas
   * const { count } = await prisma.eventMeta.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventMetaDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventMetaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventMetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EventMetas
   * const eventMeta = await prisma.eventMeta.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventMetaUpdateManyArgs>(args: Prisma.SelectSubset<T, EventMetaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EventMetas and returns the data updated in the database.
   * @param {EventMetaUpdateManyAndReturnArgs} args - Arguments to update many EventMetas.
   * @example
   * // Update many EventMetas
   * const eventMeta = await prisma.eventMeta.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EventMetas and only return the `id`
   * const eventMetaWithIdOnly = await prisma.eventMeta.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EventMetaUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EventMetaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EventMeta.
   * @param {EventMetaUpsertArgs} args - Arguments to update or create a EventMeta.
   * @example
   * // Update or create a EventMeta
   * const eventMeta = await prisma.eventMeta.upsert({
   *   create: {
   *     // ... data to create a EventMeta
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EventMeta we want to update
   *   }
   * })
   */
  upsert<T extends EventMetaUpsertArgs>(args: Prisma.SelectSubset<T, EventMetaUpsertArgs<ExtArgs>>): Prisma.Prisma__EventMetaClient<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EventMetas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaCountArgs} args - Arguments to filter EventMetas to count.
   * @example
   * // Count the number of EventMetas
   * const count = await prisma.eventMeta.count({
   *   where: {
   *     // ... the filter for the EventMetas we want to count
   *   }
   * })
  **/
  count<T extends EventMetaCountArgs>(
    args?: Prisma.Subset<T, EventMetaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventMetaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EventMeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventMetaAggregateArgs>(args: Prisma.Subset<T, EventMetaAggregateArgs>): Prisma.PrismaPromise<GetEventMetaAggregateType<T>>

  /**
   * Group by EventMeta.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventMetaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventMetaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventMetaGroupByArgs['orderBy'] }
      : { orderBy?: EventMetaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventMetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventMetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EventMeta model
 */
readonly fields: EventMetaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EventMeta.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventMetaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EventMeta model
 */
export interface EventMetaFieldRefs {
  readonly id: Prisma.FieldRef<"EventMeta", 'String'>
  readonly name: Prisma.FieldRef<"EventMeta", 'String'>
  readonly conversion: Prisma.FieldRef<"EventMeta", 'Boolean'>
  readonly color: Prisma.FieldRef<"EventMeta", 'String'>
  readonly icon: Prisma.FieldRef<"EventMeta", 'String'>
  readonly projectId: Prisma.FieldRef<"EventMeta", 'String'>
  readonly createdAt: Prisma.FieldRef<"EventMeta", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EventMeta", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EventMeta findUnique
 */
export type EventMetaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter, which EventMeta to fetch.
   */
  where: Prisma.EventMetaWhereUniqueInput
}

/**
 * EventMeta findUniqueOrThrow
 */
export type EventMetaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter, which EventMeta to fetch.
   */
  where: Prisma.EventMetaWhereUniqueInput
}

/**
 * EventMeta findFirst
 */
export type EventMetaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter, which EventMeta to fetch.
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventMetas to fetch.
   */
  orderBy?: Prisma.EventMetaOrderByWithRelationInput | Prisma.EventMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventMetas.
   */
  cursor?: Prisma.EventMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventMetas.
   */
  distinct?: Prisma.EventMetaScalarFieldEnum | Prisma.EventMetaScalarFieldEnum[]
}

/**
 * EventMeta findFirstOrThrow
 */
export type EventMetaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter, which EventMeta to fetch.
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventMetas to fetch.
   */
  orderBy?: Prisma.EventMetaOrderByWithRelationInput | Prisma.EventMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EventMetas.
   */
  cursor?: Prisma.EventMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventMetas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EventMetas.
   */
  distinct?: Prisma.EventMetaScalarFieldEnum | Prisma.EventMetaScalarFieldEnum[]
}

/**
 * EventMeta findMany
 */
export type EventMetaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter, which EventMetas to fetch.
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EventMetas to fetch.
   */
  orderBy?: Prisma.EventMetaOrderByWithRelationInput | Prisma.EventMetaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EventMetas.
   */
  cursor?: Prisma.EventMetaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EventMetas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EventMetas.
   */
  skip?: number
  distinct?: Prisma.EventMetaScalarFieldEnum | Prisma.EventMetaScalarFieldEnum[]
}

/**
 * EventMeta create
 */
export type EventMetaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * The data needed to create a EventMeta.
   */
  data: Prisma.XOR<Prisma.EventMetaCreateInput, Prisma.EventMetaUncheckedCreateInput>
}

/**
 * EventMeta createMany
 */
export type EventMetaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EventMetas.
   */
  data: Prisma.EventMetaCreateManyInput | Prisma.EventMetaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EventMeta createManyAndReturn
 */
export type EventMetaCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * The data used to create many EventMetas.
   */
  data: Prisma.EventMetaCreateManyInput | Prisma.EventMetaCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EventMeta update
 */
export type EventMetaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * The data needed to update a EventMeta.
   */
  data: Prisma.XOR<Prisma.EventMetaUpdateInput, Prisma.EventMetaUncheckedUpdateInput>
  /**
   * Choose, which EventMeta to update.
   */
  where: Prisma.EventMetaWhereUniqueInput
}

/**
 * EventMeta updateMany
 */
export type EventMetaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EventMetas.
   */
  data: Prisma.XOR<Prisma.EventMetaUpdateManyMutationInput, Prisma.EventMetaUncheckedUpdateManyInput>
  /**
   * Filter which EventMetas to update
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * Limit how many EventMetas to update.
   */
  limit?: number
}

/**
 * EventMeta updateManyAndReturn
 */
export type EventMetaUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * The data used to update EventMetas.
   */
  data: Prisma.XOR<Prisma.EventMetaUpdateManyMutationInput, Prisma.EventMetaUncheckedUpdateManyInput>
  /**
   * Filter which EventMetas to update
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * Limit how many EventMetas to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EventMeta upsert
 */
export type EventMetaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * The filter to search for the EventMeta to update in case it exists.
   */
  where: Prisma.EventMetaWhereUniqueInput
  /**
   * In case the EventMeta found by the `where` argument doesn't exist, create a new EventMeta with this data.
   */
  create: Prisma.XOR<Prisma.EventMetaCreateInput, Prisma.EventMetaUncheckedCreateInput>
  /**
   * In case the EventMeta was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventMetaUpdateInput, Prisma.EventMetaUncheckedUpdateInput>
}

/**
 * EventMeta delete
 */
export type EventMetaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  /**
   * Filter which EventMeta to delete.
   */
  where: Prisma.EventMetaWhereUniqueInput
}

/**
 * EventMeta deleteMany
 */
export type EventMetaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EventMetas to delete
   */
  where?: Prisma.EventMetaWhereInput
  /**
   * Limit how many EventMetas to delete.
   */
  limit?: number
}

/**
 * EventMeta without action
 */
export type EventMetaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
}
