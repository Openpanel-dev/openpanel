
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Invite` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Invite
 * 
 */
export type InviteModel = runtime.Types.Result.DefaultSelection<Prisma.$InvitePayload>

export type AggregateInvite = {
  _count: InviteCountAggregateOutputType | null
  _min: InviteMinAggregateOutputType | null
  _max: InviteMaxAggregateOutputType | null
}

export type InviteMinAggregateOutputType = {
  id: string | null
  email: string | null
  createdById: string | null
  organizationId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  role: string | null
}

export type InviteMaxAggregateOutputType = {
  id: string | null
  email: string | null
  createdById: string | null
  organizationId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  role: string | null
}

export type InviteCountAggregateOutputType = {
  id: number
  email: number
  createdById: number
  organizationId: number
  projectAccess: number
  expiresAt: number
  createdAt: number
  updatedAt: number
  role: number
  _all: number
}


export type InviteMinAggregateInputType = {
  id?: true
  email?: true
  createdById?: true
  organizationId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  role?: true
}

export type InviteMaxAggregateInputType = {
  id?: true
  email?: true
  createdById?: true
  organizationId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  role?: true
}

export type InviteCountAggregateInputType = {
  id?: true
  email?: true
  createdById?: true
  organizationId?: true
  projectAccess?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  role?: true
  _all?: true
}

export type InviteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Invite to aggregate.
   */
  where?: Prisma.InviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invites to fetch.
   */
  orderBy?: Prisma.InviteOrderByWithRelationInput | Prisma.InviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Invites
  **/
  _count?: true | InviteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InviteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InviteMaxAggregateInputType
}

export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
      [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInvite[P]>
    : Prisma.GetScalarType<T[P], AggregateInvite[P]>
}




export type InviteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InviteWhereInput
  orderBy?: Prisma.InviteOrderByWithAggregationInput | Prisma.InviteOrderByWithAggregationInput[]
  by: Prisma.InviteScalarFieldEnum[] | Prisma.InviteScalarFieldEnum
  having?: Prisma.InviteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InviteCountAggregateInputType | true
  _min?: InviteMinAggregateInputType
  _max?: InviteMaxAggregateInputType
}

export type InviteGroupByOutputType = {
  id: string
  email: string
  createdById: string
  organizationId: string
  projectAccess: string[]
  expiresAt: Date
  createdAt: Date
  updatedAt: Date
  role: string
  _count: InviteCountAggregateOutputType | null
  _min: InviteMinAggregateOutputType | null
  _max: InviteMaxAggregateOutputType | null
}

type GetInviteGroupByPayload<T extends InviteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InviteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InviteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InviteGroupByOutputType[P]>
      }
    >
  >



export type InviteWhereInput = {
  AND?: Prisma.InviteWhereInput | Prisma.InviteWhereInput[]
  OR?: Prisma.InviteWhereInput[]
  NOT?: Prisma.InviteWhereInput | Prisma.InviteWhereInput[]
  id?: Prisma.StringFilter<"Invite"> | string
  email?: Prisma.StringFilter<"Invite"> | string
  createdById?: Prisma.StringFilter<"Invite"> | string
  organizationId?: Prisma.StringFilter<"Invite"> | string
  projectAccess?: Prisma.StringNullableListFilter<"Invite">
  expiresAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  role?: Prisma.StringFilter<"Invite"> | string
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}

export type InviteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  projectAccess?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
  createdBy?: Prisma.UserOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
}

export type InviteWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InviteWhereInput | Prisma.InviteWhereInput[]
  OR?: Prisma.InviteWhereInput[]
  NOT?: Prisma.InviteWhereInput | Prisma.InviteWhereInput[]
  email?: Prisma.StringFilter<"Invite"> | string
  createdById?: Prisma.StringFilter<"Invite"> | string
  organizationId?: Prisma.StringFilter<"Invite"> | string
  projectAccess?: Prisma.StringNullableListFilter<"Invite">
  expiresAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  role?: Prisma.StringFilter<"Invite"> | string
  createdBy?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
}, "id">

export type InviteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  projectAccess?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.InviteCountOrderByAggregateInput
  _max?: Prisma.InviteMaxOrderByAggregateInput
  _min?: Prisma.InviteMinOrderByAggregateInput
}

export type InviteScalarWhereWithAggregatesInput = {
  AND?: Prisma.InviteScalarWhereWithAggregatesInput | Prisma.InviteScalarWhereWithAggregatesInput[]
  OR?: Prisma.InviteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InviteScalarWhereWithAggregatesInput | Prisma.InviteScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Invite"> | string
  email?: Prisma.StringWithAggregatesFilter<"Invite"> | string
  createdById?: Prisma.StringWithAggregatesFilter<"Invite"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Invite"> | string
  projectAccess?: Prisma.StringNullableListFilter<"Invite">
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"Invite"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Invite"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Invite"> | Date | string
  role?: Prisma.StringWithAggregatesFilter<"Invite"> | string
}

export type InviteCreateInput = {
  id: string
  email: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
  createdBy: Prisma.UserCreateNestedOneWithoutInvitesInput
  organization: Prisma.OrganizationCreateNestedOneWithoutInvitesInput
}

export type InviteUncheckedCreateInput = {
  id: string
  email: string
  createdById: string
  organizationId: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.UserUpdateOneRequiredWithoutInvitesNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutInvitesNestedInput
}

export type InviteUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteCreateManyInput = {
  id: string
  email: string
  createdById: string
  organizationId: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteListRelationFilter = {
  every?: Prisma.InviteWhereInput
  some?: Prisma.InviteWhereInput
  none?: Prisma.InviteWhereInput
}

export type InviteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type InviteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  projectAccess?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InviteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InviteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  createdById?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type InviteCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput> | Prisma.InviteCreateWithoutOrganizationInput[] | Prisma.InviteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutOrganizationInput | Prisma.InviteCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.InviteCreateManyOrganizationInputEnvelope
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
}

export type InviteUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput> | Prisma.InviteCreateWithoutOrganizationInput[] | Prisma.InviteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutOrganizationInput | Prisma.InviteCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.InviteCreateManyOrganizationInputEnvelope
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
}

export type InviteUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput> | Prisma.InviteCreateWithoutOrganizationInput[] | Prisma.InviteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutOrganizationInput | Prisma.InviteCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.InviteUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.InviteUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.InviteCreateManyOrganizationInputEnvelope
  set?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  disconnect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  delete?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  update?: Prisma.InviteUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.InviteUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.InviteUpdateManyWithWhereWithoutOrganizationInput | Prisma.InviteUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
}

export type InviteUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput> | Prisma.InviteCreateWithoutOrganizationInput[] | Prisma.InviteUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutOrganizationInput | Prisma.InviteCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.InviteUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.InviteUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.InviteCreateManyOrganizationInputEnvelope
  set?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  disconnect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  delete?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  update?: Prisma.InviteUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.InviteUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.InviteUpdateManyWithWhereWithoutOrganizationInput | Prisma.InviteUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
}

export type InviteCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput> | Prisma.InviteCreateWithoutCreatedByInput[] | Prisma.InviteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutCreatedByInput | Prisma.InviteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.InviteCreateManyCreatedByInputEnvelope
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
}

export type InviteUncheckedCreateNestedManyWithoutCreatedByInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput> | Prisma.InviteCreateWithoutCreatedByInput[] | Prisma.InviteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutCreatedByInput | Prisma.InviteCreateOrConnectWithoutCreatedByInput[]
  createMany?: Prisma.InviteCreateManyCreatedByInputEnvelope
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
}

export type InviteUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput> | Prisma.InviteCreateWithoutCreatedByInput[] | Prisma.InviteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutCreatedByInput | Prisma.InviteCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.InviteUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.InviteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.InviteCreateManyCreatedByInputEnvelope
  set?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  disconnect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  delete?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  update?: Prisma.InviteUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.InviteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.InviteUpdateManyWithWhereWithoutCreatedByInput | Prisma.InviteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
}

export type InviteUncheckedUpdateManyWithoutCreatedByNestedInput = {
  create?: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput> | Prisma.InviteCreateWithoutCreatedByInput[] | Prisma.InviteUncheckedCreateWithoutCreatedByInput[]
  connectOrCreate?: Prisma.InviteCreateOrConnectWithoutCreatedByInput | Prisma.InviteCreateOrConnectWithoutCreatedByInput[]
  upsert?: Prisma.InviteUpsertWithWhereUniqueWithoutCreatedByInput | Prisma.InviteUpsertWithWhereUniqueWithoutCreatedByInput[]
  createMany?: Prisma.InviteCreateManyCreatedByInputEnvelope
  set?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  disconnect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  delete?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  connect?: Prisma.InviteWhereUniqueInput | Prisma.InviteWhereUniqueInput[]
  update?: Prisma.InviteUpdateWithWhereUniqueWithoutCreatedByInput | Prisma.InviteUpdateWithWhereUniqueWithoutCreatedByInput[]
  updateMany?: Prisma.InviteUpdateManyWithWhereWithoutCreatedByInput | Prisma.InviteUpdateManyWithWhereWithoutCreatedByInput[]
  deleteMany?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
}

export type InviteCreateprojectAccessInput = {
  set: string[]
}

export type InviteUpdateprojectAccessInput = {
  set?: string[]
  push?: string | string[]
}

export type InviteCreateWithoutOrganizationInput = {
  id: string
  email: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
  createdBy: Prisma.UserCreateNestedOneWithoutInvitesInput
}

export type InviteUncheckedCreateWithoutOrganizationInput = {
  id: string
  email: string
  createdById: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.InviteWhereUniqueInput
  create: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput>
}

export type InviteCreateManyOrganizationInputEnvelope = {
  data: Prisma.InviteCreateManyOrganizationInput | Prisma.InviteCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type InviteUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.InviteWhereUniqueInput
  update: Prisma.XOR<Prisma.InviteUpdateWithoutOrganizationInput, Prisma.InviteUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.InviteCreateWithoutOrganizationInput, Prisma.InviteUncheckedCreateWithoutOrganizationInput>
}

export type InviteUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.InviteWhereUniqueInput
  data: Prisma.XOR<Prisma.InviteUpdateWithoutOrganizationInput, Prisma.InviteUncheckedUpdateWithoutOrganizationInput>
}

export type InviteUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.InviteScalarWhereInput
  data: Prisma.XOR<Prisma.InviteUpdateManyMutationInput, Prisma.InviteUncheckedUpdateManyWithoutOrganizationInput>
}

export type InviteScalarWhereInput = {
  AND?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
  OR?: Prisma.InviteScalarWhereInput[]
  NOT?: Prisma.InviteScalarWhereInput | Prisma.InviteScalarWhereInput[]
  id?: Prisma.StringFilter<"Invite"> | string
  email?: Prisma.StringFilter<"Invite"> | string
  createdById?: Prisma.StringFilter<"Invite"> | string
  organizationId?: Prisma.StringFilter<"Invite"> | string
  projectAccess?: Prisma.StringNullableListFilter<"Invite">
  expiresAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Invite"> | Date | string
  role?: Prisma.StringFilter<"Invite"> | string
}

export type InviteCreateWithoutCreatedByInput = {
  id: string
  email: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
  organization: Prisma.OrganizationCreateNestedOneWithoutInvitesInput
}

export type InviteUncheckedCreateWithoutCreatedByInput = {
  id: string
  email: string
  organizationId: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteCreateOrConnectWithoutCreatedByInput = {
  where: Prisma.InviteWhereUniqueInput
  create: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput>
}

export type InviteCreateManyCreatedByInputEnvelope = {
  data: Prisma.InviteCreateManyCreatedByInput | Prisma.InviteCreateManyCreatedByInput[]
  skipDuplicates?: boolean
}

export type InviteUpsertWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.InviteWhereUniqueInput
  update: Prisma.XOR<Prisma.InviteUpdateWithoutCreatedByInput, Prisma.InviteUncheckedUpdateWithoutCreatedByInput>
  create: Prisma.XOR<Prisma.InviteCreateWithoutCreatedByInput, Prisma.InviteUncheckedCreateWithoutCreatedByInput>
}

export type InviteUpdateWithWhereUniqueWithoutCreatedByInput = {
  where: Prisma.InviteWhereUniqueInput
  data: Prisma.XOR<Prisma.InviteUpdateWithoutCreatedByInput, Prisma.InviteUncheckedUpdateWithoutCreatedByInput>
}

export type InviteUpdateManyWithWhereWithoutCreatedByInput = {
  where: Prisma.InviteScalarWhereInput
  data: Prisma.XOR<Prisma.InviteUpdateManyMutationInput, Prisma.InviteUncheckedUpdateManyWithoutCreatedByInput>
}

export type InviteCreateManyOrganizationInput = {
  id: string
  email: string
  createdById: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.UserUpdateOneRequiredWithoutInvitesNestedInput
}

export type InviteUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  createdById?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteCreateManyCreatedByInput = {
  id: string
  email: string
  organizationId: string
  projectAccess?: Prisma.InviteCreateprojectAccessInput | string[]
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  role: string
}

export type InviteUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutInvitesNestedInput
}

export type InviteUncheckedUpdateWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type InviteUncheckedUpdateManyWithoutCreatedByInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  projectAccess?: Prisma.InviteUpdateprojectAccessInput | string[]
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}



export type InviteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdById?: boolean
  organizationId?: boolean
  projectAccess?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  role?: boolean
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invite"]>

export type InviteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdById?: boolean
  organizationId?: boolean
  projectAccess?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  role?: boolean
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invite"]>

export type InviteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  createdById?: boolean
  organizationId?: boolean
  projectAccess?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  role?: boolean
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["invite"]>

export type InviteSelectScalar = {
  id?: boolean
  email?: boolean
  createdById?: boolean
  organizationId?: boolean
  projectAccess?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  role?: boolean
}

export type InviteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "createdById" | "organizationId" | "projectAccess" | "expiresAt" | "createdAt" | "updatedAt" | "role", ExtArgs["result"]["invite"]>
export type InviteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type InviteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type InviteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  createdBy?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $InvitePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Invite"
  objects: {
    createdBy: Prisma.$UserPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    email: string
    createdById: string
    organizationId: string
    projectAccess: string[]
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    role: string
  }, ExtArgs["result"]["invite"]>
  composites: {}
}

export type InviteGetPayload<S extends boolean | null | undefined | InviteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InvitePayload, S>

export type InviteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InviteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InviteCountAggregateInputType | true
  }

export interface InviteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invite'], meta: { name: 'Invite' } }
  /**
   * Find zero or one Invite that matches the filter.
   * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
   * @example
   * // Get one Invite
   * const invite = await prisma.invite.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InviteFindUniqueArgs>(args: Prisma.SelectSubset<T, InviteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Invite that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InviteFindUniqueOrThrowArgs} args - Arguments to find a Invite
   * @example
   * // Get one Invite
   * const invite = await prisma.invite.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InviteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Invite that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteFindFirstArgs} args - Arguments to find a Invite
   * @example
   * // Get one Invite
   * const invite = await prisma.invite.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InviteFindFirstArgs>(args?: Prisma.SelectSubset<T, InviteFindFirstArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Invite that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteFindFirstOrThrowArgs} args - Arguments to find a Invite
   * @example
   * // Get one Invite
   * const invite = await prisma.invite.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InviteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InviteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Invites that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Invites
   * const invites = await prisma.invite.findMany()
   * 
   * // Get first 10 Invites
   * const invites = await prisma.invite.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InviteFindManyArgs>(args?: Prisma.SelectSubset<T, InviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Invite.
   * @param {InviteCreateArgs} args - Arguments to create a Invite.
   * @example
   * // Create one Invite
   * const Invite = await prisma.invite.create({
   *   data: {
   *     // ... data to create a Invite
   *   }
   * })
   * 
   */
  create<T extends InviteCreateArgs>(args: Prisma.SelectSubset<T, InviteCreateArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Invites.
   * @param {InviteCreateManyArgs} args - Arguments to create many Invites.
   * @example
   * // Create many Invites
   * const invite = await prisma.invite.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InviteCreateManyArgs>(args?: Prisma.SelectSubset<T, InviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Invites and returns the data saved in the database.
   * @param {InviteCreateManyAndReturnArgs} args - Arguments to create many Invites.
   * @example
   * // Create many Invites
   * const invite = await prisma.invite.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Invites and only return the `id`
   * const inviteWithIdOnly = await prisma.invite.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InviteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Invite.
   * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
   * @example
   * // Delete one Invite
   * const Invite = await prisma.invite.delete({
   *   where: {
   *     // ... filter to delete one Invite
   *   }
   * })
   * 
   */
  delete<T extends InviteDeleteArgs>(args: Prisma.SelectSubset<T, InviteDeleteArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Invite.
   * @param {InviteUpdateArgs} args - Arguments to update one Invite.
   * @example
   * // Update one Invite
   * const invite = await prisma.invite.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InviteUpdateArgs>(args: Prisma.SelectSubset<T, InviteUpdateArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Invites.
   * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
   * @example
   * // Delete a few Invites
   * const { count } = await prisma.invite.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InviteDeleteManyArgs>(args?: Prisma.SelectSubset<T, InviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Invites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Invites
   * const invite = await prisma.invite.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InviteUpdateManyArgs>(args: Prisma.SelectSubset<T, InviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Invites and returns the data updated in the database.
   * @param {InviteUpdateManyAndReturnArgs} args - Arguments to update many Invites.
   * @example
   * // Update many Invites
   * const invite = await prisma.invite.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Invites and only return the `id`
   * const inviteWithIdOnly = await prisma.invite.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InviteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InviteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Invite.
   * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
   * @example
   * // Update or create a Invite
   * const invite = await prisma.invite.upsert({
   *   create: {
   *     // ... data to create a Invite
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Invite we want to update
   *   }
   * })
   */
  upsert<T extends InviteUpsertArgs>(args: Prisma.SelectSubset<T, InviteUpsertArgs<ExtArgs>>): Prisma.Prisma__InviteClient<runtime.Types.Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Invites.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteCountArgs} args - Arguments to filter Invites to count.
   * @example
   * // Count the number of Invites
   * const count = await prisma.invite.count({
   *   where: {
   *     // ... the filter for the Invites we want to count
   *   }
   * })
  **/
  count<T extends InviteCountArgs>(
    args?: Prisma.Subset<T, InviteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InviteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Invite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InviteAggregateArgs>(args: Prisma.Subset<T, InviteAggregateArgs>): Prisma.PrismaPromise<GetInviteAggregateType<T>>

  /**
   * Group by Invite.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InviteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InviteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InviteGroupByArgs['orderBy'] }
      : { orderBy?: InviteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Invite model
 */
readonly fields: InviteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Invite.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InviteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  createdBy<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Invite model
 */
export interface InviteFieldRefs {
  readonly id: Prisma.FieldRef<"Invite", 'String'>
  readonly email: Prisma.FieldRef<"Invite", 'String'>
  readonly createdById: Prisma.FieldRef<"Invite", 'String'>
  readonly organizationId: Prisma.FieldRef<"Invite", 'String'>
  readonly projectAccess: Prisma.FieldRef<"Invite", 'String[]'>
  readonly expiresAt: Prisma.FieldRef<"Invite", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Invite", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Invite", 'DateTime'>
  readonly role: Prisma.FieldRef<"Invite", 'String'>
}
    

// Custom InputTypes
/**
 * Invite findUnique
 */
export type InviteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter, which Invite to fetch.
   */
  where: Prisma.InviteWhereUniqueInput
}

/**
 * Invite findUniqueOrThrow
 */
export type InviteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter, which Invite to fetch.
   */
  where: Prisma.InviteWhereUniqueInput
}

/**
 * Invite findFirst
 */
export type InviteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter, which Invite to fetch.
   */
  where?: Prisma.InviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invites to fetch.
   */
  orderBy?: Prisma.InviteOrderByWithRelationInput | Prisma.InviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Invites.
   */
  cursor?: Prisma.InviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Invites.
   */
  distinct?: Prisma.InviteScalarFieldEnum | Prisma.InviteScalarFieldEnum[]
}

/**
 * Invite findFirstOrThrow
 */
export type InviteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter, which Invite to fetch.
   */
  where?: Prisma.InviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invites to fetch.
   */
  orderBy?: Prisma.InviteOrderByWithRelationInput | Prisma.InviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Invites.
   */
  cursor?: Prisma.InviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invites.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Invites.
   */
  distinct?: Prisma.InviteScalarFieldEnum | Prisma.InviteScalarFieldEnum[]
}

/**
 * Invite findMany
 */
export type InviteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter, which Invites to fetch.
   */
  where?: Prisma.InviteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Invites to fetch.
   */
  orderBy?: Prisma.InviteOrderByWithRelationInput | Prisma.InviteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Invites.
   */
  cursor?: Prisma.InviteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Invites from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Invites.
   */
  skip?: number
  distinct?: Prisma.InviteScalarFieldEnum | Prisma.InviteScalarFieldEnum[]
}

/**
 * Invite create
 */
export type InviteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * The data needed to create a Invite.
   */
  data: Prisma.XOR<Prisma.InviteCreateInput, Prisma.InviteUncheckedCreateInput>
}

/**
 * Invite createMany
 */
export type InviteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Invites.
   */
  data: Prisma.InviteCreateManyInput | Prisma.InviteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Invite createManyAndReturn
 */
export type InviteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * The data used to create many Invites.
   */
  data: Prisma.InviteCreateManyInput | Prisma.InviteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Invite update
 */
export type InviteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * The data needed to update a Invite.
   */
  data: Prisma.XOR<Prisma.InviteUpdateInput, Prisma.InviteUncheckedUpdateInput>
  /**
   * Choose, which Invite to update.
   */
  where: Prisma.InviteWhereUniqueInput
}

/**
 * Invite updateMany
 */
export type InviteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Invites.
   */
  data: Prisma.XOR<Prisma.InviteUpdateManyMutationInput, Prisma.InviteUncheckedUpdateManyInput>
  /**
   * Filter which Invites to update
   */
  where?: Prisma.InviteWhereInput
  /**
   * Limit how many Invites to update.
   */
  limit?: number
}

/**
 * Invite updateManyAndReturn
 */
export type InviteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * The data used to update Invites.
   */
  data: Prisma.XOR<Prisma.InviteUpdateManyMutationInput, Prisma.InviteUncheckedUpdateManyInput>
  /**
   * Filter which Invites to update
   */
  where?: Prisma.InviteWhereInput
  /**
   * Limit how many Invites to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Invite upsert
 */
export type InviteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * The filter to search for the Invite to update in case it exists.
   */
  where: Prisma.InviteWhereUniqueInput
  /**
   * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
   */
  create: Prisma.XOR<Prisma.InviteCreateInput, Prisma.InviteUncheckedCreateInput>
  /**
   * In case the Invite was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InviteUpdateInput, Prisma.InviteUncheckedUpdateInput>
}

/**
 * Invite delete
 */
export type InviteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
  /**
   * Filter which Invite to delete.
   */
  where: Prisma.InviteWhereUniqueInput
}

/**
 * Invite deleteMany
 */
export type InviteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Invites to delete
   */
  where?: Prisma.InviteWhereInput
  /**
   * Limit how many Invites to delete.
   */
  limit?: number
}

/**
 * Invite without action
 */
export type InviteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Invite
   */
  select?: Prisma.InviteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Invite
   */
  omit?: Prisma.InviteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InviteInclude<ExtArgs> | null
}
