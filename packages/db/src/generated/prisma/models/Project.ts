
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Project` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Project
 * 
 */
export type ProjectModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectPayload>

export type AggregateProject = {
  _count: ProjectCountAggregateOutputType | null
  _avg: ProjectAvgAggregateOutputType | null
  _sum: ProjectSumAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

export type ProjectAvgAggregateOutputType = {
  eventsCount: number | null
}

export type ProjectSumAggregateOutputType = {
  eventsCount: number | null
}

export type ProjectMinAggregateOutputType = {
  id: string | null
  name: string | null
  organizationId: string | null
  eventsCount: number | null
  domain: string | null
  crossDomain: boolean | null
  deleteAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectMaxAggregateOutputType = {
  id: string | null
  name: string | null
  organizationId: string | null
  eventsCount: number | null
  domain: string | null
  crossDomain: boolean | null
  deleteAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectCountAggregateOutputType = {
  id: number
  name: number
  organizationId: number
  eventsCount: number
  types: number
  domain: number
  cors: number
  crossDomain: number
  filters: number
  deleteAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectAvgAggregateInputType = {
  eventsCount?: true
}

export type ProjectSumAggregateInputType = {
  eventsCount?: true
}

export type ProjectMinAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  eventsCount?: true
  domain?: true
  crossDomain?: true
  deleteAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectMaxAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  eventsCount?: true
  domain?: true
  crossDomain?: true
  deleteAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectCountAggregateInputType = {
  id?: true
  name?: true
  organizationId?: true
  eventsCount?: true
  types?: true
  domain?: true
  cors?: true
  crossDomain?: true
  filters?: true
  deleteAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Project to aggregate.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Projects
  **/
  _count?: true | ProjectCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProjectAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProjectSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectMaxAggregateInputType
}

export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
      [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProject[P]>
    : Prisma.GetScalarType<T[P], AggregateProject[P]>
}




export type ProjectGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectWhereInput
  orderBy?: Prisma.ProjectOrderByWithAggregationInput | Prisma.ProjectOrderByWithAggregationInput[]
  by: Prisma.ProjectScalarFieldEnum[] | Prisma.ProjectScalarFieldEnum
  having?: Prisma.ProjectScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectCountAggregateInputType | true
  _avg?: ProjectAvgAggregateInputType
  _sum?: ProjectSumAggregateInputType
  _min?: ProjectMinAggregateInputType
  _max?: ProjectMaxAggregateInputType
}

export type ProjectGroupByOutputType = {
  id: string
  name: string
  organizationId: string
  eventsCount: number
  types: $Enums.ProjectType[]
  domain: string | null
  cors: string[]
  crossDomain: boolean
  filters: PrismaJson.IPrismaProjectFilters
  deleteAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ProjectCountAggregateOutputType | null
  _avg: ProjectAvgAggregateOutputType | null
  _sum: ProjectSumAggregateOutputType | null
  _min: ProjectMinAggregateOutputType | null
  _max: ProjectMaxAggregateOutputType | null
}

type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectGroupByOutputType[P]>
      }
    >
  >



export type ProjectWhereInput = {
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  name?: Prisma.StringFilter<"Project"> | string
  organizationId?: Prisma.StringFilter<"Project"> | string
  eventsCount?: Prisma.IntFilter<"Project"> | number
  types?: Prisma.EnumProjectTypeNullableListFilter<"Project">
  domain?: Prisma.StringNullableFilter<"Project"> | string | null
  cors?: Prisma.StringNullableListFilter<"Project">
  crossDomain?: Prisma.BoolFilter<"Project"> | boolean
  filters?: Prisma.JsonFilter<"Project">
  deleteAt?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  clients?: Prisma.ClientListRelationFilter
  reports?: Prisma.ReportListRelationFilter
  dashboards?: Prisma.DashboardListRelationFilter
  share?: Prisma.XOR<Prisma.ShareOverviewNullableScalarRelationFilter, Prisma.ShareOverviewWhereInput> | null
  meta?: Prisma.EventMetaListRelationFilter
  references?: Prisma.ReferenceListRelationFilter
  access?: Prisma.ProjectAccessListRelationFilter
  notificationRules?: Prisma.NotificationRuleListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
  Chat?: Prisma.ChatListRelationFilter
}

export type ProjectOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  eventsCount?: Prisma.SortOrder
  types?: Prisma.SortOrder
  domain?: Prisma.SortOrderInput | Prisma.SortOrder
  cors?: Prisma.SortOrder
  crossDomain?: Prisma.SortOrder
  filters?: Prisma.SortOrder
  deleteAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  organization?: Prisma.OrganizationOrderByWithRelationInput
  clients?: Prisma.ClientOrderByRelationAggregateInput
  reports?: Prisma.ReportOrderByRelationAggregateInput
  dashboards?: Prisma.DashboardOrderByRelationAggregateInput
  share?: Prisma.ShareOverviewOrderByWithRelationInput
  meta?: Prisma.EventMetaOrderByRelationAggregateInput
  references?: Prisma.ReferenceOrderByRelationAggregateInput
  access?: Prisma.ProjectAccessOrderByRelationAggregateInput
  notificationRules?: Prisma.NotificationRuleOrderByRelationAggregateInput
  notifications?: Prisma.NotificationOrderByRelationAggregateInput
  Chat?: Prisma.ChatOrderByRelationAggregateInput
}

export type ProjectWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  OR?: Prisma.ProjectWhereInput[]
  NOT?: Prisma.ProjectWhereInput | Prisma.ProjectWhereInput[]
  name?: Prisma.StringFilter<"Project"> | string
  organizationId?: Prisma.StringFilter<"Project"> | string
  eventsCount?: Prisma.IntFilter<"Project"> | number
  types?: Prisma.EnumProjectTypeNullableListFilter<"Project">
  domain?: Prisma.StringNullableFilter<"Project"> | string | null
  cors?: Prisma.StringNullableListFilter<"Project">
  crossDomain?: Prisma.BoolFilter<"Project"> | boolean
  filters?: Prisma.JsonFilter<"Project">
  deleteAt?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  clients?: Prisma.ClientListRelationFilter
  reports?: Prisma.ReportListRelationFilter
  dashboards?: Prisma.DashboardListRelationFilter
  share?: Prisma.XOR<Prisma.ShareOverviewNullableScalarRelationFilter, Prisma.ShareOverviewWhereInput> | null
  meta?: Prisma.EventMetaListRelationFilter
  references?: Prisma.ReferenceListRelationFilter
  access?: Prisma.ProjectAccessListRelationFilter
  notificationRules?: Prisma.NotificationRuleListRelationFilter
  notifications?: Prisma.NotificationListRelationFilter
  Chat?: Prisma.ChatListRelationFilter
}, "id">

export type ProjectOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  eventsCount?: Prisma.SortOrder
  types?: Prisma.SortOrder
  domain?: Prisma.SortOrderInput | Prisma.SortOrder
  cors?: Prisma.SortOrder
  crossDomain?: Prisma.SortOrder
  filters?: Prisma.SortOrder
  deleteAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectCountOrderByAggregateInput
  _avg?: Prisma.ProjectAvgOrderByAggregateInput
  _max?: Prisma.ProjectMaxOrderByAggregateInput
  _min?: Prisma.ProjectMinOrderByAggregateInput
  _sum?: Prisma.ProjectSumOrderByAggregateInput
}

export type ProjectScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectScalarWhereWithAggregatesInput | Prisma.ProjectScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Project"> | string
  name?: Prisma.StringWithAggregatesFilter<"Project"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Project"> | string
  eventsCount?: Prisma.IntWithAggregatesFilter<"Project"> | number
  types?: Prisma.EnumProjectTypeNullableListFilter<"Project">
  domain?: Prisma.StringNullableWithAggregatesFilter<"Project"> | string | null
  cors?: Prisma.StringNullableListFilter<"Project">
  crossDomain?: Prisma.BoolWithAggregatesFilter<"Project"> | boolean
  filters?: Prisma.JsonWithAggregatesFilter<"Project">
  deleteAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Project"> | Date | string
}

export type ProjectCreateInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateManyInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectScalarRelationFilter = {
  is?: Prisma.ProjectWhereInput
  isNot?: Prisma.ProjectWhereInput
}

export type ProjectListRelationFilter = {
  every?: Prisma.ProjectWhereInput
  some?: Prisma.ProjectWhereInput
  none?: Prisma.ProjectWhereInput
}

export type ProjectOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EnumProjectTypeNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.ProjectType[] | Prisma.ListEnumProjectTypeFieldRefInput<$PrismaModel> | null
  has?: $Enums.ProjectType | Prisma.EnumProjectTypeFieldRefInput<$PrismaModel> | null
  hasEvery?: $Enums.ProjectType[] | Prisma.ListEnumProjectTypeFieldRefInput<$PrismaModel>
  hasSome?: $Enums.ProjectType[] | Prisma.ListEnumProjectTypeFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type ProjectCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  eventsCount?: Prisma.SortOrder
  types?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  cors?: Prisma.SortOrder
  crossDomain?: Prisma.SortOrder
  filters?: Prisma.SortOrder
  deleteAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectAvgOrderByAggregateInput = {
  eventsCount?: Prisma.SortOrder
}

export type ProjectMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  eventsCount?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  crossDomain?: Prisma.SortOrder
  deleteAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  eventsCount?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  crossDomain?: Prisma.SortOrder
  deleteAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectSumOrderByAggregateInput = {
  eventsCount?: Prisma.SortOrder
}

export type ProjectNullableScalarRelationFilter = {
  is?: Prisma.ProjectWhereInput | null
  isNot?: Prisma.ProjectWhereInput | null
}

export type ProjectCreateNestedOneWithoutChatInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutChatInput, Prisma.ProjectUncheckedCreateWithoutChatInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutChatInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutChatNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutChatInput, Prisma.ProjectUncheckedCreateWithoutChatInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutChatInput
  upsert?: Prisma.ProjectUpsertWithoutChatInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutChatInput, Prisma.ProjectUpdateWithoutChatInput>, Prisma.ProjectUncheckedUpdateWithoutChatInput>
}

export type ProjectCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectCreateWithoutOrganizationInput[] | Prisma.ProjectUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutOrganizationInput | Prisma.ProjectCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ProjectCreateManyOrganizationInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectCreateWithoutOrganizationInput[] | Prisma.ProjectUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutOrganizationInput | Prisma.ProjectCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ProjectCreateManyOrganizationInputEnvelope
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
}

export type ProjectUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectCreateWithoutOrganizationInput[] | Prisma.ProjectUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutOrganizationInput | Prisma.ProjectCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ProjectCreateManyOrganizationInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput | Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectCreateWithoutOrganizationInput[] | Prisma.ProjectUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutOrganizationInput | Prisma.ProjectCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ProjectCreateManyOrganizationInputEnvelope
  set?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  disconnect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  delete?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  connect?: Prisma.ProjectWhereUniqueInput | Prisma.ProjectWhereUniqueInput[]
  update?: Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput | Prisma.ProjectUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
}

export type ProjectCreatetypesInput = {
  set: $Enums.ProjectType[]
}

export type ProjectCreatecorsInput = {
  set: string[]
}

export type ProjectUpdatetypesInput = {
  set?: $Enums.ProjectType[]
  push?: $Enums.ProjectType | $Enums.ProjectType[]
}

export type ProjectUpdatecorsInput = {
  set?: string[]
  push?: string | string[]
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type ProjectCreateNestedOneWithoutAccessInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutAccessInput, Prisma.ProjectUncheckedCreateWithoutAccessInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutAccessInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutAccessNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutAccessInput, Prisma.ProjectUncheckedCreateWithoutAccessInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutAccessInput
  upsert?: Prisma.ProjectUpsertWithoutAccessInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutAccessInput, Prisma.ProjectUpdateWithoutAccessInput>, Prisma.ProjectUncheckedUpdateWithoutAccessInput>
}

export type ProjectCreateNestedOneWithoutClientsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutClientsInput, Prisma.ProjectUncheckedCreateWithoutClientsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutClientsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneWithoutClientsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutClientsInput, Prisma.ProjectUncheckedCreateWithoutClientsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutClientsInput
  upsert?: Prisma.ProjectUpsertWithoutClientsInput
  disconnect?: Prisma.ProjectWhereInput | boolean
  delete?: Prisma.ProjectWhereInput | boolean
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutClientsInput, Prisma.ProjectUpdateWithoutClientsInput>, Prisma.ProjectUncheckedUpdateWithoutClientsInput>
}

export type ProjectCreateNestedOneWithoutDashboardsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutDashboardsInput, Prisma.ProjectUncheckedCreateWithoutDashboardsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutDashboardsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutDashboardsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutDashboardsInput, Prisma.ProjectUncheckedCreateWithoutDashboardsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutDashboardsInput
  upsert?: Prisma.ProjectUpsertWithoutDashboardsInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutDashboardsInput, Prisma.ProjectUpdateWithoutDashboardsInput>, Prisma.ProjectUncheckedUpdateWithoutDashboardsInput>
}

export type ProjectCreateNestedOneWithoutReportsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutReportsInput, Prisma.ProjectUncheckedCreateWithoutReportsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutReportsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutReportsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutReportsInput, Prisma.ProjectUncheckedCreateWithoutReportsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutReportsInput
  upsert?: Prisma.ProjectUpsertWithoutReportsInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutReportsInput, Prisma.ProjectUpdateWithoutReportsInput>, Prisma.ProjectUncheckedUpdateWithoutReportsInput>
}

export type ProjectCreateNestedOneWithoutShareInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutShareInput, Prisma.ProjectUncheckedCreateWithoutShareInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutShareInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutShareNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutShareInput, Prisma.ProjectUncheckedCreateWithoutShareInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutShareInput
  upsert?: Prisma.ProjectUpsertWithoutShareInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutShareInput, Prisma.ProjectUpdateWithoutShareInput>, Prisma.ProjectUncheckedUpdateWithoutShareInput>
}

export type ProjectCreateNestedOneWithoutMetaInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMetaInput, Prisma.ProjectUncheckedCreateWithoutMetaInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMetaInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutMetaNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutMetaInput, Prisma.ProjectUncheckedCreateWithoutMetaInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutMetaInput
  upsert?: Prisma.ProjectUpsertWithoutMetaInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutMetaInput, Prisma.ProjectUpdateWithoutMetaInput>, Prisma.ProjectUncheckedUpdateWithoutMetaInput>
}

export type ProjectCreateNestedOneWithoutReferencesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutReferencesInput, Prisma.ProjectUncheckedCreateWithoutReferencesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutReferencesInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutReferencesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutReferencesInput, Prisma.ProjectUncheckedCreateWithoutReferencesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutReferencesInput
  upsert?: Prisma.ProjectUpsertWithoutReferencesInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutReferencesInput, Prisma.ProjectUpdateWithoutReferencesInput>, Prisma.ProjectUncheckedUpdateWithoutReferencesInput>
}

export type ProjectCreateNestedOneWithoutNotificationRulesInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationRulesInput, Prisma.ProjectUncheckedCreateWithoutNotificationRulesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutNotificationRulesInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutNotificationRulesNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationRulesInput, Prisma.ProjectUncheckedCreateWithoutNotificationRulesInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutNotificationRulesInput
  upsert?: Prisma.ProjectUpsertWithoutNotificationRulesInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutNotificationRulesInput, Prisma.ProjectUpdateWithoutNotificationRulesInput>, Prisma.ProjectUncheckedUpdateWithoutNotificationRulesInput>
}

export type ProjectCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationsInput, Prisma.ProjectUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutNotificationsInput
  connect?: Prisma.ProjectWhereUniqueInput
}

export type ProjectUpdateOneRequiredWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationsInput, Prisma.ProjectUncheckedCreateWithoutNotificationsInput>
  connectOrCreate?: Prisma.ProjectCreateOrConnectWithoutNotificationsInput
  upsert?: Prisma.ProjectUpsertWithoutNotificationsInput
  connect?: Prisma.ProjectWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProjectUpdateToOneWithWhereWithoutNotificationsInput, Prisma.ProjectUpdateWithoutNotificationsInput>, Prisma.ProjectUncheckedUpdateWithoutNotificationsInput>
}

export type ProjectCreateWithoutChatInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutChatInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutChatInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutChatInput, Prisma.ProjectUncheckedCreateWithoutChatInput>
}

export type ProjectUpsertWithoutChatInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutChatInput, Prisma.ProjectUncheckedUpdateWithoutChatInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutChatInput, Prisma.ProjectUncheckedCreateWithoutChatInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutChatInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutChatInput, Prisma.ProjectUncheckedUpdateWithoutChatInput>
}

export type ProjectUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutChatInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutOrganizationInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutOrganizationInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput>
}

export type ProjectCreateManyOrganizationInputEnvelope = {
  data: Prisma.ProjectCreateManyOrganizationInput | Prisma.ProjectCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ProjectUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProjectWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutOrganizationInput, Prisma.ProjectUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutOrganizationInput, Prisma.ProjectUncheckedCreateWithoutOrganizationInput>
}

export type ProjectUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProjectWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutOrganizationInput, Prisma.ProjectUncheckedUpdateWithoutOrganizationInput>
}

export type ProjectUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ProjectScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyWithoutOrganizationInput>
}

export type ProjectScalarWhereInput = {
  AND?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  OR?: Prisma.ProjectScalarWhereInput[]
  NOT?: Prisma.ProjectScalarWhereInput | Prisma.ProjectScalarWhereInput[]
  id?: Prisma.StringFilter<"Project"> | string
  name?: Prisma.StringFilter<"Project"> | string
  organizationId?: Prisma.StringFilter<"Project"> | string
  eventsCount?: Prisma.IntFilter<"Project"> | number
  types?: Prisma.EnumProjectTypeNullableListFilter<"Project">
  domain?: Prisma.StringNullableFilter<"Project"> | string | null
  cors?: Prisma.StringNullableListFilter<"Project">
  crossDomain?: Prisma.BoolFilter<"Project"> | boolean
  filters?: Prisma.JsonFilter<"Project">
  deleteAt?: Prisma.DateTimeNullableFilter<"Project"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Project"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Project"> | Date | string
}

export type ProjectCreateWithoutAccessInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutAccessInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutAccessInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutAccessInput, Prisma.ProjectUncheckedCreateWithoutAccessInput>
}

export type ProjectUpsertWithoutAccessInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutAccessInput, Prisma.ProjectUncheckedUpdateWithoutAccessInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutAccessInput, Prisma.ProjectUncheckedCreateWithoutAccessInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutAccessInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutAccessInput, Prisma.ProjectUncheckedUpdateWithoutAccessInput>
}

export type ProjectUpdateWithoutAccessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutAccessInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutClientsInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutClientsInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutClientsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutClientsInput, Prisma.ProjectUncheckedCreateWithoutClientsInput>
}

export type ProjectUpsertWithoutClientsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutClientsInput, Prisma.ProjectUncheckedUpdateWithoutClientsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutClientsInput, Prisma.ProjectUncheckedCreateWithoutClientsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutClientsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutClientsInput, Prisma.ProjectUncheckedUpdateWithoutClientsInput>
}

export type ProjectUpdateWithoutClientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutClientsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutDashboardsInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutDashboardsInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutDashboardsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutDashboardsInput, Prisma.ProjectUncheckedCreateWithoutDashboardsInput>
}

export type ProjectUpsertWithoutDashboardsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutDashboardsInput, Prisma.ProjectUncheckedUpdateWithoutDashboardsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutDashboardsInput, Prisma.ProjectUncheckedCreateWithoutDashboardsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutDashboardsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutDashboardsInput, Prisma.ProjectUncheckedUpdateWithoutDashboardsInput>
}

export type ProjectUpdateWithoutDashboardsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutDashboardsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutReportsInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutReportsInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutReportsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutReportsInput, Prisma.ProjectUncheckedCreateWithoutReportsInput>
}

export type ProjectUpsertWithoutReportsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutReportsInput, Prisma.ProjectUncheckedUpdateWithoutReportsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutReportsInput, Prisma.ProjectUncheckedCreateWithoutReportsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutReportsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutReportsInput, Prisma.ProjectUncheckedUpdateWithoutReportsInput>
}

export type ProjectUpdateWithoutReportsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutReportsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutShareInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutShareInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutShareInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutShareInput, Prisma.ProjectUncheckedCreateWithoutShareInput>
}

export type ProjectUpsertWithoutShareInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutShareInput, Prisma.ProjectUncheckedUpdateWithoutShareInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutShareInput, Prisma.ProjectUncheckedCreateWithoutShareInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutShareInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutShareInput, Prisma.ProjectUncheckedUpdateWithoutShareInput>
}

export type ProjectUpdateWithoutShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutShareInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutMetaInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutMetaInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutMetaInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutMetaInput, Prisma.ProjectUncheckedCreateWithoutMetaInput>
}

export type ProjectUpsertWithoutMetaInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutMetaInput, Prisma.ProjectUncheckedUpdateWithoutMetaInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutMetaInput, Prisma.ProjectUncheckedCreateWithoutMetaInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutMetaInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutMetaInput, Prisma.ProjectUncheckedUpdateWithoutMetaInput>
}

export type ProjectUpdateWithoutMetaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutMetaInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutReferencesInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutReferencesInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutReferencesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutReferencesInput, Prisma.ProjectUncheckedCreateWithoutReferencesInput>
}

export type ProjectUpsertWithoutReferencesInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutReferencesInput, Prisma.ProjectUncheckedUpdateWithoutReferencesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutReferencesInput, Prisma.ProjectUncheckedCreateWithoutReferencesInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutReferencesInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutReferencesInput, Prisma.ProjectUncheckedUpdateWithoutReferencesInput>
}

export type ProjectUpdateWithoutReferencesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutReferencesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutNotificationRulesInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutNotificationRulesInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutNotificationRulesInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationRulesInput, Prisma.ProjectUncheckedCreateWithoutNotificationRulesInput>
}

export type ProjectUpsertWithoutNotificationRulesInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutNotificationRulesInput, Prisma.ProjectUncheckedUpdateWithoutNotificationRulesInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationRulesInput, Prisma.ProjectUncheckedCreateWithoutNotificationRulesInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutNotificationRulesInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutNotificationRulesInput, Prisma.ProjectUncheckedUpdateWithoutNotificationRulesInput>
}

export type ProjectUpdateWithoutNotificationRulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutNotificationRulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateWithoutNotificationsInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectsInput
  clients?: Prisma.ClientCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatCreateNestedManyWithoutProjectInput
}

export type ProjectUncheckedCreateWithoutNotificationsInput = {
  id?: string
  name: string
  organizationId: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  clients?: Prisma.ClientUncheckedCreateNestedManyWithoutProjectInput
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutProjectInput
  dashboards?: Prisma.DashboardUncheckedCreateNestedManyWithoutProjectInput
  share?: Prisma.ShareOverviewUncheckedCreateNestedOneWithoutProjectInput
  meta?: Prisma.EventMetaUncheckedCreateNestedManyWithoutProjectInput
  references?: Prisma.ReferenceUncheckedCreateNestedManyWithoutProjectInput
  access?: Prisma.ProjectAccessUncheckedCreateNestedManyWithoutProjectInput
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutProjectInput
  Chat?: Prisma.ChatUncheckedCreateNestedManyWithoutProjectInput
}

export type ProjectCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.ProjectWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationsInput, Prisma.ProjectUncheckedCreateWithoutNotificationsInput>
}

export type ProjectUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<Prisma.ProjectUpdateWithoutNotificationsInput, Prisma.ProjectUncheckedUpdateWithoutNotificationsInput>
  create: Prisma.XOR<Prisma.ProjectCreateWithoutNotificationsInput, Prisma.ProjectUncheckedCreateWithoutNotificationsInput>
  where?: Prisma.ProjectWhereInput
}

export type ProjectUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.ProjectWhereInput
  data: Prisma.XOR<Prisma.ProjectUpdateWithoutNotificationsInput, Prisma.ProjectUncheckedUpdateWithoutNotificationsInput>
}

export type ProjectUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectsNestedInput
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectCreateManyOrganizationInput = {
  id?: string
  name: string
  eventsCount?: number
  types?: Prisma.ProjectCreatetypesInput | $Enums.ProjectType[]
  domain?: string | null
  cors?: Prisma.ProjectCreatecorsInput | string[]
  crossDomain?: boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  clients?: Prisma.ClientUncheckedUpdateManyWithoutProjectNestedInput
  reports?: Prisma.ReportUncheckedUpdateManyWithoutProjectNestedInput
  dashboards?: Prisma.DashboardUncheckedUpdateManyWithoutProjectNestedInput
  share?: Prisma.ShareOverviewUncheckedUpdateOneWithoutProjectNestedInput
  meta?: Prisma.EventMetaUncheckedUpdateManyWithoutProjectNestedInput
  references?: Prisma.ReferenceUncheckedUpdateManyWithoutProjectNestedInput
  access?: Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutProjectNestedInput
  Chat?: Prisma.ChatUncheckedUpdateManyWithoutProjectNestedInput
}

export type ProjectUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  eventsCount?: Prisma.IntFieldUpdateOperationsInput | number
  types?: Prisma.ProjectUpdatetypesInput | $Enums.ProjectType[]
  domain?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  cors?: Prisma.ProjectUpdatecorsInput | string[]
  crossDomain?: Prisma.BoolFieldUpdateOperationsInput | boolean
  filters?: PrismaJson.IPrismaProjectFilters
  deleteAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProjectCountOutputType
 */

export type ProjectCountOutputType = {
  clients: number
  reports: number
  dashboards: number
  meta: number
  references: number
  access: number
  notificationRules: number
  notifications: number
  Chat: number
}

export type ProjectCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  clients?: boolean | ProjectCountOutputTypeCountClientsArgs
  reports?: boolean | ProjectCountOutputTypeCountReportsArgs
  dashboards?: boolean | ProjectCountOutputTypeCountDashboardsArgs
  meta?: boolean | ProjectCountOutputTypeCountMetaArgs
  references?: boolean | ProjectCountOutputTypeCountReferencesArgs
  access?: boolean | ProjectCountOutputTypeCountAccessArgs
  notificationRules?: boolean | ProjectCountOutputTypeCountNotificationRulesArgs
  notifications?: boolean | ProjectCountOutputTypeCountNotificationsArgs
  Chat?: boolean | ProjectCountOutputTypeCountChatArgs
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectCountOutputType
   */
  select?: Prisma.ProjectCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountClientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ClientWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountReportsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReportWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountDashboardsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DashboardWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountMetaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventMetaWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountReferencesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReferenceWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountAccessArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectAccessWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountNotificationRulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationRuleWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountNotificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotificationWhereInput
}

/**
 * ProjectCountOutputType without action
 */
export type ProjectCountOutputTypeCountChatArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatWhereInput
}


export type ProjectSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  organizationId?: boolean
  eventsCount?: boolean
  types?: boolean
  domain?: boolean
  cors?: boolean
  crossDomain?: boolean
  filters?: boolean
  deleteAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  clients?: boolean | Prisma.Project$clientsArgs<ExtArgs>
  reports?: boolean | Prisma.Project$reportsArgs<ExtArgs>
  dashboards?: boolean | Prisma.Project$dashboardsArgs<ExtArgs>
  share?: boolean | Prisma.Project$shareArgs<ExtArgs>
  meta?: boolean | Prisma.Project$metaArgs<ExtArgs>
  references?: boolean | Prisma.Project$referencesArgs<ExtArgs>
  access?: boolean | Prisma.Project$accessArgs<ExtArgs>
  notificationRules?: boolean | Prisma.Project$notificationRulesArgs<ExtArgs>
  notifications?: boolean | Prisma.Project$notificationsArgs<ExtArgs>
  Chat?: boolean | Prisma.Project$ChatArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  organizationId?: boolean
  eventsCount?: boolean
  types?: boolean
  domain?: boolean
  cors?: boolean
  crossDomain?: boolean
  filters?: boolean
  deleteAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  organizationId?: boolean
  eventsCount?: boolean
  types?: boolean
  domain?: boolean
  cors?: boolean
  crossDomain?: boolean
  filters?: boolean
  deleteAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["project"]>

export type ProjectSelectScalar = {
  id?: boolean
  name?: boolean
  organizationId?: boolean
  eventsCount?: boolean
  types?: boolean
  domain?: boolean
  cors?: boolean
  crossDomain?: boolean
  filters?: boolean
  deleteAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "organizationId" | "eventsCount" | "types" | "domain" | "cors" | "crossDomain" | "filters" | "deleteAt" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
export type ProjectInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  clients?: boolean | Prisma.Project$clientsArgs<ExtArgs>
  reports?: boolean | Prisma.Project$reportsArgs<ExtArgs>
  dashboards?: boolean | Prisma.Project$dashboardsArgs<ExtArgs>
  share?: boolean | Prisma.Project$shareArgs<ExtArgs>
  meta?: boolean | Prisma.Project$metaArgs<ExtArgs>
  references?: boolean | Prisma.Project$referencesArgs<ExtArgs>
  access?: boolean | Prisma.Project$accessArgs<ExtArgs>
  notificationRules?: boolean | Prisma.Project$notificationRulesArgs<ExtArgs>
  notifications?: boolean | Prisma.Project$notificationsArgs<ExtArgs>
  Chat?: boolean | Prisma.Project$ChatArgs<ExtArgs>
  _count?: boolean | Prisma.ProjectCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProjectIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}
export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
}

export type $ProjectPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Project"
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>
    clients: Prisma.$ClientPayload<ExtArgs>[]
    reports: Prisma.$ReportPayload<ExtArgs>[]
    dashboards: Prisma.$DashboardPayload<ExtArgs>[]
    share: Prisma.$ShareOverviewPayload<ExtArgs> | null
    meta: Prisma.$EventMetaPayload<ExtArgs>[]
    references: Prisma.$ReferencePayload<ExtArgs>[]
    access: Prisma.$ProjectAccessPayload<ExtArgs>[]
    notificationRules: Prisma.$NotificationRulePayload<ExtArgs>[]
    notifications: Prisma.$NotificationPayload<ExtArgs>[]
    Chat: Prisma.$ChatPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    organizationId: string
    eventsCount: number
    types: $Enums.ProjectType[]
    domain: string | null
    cors: string[]
    crossDomain: boolean
    /**
     * [IPrismaProjectFilters]
     */
    filters: PrismaJson.IPrismaProjectFilters
    deleteAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["project"]>
  composites: {}
}

export type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectPayload, S>

export type ProjectCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectCountAggregateInputType | true
  }

export interface ProjectDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
  /**
   * Find zero or one Project that matches the filter.
   * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Project that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Project that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Projects that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Projects
   * const projects = await prisma.project.findMany()
   * 
   * // Get first 10 Projects
   * const projects = await prisma.project.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Project.
   * @param {ProjectCreateArgs} args - Arguments to create a Project.
   * @example
   * // Create one Project
   * const Project = await prisma.project.create({
   *   data: {
   *     // ... data to create a Project
   *   }
   * })
   * 
   */
  create<T extends ProjectCreateArgs>(args: Prisma.SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Projects.
   * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
   * @example
   * // Create many Projects
   * const project = await prisma.project.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Projects and returns the data saved in the database.
   * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
   * @example
   * // Create many Projects
   * const project = await prisma.project.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Projects and only return the `id`
   * const projectWithIdOnly = await prisma.project.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Project.
   * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
   * @example
   * // Delete one Project
   * const Project = await prisma.project.delete({
   *   where: {
   *     // ... filter to delete one Project
   *   }
   * })
   * 
   */
  delete<T extends ProjectDeleteArgs>(args: Prisma.SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Project.
   * @param {ProjectUpdateArgs} args - Arguments to update one Project.
   * @example
   * // Update one Project
   * const project = await prisma.project.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectUpdateArgs>(args: Prisma.SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Projects.
   * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
   * @example
   * // Delete a few Projects
   * const { count } = await prisma.project.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Projects and returns the data updated in the database.
   * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Projects and only return the `id`
   * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Project.
   * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
   * @example
   * // Update or create a Project
   * const project = await prisma.project.upsert({
   *   create: {
   *     // ... data to create a Project
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Project we want to update
   *   }
   * })
   */
  upsert<T extends ProjectUpsertArgs>(args: Prisma.SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Projects.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
   * @example
   * // Count the number of Projects
   * const count = await prisma.project.count({
   *   where: {
   *     // ... the filter for the Projects we want to count
   *   }
   * })
  **/
  count<T extends ProjectCountArgs>(
    args?: Prisma.Subset<T, ProjectCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectAggregateArgs>(args: Prisma.Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

  /**
   * Group by Project.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectGroupByArgs['orderBy'] }
      : { orderBy?: ProjectGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Project model
 */
readonly fields: ProjectFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  clients<T extends Prisma.Project$clientsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$clientsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  reports<T extends Prisma.Project$reportsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  dashboards<T extends Prisma.Project$dashboardsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$dashboardsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  share<T extends Prisma.Project$shareArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$shareArgs<ExtArgs>>): Prisma.Prisma__ShareOverviewClient<runtime.Types.Result.GetResult<Prisma.$ShareOverviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  meta<T extends Prisma.Project$metaArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$metaArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventMetaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  references<T extends Prisma.Project$referencesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  access<T extends Prisma.Project$accessArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$accessArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notificationRules<T extends Prisma.Project$notificationRulesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$notificationRulesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  notifications<T extends Prisma.Project$notificationsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Chat<T extends Prisma.Project$ChatArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Project$ChatArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Project model
 */
export interface ProjectFieldRefs {
  readonly id: Prisma.FieldRef<"Project", 'String'>
  readonly name: Prisma.FieldRef<"Project", 'String'>
  readonly organizationId: Prisma.FieldRef<"Project", 'String'>
  readonly eventsCount: Prisma.FieldRef<"Project", 'Int'>
  readonly types: Prisma.FieldRef<"Project", 'ProjectType[]'>
  readonly domain: Prisma.FieldRef<"Project", 'String'>
  readonly cors: Prisma.FieldRef<"Project", 'String[]'>
  readonly crossDomain: Prisma.FieldRef<"Project", 'Boolean'>
  readonly filters: Prisma.FieldRef<"Project", 'Json'>
  readonly deleteAt: Prisma.FieldRef<"Project", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Project", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Project", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Project findUnique
 */
export type ProjectFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findUniqueOrThrow
 */
export type ProjectFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project findFirst
 */
export type ProjectFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findFirstOrThrow
 */
export type ProjectFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Project to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Projects.
   */
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project findMany
 */
export type ProjectFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter, which Projects to fetch.
   */
  where?: Prisma.ProjectWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Projects to fetch.
   */
  orderBy?: Prisma.ProjectOrderByWithRelationInput | Prisma.ProjectOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Projects.
   */
  cursor?: Prisma.ProjectWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Projects from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Projects.
   */
  skip?: number
  distinct?: Prisma.ProjectScalarFieldEnum | Prisma.ProjectScalarFieldEnum[]
}

/**
 * Project create
 */
export type ProjectCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to create a Project.
   */
  data: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
}

/**
 * Project createMany
 */
export type ProjectCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Projects.
   */
  data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Project createManyAndReturn
 */
export type ProjectCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * The data used to create many Projects.
   */
  data: Prisma.ProjectCreateManyInput | Prisma.ProjectCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Project update
 */
export type ProjectUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The data needed to update a Project.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
  /**
   * Choose, which Project to update.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Projects.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyInput>
  /**
   * Filter which Projects to update
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to update.
   */
  limit?: number
}

/**
 * Project updateManyAndReturn
 */
export type ProjectUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * The data used to update Projects.
   */
  data: Prisma.XOR<Prisma.ProjectUpdateManyMutationInput, Prisma.ProjectUncheckedUpdateManyInput>
  /**
   * Filter which Projects to update
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Project upsert
 */
export type ProjectUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * The filter to search for the Project to update in case it exists.
   */
  where: Prisma.ProjectWhereUniqueInput
  /**
   * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
   */
  create: Prisma.XOR<Prisma.ProjectCreateInput, Prisma.ProjectUncheckedCreateInput>
  /**
   * In case the Project was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectUpdateInput, Prisma.ProjectUncheckedUpdateInput>
}

/**
 * Project delete
 */
export type ProjectDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  /**
   * Filter which Project to delete.
   */
  where: Prisma.ProjectWhereUniqueInput
}

/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Projects to delete
   */
  where?: Prisma.ProjectWhereInput
  /**
   * Limit how many Projects to delete.
   */
  limit?: number
}

/**
 * Project.clients
 */
export type Project$clientsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Client
   */
  select?: Prisma.ClientSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Client
   */
  omit?: Prisma.ClientOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ClientInclude<ExtArgs> | null
  where?: Prisma.ClientWhereInput
  orderBy?: Prisma.ClientOrderByWithRelationInput | Prisma.ClientOrderByWithRelationInput[]
  cursor?: Prisma.ClientWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ClientScalarFieldEnum | Prisma.ClientScalarFieldEnum[]
}

/**
 * Project.reports
 */
export type Project$reportsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  where?: Prisma.ReportWhereInput
  orderBy?: Prisma.ReportOrderByWithRelationInput | Prisma.ReportOrderByWithRelationInput[]
  cursor?: Prisma.ReportWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Project.dashboards
 */
export type Project$dashboardsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null
  where?: Prisma.DashboardWhereInput
  orderBy?: Prisma.DashboardOrderByWithRelationInput | Prisma.DashboardOrderByWithRelationInput[]
  cursor?: Prisma.DashboardWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DashboardScalarFieldEnum | Prisma.DashboardScalarFieldEnum[]
}

/**
 * Project.share
 */
export type Project$shareArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShareOverview
   */
  select?: Prisma.ShareOverviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ShareOverview
   */
  omit?: Prisma.ShareOverviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShareOverviewInclude<ExtArgs> | null
  where?: Prisma.ShareOverviewWhereInput
}

/**
 * Project.meta
 */
export type Project$metaArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EventMeta
   */
  select?: Prisma.EventMetaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EventMeta
   */
  omit?: Prisma.EventMetaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventMetaInclude<ExtArgs> | null
  where?: Prisma.EventMetaWhereInput
  orderBy?: Prisma.EventMetaOrderByWithRelationInput | Prisma.EventMetaOrderByWithRelationInput[]
  cursor?: Prisma.EventMetaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EventMetaScalarFieldEnum | Prisma.EventMetaScalarFieldEnum[]
}

/**
 * Project.references
 */
export type Project$referencesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  where?: Prisma.ReferenceWhereInput
  orderBy?: Prisma.ReferenceOrderByWithRelationInput | Prisma.ReferenceOrderByWithRelationInput[]
  cursor?: Prisma.ReferenceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReferenceScalarFieldEnum | Prisma.ReferenceScalarFieldEnum[]
}

/**
 * Project.access
 */
export type Project$accessArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  where?: Prisma.ProjectAccessWhereInput
  orderBy?: Prisma.ProjectAccessOrderByWithRelationInput | Prisma.ProjectAccessOrderByWithRelationInput[]
  cursor?: Prisma.ProjectAccessWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ProjectAccessScalarFieldEnum | Prisma.ProjectAccessScalarFieldEnum[]
}

/**
 * Project.notificationRules
 */
export type Project$notificationRulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null
  where?: Prisma.NotificationRuleWhereInput
  orderBy?: Prisma.NotificationRuleOrderByWithRelationInput | Prisma.NotificationRuleOrderByWithRelationInput[]
  cursor?: Prisma.NotificationRuleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationRuleScalarFieldEnum | Prisma.NotificationRuleScalarFieldEnum[]
}

/**
 * Project.notifications
 */
export type Project$notificationsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null
  where?: Prisma.NotificationWhereInput
  orderBy?: Prisma.NotificationOrderByWithRelationInput | Prisma.NotificationOrderByWithRelationInput[]
  cursor?: Prisma.NotificationWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotificationScalarFieldEnum | Prisma.NotificationScalarFieldEnum[]
}

/**
 * Project.Chat
 */
export type Project$ChatArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null
  where?: Prisma.ChatWhereInput
  orderBy?: Prisma.ChatOrderByWithRelationInput | Prisma.ChatOrderByWithRelationInput[]
  cursor?: Prisma.ChatWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[]
}

/**
 * Project without action
 */
export type ProjectDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
}
