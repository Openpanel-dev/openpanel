/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Dashboard` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model Dashboard
 *
 */
export type DashboardModel =
  runtime.Types.Result.DefaultSelection<Prisma.$DashboardPayload>;

export type AggregateDashboard = {
  _count: DashboardCountAggregateOutputType | null;
  _min: DashboardMinAggregateOutputType | null;
  _max: DashboardMaxAggregateOutputType | null;
};

export type DashboardMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  organizationId: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type DashboardMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  organizationId: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type DashboardCountAggregateOutputType = {
  id: number;
  name: number;
  organizationId: number;
  projectId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type DashboardMinAggregateInputType = {
  id?: true;
  name?: true;
  organizationId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type DashboardMaxAggregateInputType = {
  id?: true;
  name?: true;
  organizationId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type DashboardCountAggregateInputType = {
  id?: true;
  name?: true;
  organizationId?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type DashboardAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Dashboard to aggregate.
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dashboards to fetch.
   */
  orderBy?:
    | Prisma.DashboardOrderByWithRelationInput
    | Prisma.DashboardOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.DashboardWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Dashboards from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dashboards.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Dashboards
   **/
  _count?: true | DashboardCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: DashboardMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: DashboardMaxAggregateInputType;
};

export type GetDashboardAggregateType<T extends DashboardAggregateArgs> = {
  [P in keyof T & keyof AggregateDashboard]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDashboard[P]>
    : Prisma.GetScalarType<T[P], AggregateDashboard[P]>;
};

export type DashboardGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.DashboardWhereInput;
  orderBy?:
    | Prisma.DashboardOrderByWithAggregationInput
    | Prisma.DashboardOrderByWithAggregationInput[];
  by: Prisma.DashboardScalarFieldEnum[] | Prisma.DashboardScalarFieldEnum;
  having?: Prisma.DashboardScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: DashboardCountAggregateInputType | true;
  _min?: DashboardMinAggregateInputType;
  _max?: DashboardMaxAggregateInputType;
};

export type DashboardGroupByOutputType = {
  id: string;
  name: string;
  organizationId: string;
  projectId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: DashboardCountAggregateOutputType | null;
  _min: DashboardMinAggregateOutputType | null;
  _max: DashboardMaxAggregateOutputType | null;
};

type GetDashboardGroupByPayload<T extends DashboardGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<DashboardGroupByOutputType, T['by']> & {
        [P in keyof T & keyof DashboardGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DashboardGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DashboardGroupByOutputType[P]>;
      }
    >
  >;

export type DashboardWhereInput = {
  AND?: Prisma.DashboardWhereInput | Prisma.DashboardWhereInput[];
  OR?: Prisma.DashboardWhereInput[];
  NOT?: Prisma.DashboardWhereInput | Prisma.DashboardWhereInput[];
  id?: Prisma.StringFilter<'Dashboard'> | string;
  name?: Prisma.StringFilter<'Dashboard'> | string;
  organizationId?: Prisma.StringFilter<'Dashboard'> | string;
  projectId?: Prisma.StringFilter<'Dashboard'> | string;
  createdAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
  reports?: Prisma.ReportListRelationFilter;
};

export type DashboardOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  organization?: Prisma.OrganizationOrderByWithRelationInput;
  project?: Prisma.ProjectOrderByWithRelationInput;
  reports?: Prisma.ReportOrderByRelationAggregateInput;
};

export type DashboardWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.DashboardWhereInput | Prisma.DashboardWhereInput[];
    OR?: Prisma.DashboardWhereInput[];
    NOT?: Prisma.DashboardWhereInput | Prisma.DashboardWhereInput[];
    name?: Prisma.StringFilter<'Dashboard'> | string;
    organizationId?: Prisma.StringFilter<'Dashboard'> | string;
    projectId?: Prisma.StringFilter<'Dashboard'> | string;
    createdAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
    reports?: Prisma.ReportListRelationFilter;
  },
  'id'
>;

export type DashboardOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.DashboardCountOrderByAggregateInput;
  _max?: Prisma.DashboardMaxOrderByAggregateInput;
  _min?: Prisma.DashboardMinOrderByAggregateInput;
};

export type DashboardScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.DashboardScalarWhereWithAggregatesInput
    | Prisma.DashboardScalarWhereWithAggregatesInput[];
  OR?: Prisma.DashboardScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.DashboardScalarWhereWithAggregatesInput
    | Prisma.DashboardScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<'Dashboard'> | string;
  name?: Prisma.StringWithAggregatesFilter<'Dashboard'> | string;
  organizationId?: Prisma.StringWithAggregatesFilter<'Dashboard'> | string;
  projectId?: Prisma.StringWithAggregatesFilter<'Dashboard'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Dashboard'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Dashboard'> | Date | string;
};

export type DashboardCreateInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutDashboardInput;
  project: Prisma.ProjectCreateNestedOneWithoutDashboardsInput;
  reports?: Prisma.ReportCreateNestedManyWithoutDashboardInput;
};

export type DashboardUncheckedCreateInput = {
  id?: string;
  name: string;
  organizationId: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutDashboardInput;
};

export type DashboardUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutDashboardNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutDashboardsNestedInput;
  reports?: Prisma.ReportUpdateManyWithoutDashboardNestedInput;
};

export type DashboardUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reports?: Prisma.ReportUncheckedUpdateManyWithoutDashboardNestedInput;
};

export type DashboardCreateManyInput = {
  id?: string;
  name: string;
  organizationId: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type DashboardUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DashboardUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DashboardListRelationFilter = {
  every?: Prisma.DashboardWhereInput;
  some?: Prisma.DashboardWhereInput;
  none?: Prisma.DashboardWhereInput;
};

export type DashboardOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type DashboardCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type DashboardMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type DashboardMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type DashboardScalarRelationFilter = {
  is?: Prisma.DashboardWhereInput;
  isNot?: Prisma.DashboardWhereInput;
};

export type DashboardCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutOrganizationInput,
        Prisma.DashboardUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.DashboardCreateWithoutOrganizationInput[]
    | Prisma.DashboardUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.DashboardCreateManyOrganizationInputEnvelope;
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
};

export type DashboardUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutOrganizationInput,
        Prisma.DashboardUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.DashboardCreateWithoutOrganizationInput[]
    | Prisma.DashboardUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.DashboardCreateManyOrganizationInputEnvelope;
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
};

export type DashboardUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutOrganizationInput,
        Prisma.DashboardUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.DashboardCreateWithoutOrganizationInput[]
    | Prisma.DashboardUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.DashboardUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.DashboardUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.DashboardCreateManyOrganizationInputEnvelope;
  set?: Prisma.DashboardWhereUniqueInput | Prisma.DashboardWhereUniqueInput[];
  disconnect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  delete?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  update?:
    | Prisma.DashboardUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.DashboardUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.DashboardUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.DashboardUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?:
    | Prisma.DashboardScalarWhereInput
    | Prisma.DashboardScalarWhereInput[];
};

export type DashboardUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutOrganizationInput,
        Prisma.DashboardUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.DashboardCreateWithoutOrganizationInput[]
    | Prisma.DashboardUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput
    | Prisma.DashboardCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.DashboardUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.DashboardUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.DashboardCreateManyOrganizationInputEnvelope;
  set?: Prisma.DashboardWhereUniqueInput | Prisma.DashboardWhereUniqueInput[];
  disconnect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  delete?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  update?:
    | Prisma.DashboardUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.DashboardUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.DashboardUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.DashboardUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?:
    | Prisma.DashboardScalarWhereInput
    | Prisma.DashboardScalarWhereInput[];
};

export type DashboardCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutProjectInput,
        Prisma.DashboardUncheckedCreateWithoutProjectInput
      >
    | Prisma.DashboardCreateWithoutProjectInput[]
    | Prisma.DashboardUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutProjectInput
    | Prisma.DashboardCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.DashboardCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
};

export type DashboardUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutProjectInput,
        Prisma.DashboardUncheckedCreateWithoutProjectInput
      >
    | Prisma.DashboardCreateWithoutProjectInput[]
    | Prisma.DashboardUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutProjectInput
    | Prisma.DashboardCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.DashboardCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
};

export type DashboardUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutProjectInput,
        Prisma.DashboardUncheckedCreateWithoutProjectInput
      >
    | Prisma.DashboardCreateWithoutProjectInput[]
    | Prisma.DashboardUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutProjectInput
    | Prisma.DashboardCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.DashboardUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.DashboardUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.DashboardCreateManyProjectInputEnvelope;
  set?: Prisma.DashboardWhereUniqueInput | Prisma.DashboardWhereUniqueInput[];
  disconnect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  delete?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  update?:
    | Prisma.DashboardUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.DashboardUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.DashboardUpdateManyWithWhereWithoutProjectInput
    | Prisma.DashboardUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.DashboardScalarWhereInput
    | Prisma.DashboardScalarWhereInput[];
};

export type DashboardUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.DashboardCreateWithoutProjectInput,
        Prisma.DashboardUncheckedCreateWithoutProjectInput
      >
    | Prisma.DashboardCreateWithoutProjectInput[]
    | Prisma.DashboardUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.DashboardCreateOrConnectWithoutProjectInput
    | Prisma.DashboardCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.DashboardUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.DashboardUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.DashboardCreateManyProjectInputEnvelope;
  set?: Prisma.DashboardWhereUniqueInput | Prisma.DashboardWhereUniqueInput[];
  disconnect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  delete?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  connect?:
    | Prisma.DashboardWhereUniqueInput
    | Prisma.DashboardWhereUniqueInput[];
  update?:
    | Prisma.DashboardUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.DashboardUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.DashboardUpdateManyWithWhereWithoutProjectInput
    | Prisma.DashboardUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.DashboardScalarWhereInput
    | Prisma.DashboardScalarWhereInput[];
};

export type DashboardCreateNestedOneWithoutReportsInput = {
  create?: Prisma.XOR<
    Prisma.DashboardCreateWithoutReportsInput,
    Prisma.DashboardUncheckedCreateWithoutReportsInput
  >;
  connectOrCreate?: Prisma.DashboardCreateOrConnectWithoutReportsInput;
  connect?: Prisma.DashboardWhereUniqueInput;
};

export type DashboardUpdateOneRequiredWithoutReportsNestedInput = {
  create?: Prisma.XOR<
    Prisma.DashboardCreateWithoutReportsInput,
    Prisma.DashboardUncheckedCreateWithoutReportsInput
  >;
  connectOrCreate?: Prisma.DashboardCreateOrConnectWithoutReportsInput;
  upsert?: Prisma.DashboardUpsertWithoutReportsInput;
  connect?: Prisma.DashboardWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.DashboardUpdateToOneWithWhereWithoutReportsInput,
      Prisma.DashboardUpdateWithoutReportsInput
    >,
    Prisma.DashboardUncheckedUpdateWithoutReportsInput
  >;
};

export type DashboardCreateWithoutOrganizationInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutDashboardsInput;
  reports?: Prisma.ReportCreateNestedManyWithoutDashboardInput;
};

export type DashboardUncheckedCreateWithoutOrganizationInput = {
  id?: string;
  name: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutDashboardInput;
};

export type DashboardCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.DashboardWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutOrganizationInput,
    Prisma.DashboardUncheckedCreateWithoutOrganizationInput
  >;
};

export type DashboardCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.DashboardCreateManyOrganizationInput
    | Prisma.DashboardCreateManyOrganizationInput[];
  skipDuplicates?: boolean;
};

export type DashboardUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.DashboardWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DashboardUpdateWithoutOrganizationInput,
    Prisma.DashboardUncheckedUpdateWithoutOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutOrganizationInput,
    Prisma.DashboardUncheckedCreateWithoutOrganizationInput
  >;
};

export type DashboardUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.DashboardWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DashboardUpdateWithoutOrganizationInput,
    Prisma.DashboardUncheckedUpdateWithoutOrganizationInput
  >;
};

export type DashboardUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.DashboardScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DashboardUpdateManyMutationInput,
    Prisma.DashboardUncheckedUpdateManyWithoutOrganizationInput
  >;
};

export type DashboardScalarWhereInput = {
  AND?: Prisma.DashboardScalarWhereInput | Prisma.DashboardScalarWhereInput[];
  OR?: Prisma.DashboardScalarWhereInput[];
  NOT?: Prisma.DashboardScalarWhereInput | Prisma.DashboardScalarWhereInput[];
  id?: Prisma.StringFilter<'Dashboard'> | string;
  name?: Prisma.StringFilter<'Dashboard'> | string;
  organizationId?: Prisma.StringFilter<'Dashboard'> | string;
  projectId?: Prisma.StringFilter<'Dashboard'> | string;
  createdAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Dashboard'> | Date | string;
};

export type DashboardCreateWithoutProjectInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutDashboardInput;
  reports?: Prisma.ReportCreateNestedManyWithoutDashboardInput;
};

export type DashboardUncheckedCreateWithoutProjectInput = {
  id?: string;
  name: string;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  reports?: Prisma.ReportUncheckedCreateNestedManyWithoutDashboardInput;
};

export type DashboardCreateOrConnectWithoutProjectInput = {
  where: Prisma.DashboardWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutProjectInput,
    Prisma.DashboardUncheckedCreateWithoutProjectInput
  >;
};

export type DashboardCreateManyProjectInputEnvelope = {
  data:
    | Prisma.DashboardCreateManyProjectInput
    | Prisma.DashboardCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type DashboardUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.DashboardWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.DashboardUpdateWithoutProjectInput,
    Prisma.DashboardUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutProjectInput,
    Prisma.DashboardUncheckedCreateWithoutProjectInput
  >;
};

export type DashboardUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.DashboardWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.DashboardUpdateWithoutProjectInput,
    Prisma.DashboardUncheckedUpdateWithoutProjectInput
  >;
};

export type DashboardUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.DashboardScalarWhereInput;
  data: Prisma.XOR<
    Prisma.DashboardUpdateManyMutationInput,
    Prisma.DashboardUncheckedUpdateManyWithoutProjectInput
  >;
};

export type DashboardCreateWithoutReportsInput = {
  id?: string;
  name: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutDashboardInput;
  project: Prisma.ProjectCreateNestedOneWithoutDashboardsInput;
};

export type DashboardUncheckedCreateWithoutReportsInput = {
  id?: string;
  name: string;
  organizationId: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type DashboardCreateOrConnectWithoutReportsInput = {
  where: Prisma.DashboardWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutReportsInput,
    Prisma.DashboardUncheckedCreateWithoutReportsInput
  >;
};

export type DashboardUpsertWithoutReportsInput = {
  update: Prisma.XOR<
    Prisma.DashboardUpdateWithoutReportsInput,
    Prisma.DashboardUncheckedUpdateWithoutReportsInput
  >;
  create: Prisma.XOR<
    Prisma.DashboardCreateWithoutReportsInput,
    Prisma.DashboardUncheckedCreateWithoutReportsInput
  >;
  where?: Prisma.DashboardWhereInput;
};

export type DashboardUpdateToOneWithWhereWithoutReportsInput = {
  where?: Prisma.DashboardWhereInput;
  data: Prisma.XOR<
    Prisma.DashboardUpdateWithoutReportsInput,
    Prisma.DashboardUncheckedUpdateWithoutReportsInput
  >;
};

export type DashboardUpdateWithoutReportsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutDashboardNestedInput;
  project?: Prisma.ProjectUpdateOneRequiredWithoutDashboardsNestedInput;
};

export type DashboardUncheckedUpdateWithoutReportsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DashboardCreateManyOrganizationInput = {
  id?: string;
  name: string;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type DashboardUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutDashboardsNestedInput;
  reports?: Prisma.ReportUpdateManyWithoutDashboardNestedInput;
};

export type DashboardUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reports?: Prisma.ReportUncheckedUpdateManyWithoutDashboardNestedInput;
};

export type DashboardUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type DashboardCreateManyProjectInput = {
  id?: string;
  name: string;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type DashboardUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutDashboardNestedInput;
  reports?: Prisma.ReportUpdateManyWithoutDashboardNestedInput;
};

export type DashboardUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  reports?: Prisma.ReportUncheckedUpdateManyWithoutDashboardNestedInput;
};

export type DashboardUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type DashboardCountOutputType
 */

export type DashboardCountOutputType = {
  reports: number;
};

export type DashboardCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  reports?: boolean | DashboardCountOutputTypeCountReportsArgs;
};

/**
 * DashboardCountOutputType without action
 */
export type DashboardCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the DashboardCountOutputType
   */
  select?: Prisma.DashboardCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * DashboardCountOutputType without action
 */
export type DashboardCountOutputTypeCountReportsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ReportWhereInput;
};

export type DashboardSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    organizationId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    reports?: boolean | Prisma.Dashboard$reportsArgs<ExtArgs>;
    _count?: boolean | Prisma.DashboardCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['dashboard']
>;

export type DashboardSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    organizationId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['dashboard']
>;

export type DashboardSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    organizationId?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['dashboard']
>;

export type DashboardSelectScalar = {
  id?: boolean;
  name?: boolean;
  organizationId?: boolean;
  projectId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type DashboardOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'organizationId' | 'projectId' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['dashboard']
>;
export type DashboardInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  reports?: boolean | Prisma.Dashboard$reportsArgs<ExtArgs>;
  _count?: boolean | Prisma.DashboardCountOutputTypeDefaultArgs<ExtArgs>;
};
export type DashboardIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};
export type DashboardIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};

export type $DashboardPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Dashboard';
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>;
    project: Prisma.$ProjectPayload<ExtArgs>;
    reports: Prisma.$ReportPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      organizationId: string;
      projectId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['dashboard']
  >;
  composites: {};
};

export type DashboardGetPayload<
  S extends boolean | null | undefined | DashboardDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$DashboardPayload, S>;

export type DashboardCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<DashboardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: DashboardCountAggregateInputType | true;
};

export interface DashboardDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Dashboard'];
    meta: { name: 'Dashboard' };
  };
  /**
   * Find zero or one Dashboard that matches the filter.
   * @param {DashboardFindUniqueArgs} args - Arguments to find a Dashboard
   * @example
   * // Get one Dashboard
   * const dashboard = await prisma.dashboard.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DashboardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, DashboardFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Dashboard that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DashboardFindUniqueOrThrowArgs} args - Arguments to find a Dashboard
   * @example
   * // Get one Dashboard
   * const dashboard = await prisma.dashboard.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DashboardFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, DashboardFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Dashboard that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardFindFirstArgs} args - Arguments to find a Dashboard
   * @example
   * // Get one Dashboard
   * const dashboard = await prisma.dashboard.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DashboardFindFirstArgs>(
    args?: Prisma.SelectSubset<T, DashboardFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Dashboard that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardFindFirstOrThrowArgs} args - Arguments to find a Dashboard
   * @example
   * // Get one Dashboard
   * const dashboard = await prisma.dashboard.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DashboardFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, DashboardFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Dashboards that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Dashboards
   * const dashboards = await prisma.dashboard.findMany()
   *
   * // Get first 10 Dashboards
   * const dashboards = await prisma.dashboard.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const dashboardWithIdOnly = await prisma.dashboard.findMany({ select: { id: true } })
   *
   */
  findMany<T extends DashboardFindManyArgs>(
    args?: Prisma.SelectSubset<T, DashboardFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Dashboard.
   * @param {DashboardCreateArgs} args - Arguments to create a Dashboard.
   * @example
   * // Create one Dashboard
   * const Dashboard = await prisma.dashboard.create({
   *   data: {
   *     // ... data to create a Dashboard
   *   }
   * })
   *
   */
  create<T extends DashboardCreateArgs>(
    args: Prisma.SelectSubset<T, DashboardCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Dashboards.
   * @param {DashboardCreateManyArgs} args - Arguments to create many Dashboards.
   * @example
   * // Create many Dashboards
   * const dashboard = await prisma.dashboard.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends DashboardCreateManyArgs>(
    args?: Prisma.SelectSubset<T, DashboardCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Dashboards and returns the data saved in the database.
   * @param {DashboardCreateManyAndReturnArgs} args - Arguments to create many Dashboards.
   * @example
   * // Create many Dashboards
   * const dashboard = await prisma.dashboard.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Dashboards and only return the `id`
   * const dashboardWithIdOnly = await prisma.dashboard.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends DashboardCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, DashboardCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Dashboard.
   * @param {DashboardDeleteArgs} args - Arguments to delete one Dashboard.
   * @example
   * // Delete one Dashboard
   * const Dashboard = await prisma.dashboard.delete({
   *   where: {
   *     // ... filter to delete one Dashboard
   *   }
   * })
   *
   */
  delete<T extends DashboardDeleteArgs>(
    args: Prisma.SelectSubset<T, DashboardDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Dashboard.
   * @param {DashboardUpdateArgs} args - Arguments to update one Dashboard.
   * @example
   * // Update one Dashboard
   * const dashboard = await prisma.dashboard.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends DashboardUpdateArgs>(
    args: Prisma.SelectSubset<T, DashboardUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Dashboards.
   * @param {DashboardDeleteManyArgs} args - Arguments to filter Dashboards to delete.
   * @example
   * // Delete a few Dashboards
   * const { count } = await prisma.dashboard.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends DashboardDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, DashboardDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Dashboards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Dashboards
   * const dashboard = await prisma.dashboard.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends DashboardUpdateManyArgs>(
    args: Prisma.SelectSubset<T, DashboardUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Dashboards and returns the data updated in the database.
   * @param {DashboardUpdateManyAndReturnArgs} args - Arguments to update many Dashboards.
   * @example
   * // Update many Dashboards
   * const dashboard = await prisma.dashboard.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Dashboards and only return the `id`
   * const dashboardWithIdOnly = await prisma.dashboard.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends DashboardUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, DashboardUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Dashboard.
   * @param {DashboardUpsertArgs} args - Arguments to update or create a Dashboard.
   * @example
   * // Update or create a Dashboard
   * const dashboard = await prisma.dashboard.upsert({
   *   create: {
   *     // ... data to create a Dashboard
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dashboard we want to update
   *   }
   * })
   */
  upsert<T extends DashboardUpsertArgs>(
    args: Prisma.SelectSubset<T, DashboardUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__DashboardClient<
    runtime.Types.Result.GetResult<
      Prisma.$DashboardPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Dashboards.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardCountArgs} args - Arguments to filter Dashboards to count.
   * @example
   * // Count the number of Dashboards
   * const count = await prisma.dashboard.count({
   *   where: {
   *     // ... the filter for the Dashboards we want to count
   *   }
   * })
   **/
  count<T extends DashboardCountArgs>(
    args?: Prisma.Subset<T, DashboardCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DashboardCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Dashboard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends DashboardAggregateArgs>(
    args: Prisma.Subset<T, DashboardAggregateArgs>,
  ): Prisma.PrismaPromise<GetDashboardAggregateType<T>>;

  /**
   * Group by Dashboard.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DashboardGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends DashboardGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DashboardGroupByArgs['orderBy'] }
      : { orderBy?: DashboardGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, DashboardGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetDashboardGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Dashboard model
   */
  readonly fields: DashboardFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Dashboard.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DashboardClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  reports<T extends Prisma.Dashboard$reportsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Dashboard$reportsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$ReportPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Dashboard model
 */
export interface DashboardFieldRefs {
  readonly id: Prisma.FieldRef<'Dashboard', 'String'>;
  readonly name: Prisma.FieldRef<'Dashboard', 'String'>;
  readonly organizationId: Prisma.FieldRef<'Dashboard', 'String'>;
  readonly projectId: Prisma.FieldRef<'Dashboard', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Dashboard', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Dashboard', 'DateTime'>;
}

// Custom InputTypes
/**
 * Dashboard findUnique
 */
export type DashboardFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter, which Dashboard to fetch.
   */
  where: Prisma.DashboardWhereUniqueInput;
};

/**
 * Dashboard findUniqueOrThrow
 */
export type DashboardFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter, which Dashboard to fetch.
   */
  where: Prisma.DashboardWhereUniqueInput;
};

/**
 * Dashboard findFirst
 */
export type DashboardFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter, which Dashboard to fetch.
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dashboards to fetch.
   */
  orderBy?:
    | Prisma.DashboardOrderByWithRelationInput
    | Prisma.DashboardOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Dashboards.
   */
  cursor?: Prisma.DashboardWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Dashboards from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dashboards.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Dashboards.
   */
  distinct?:
    | Prisma.DashboardScalarFieldEnum
    | Prisma.DashboardScalarFieldEnum[];
};

/**
 * Dashboard findFirstOrThrow
 */
export type DashboardFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter, which Dashboard to fetch.
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dashboards to fetch.
   */
  orderBy?:
    | Prisma.DashboardOrderByWithRelationInput
    | Prisma.DashboardOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Dashboards.
   */
  cursor?: Prisma.DashboardWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Dashboards from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dashboards.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Dashboards.
   */
  distinct?:
    | Prisma.DashboardScalarFieldEnum
    | Prisma.DashboardScalarFieldEnum[];
};

/**
 * Dashboard findMany
 */
export type DashboardFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter, which Dashboards to fetch.
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Dashboards to fetch.
   */
  orderBy?:
    | Prisma.DashboardOrderByWithRelationInput
    | Prisma.DashboardOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Dashboards.
   */
  cursor?: Prisma.DashboardWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Dashboards from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Dashboards.
   */
  skip?: number;
  distinct?:
    | Prisma.DashboardScalarFieldEnum
    | Prisma.DashboardScalarFieldEnum[];
};

/**
 * Dashboard create
 */
export type DashboardCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * The data needed to create a Dashboard.
   */
  data: Prisma.XOR<
    Prisma.DashboardCreateInput,
    Prisma.DashboardUncheckedCreateInput
  >;
};

/**
 * Dashboard createMany
 */
export type DashboardCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Dashboards.
   */
  data: Prisma.DashboardCreateManyInput | Prisma.DashboardCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Dashboard createManyAndReturn
 */
export type DashboardCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * The data used to create many Dashboards.
   */
  data: Prisma.DashboardCreateManyInput | Prisma.DashboardCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Dashboard update
 */
export type DashboardUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * The data needed to update a Dashboard.
   */
  data: Prisma.XOR<
    Prisma.DashboardUpdateInput,
    Prisma.DashboardUncheckedUpdateInput
  >;
  /**
   * Choose, which Dashboard to update.
   */
  where: Prisma.DashboardWhereUniqueInput;
};

/**
 * Dashboard updateMany
 */
export type DashboardUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Dashboards.
   */
  data: Prisma.XOR<
    Prisma.DashboardUpdateManyMutationInput,
    Prisma.DashboardUncheckedUpdateManyInput
  >;
  /**
   * Filter which Dashboards to update
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * Limit how many Dashboards to update.
   */
  limit?: number;
};

/**
 * Dashboard updateManyAndReturn
 */
export type DashboardUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * The data used to update Dashboards.
   */
  data: Prisma.XOR<
    Prisma.DashboardUpdateManyMutationInput,
    Prisma.DashboardUncheckedUpdateManyInput
  >;
  /**
   * Filter which Dashboards to update
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * Limit how many Dashboards to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Dashboard upsert
 */
export type DashboardUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * The filter to search for the Dashboard to update in case it exists.
   */
  where: Prisma.DashboardWhereUniqueInput;
  /**
   * In case the Dashboard found by the `where` argument doesn't exist, create a new Dashboard with this data.
   */
  create: Prisma.XOR<
    Prisma.DashboardCreateInput,
    Prisma.DashboardUncheckedCreateInput
  >;
  /**
   * In case the Dashboard was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.DashboardUpdateInput,
    Prisma.DashboardUncheckedUpdateInput
  >;
};

/**
 * Dashboard delete
 */
export type DashboardDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
  /**
   * Filter which Dashboard to delete.
   */
  where: Prisma.DashboardWhereUniqueInput;
};

/**
 * Dashboard deleteMany
 */
export type DashboardDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Dashboards to delete
   */
  where?: Prisma.DashboardWhereInput;
  /**
   * Limit how many Dashboards to delete.
   */
  limit?: number;
};

/**
 * Dashboard.reports
 */
export type Dashboard$reportsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null;
  where?: Prisma.ReportWhereInput;
  orderBy?:
    | Prisma.ReportOrderByWithRelationInput
    | Prisma.ReportOrderByWithRelationInput[];
  cursor?: Prisma.ReportWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[];
};

/**
 * Dashboard without action
 */
export type DashboardDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Dashboard
   */
  select?: Prisma.DashboardSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Dashboard
   */
  omit?: Prisma.DashboardOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DashboardInclude<ExtArgs> | null;
};
