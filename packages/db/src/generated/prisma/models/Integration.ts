/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Integration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model Integration
 *
 */
export type IntegrationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$IntegrationPayload>;

export type AggregateIntegration = {
  _count: IntegrationCountAggregateOutputType | null;
  _min: IntegrationMinAggregateOutputType | null;
  _max: IntegrationMaxAggregateOutputType | null;
};

export type IntegrationMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  organizationId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type IntegrationMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  organizationId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type IntegrationCountAggregateOutputType = {
  id: number;
  name: number;
  config: number;
  organizationId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type IntegrationMinAggregateInputType = {
  id?: true;
  name?: true;
  organizationId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type IntegrationMaxAggregateInputType = {
  id?: true;
  name?: true;
  organizationId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type IntegrationCountAggregateInputType = {
  id?: true;
  name?: true;
  config?: true;
  organizationId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type IntegrationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Integration to aggregate.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Integrations
   **/
  _count?: true | IntegrationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: IntegrationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: IntegrationMaxAggregateInputType;
};

export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
  [P in keyof T & keyof AggregateIntegration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIntegration[P]>
    : Prisma.GetScalarType<T[P], AggregateIntegration[P]>;
};

export type IntegrationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IntegrationWhereInput;
  orderBy?:
    | Prisma.IntegrationOrderByWithAggregationInput
    | Prisma.IntegrationOrderByWithAggregationInput[];
  by: Prisma.IntegrationScalarFieldEnum[] | Prisma.IntegrationScalarFieldEnum;
  having?: Prisma.IntegrationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: IntegrationCountAggregateInputType | true;
  _min?: IntegrationMinAggregateInputType;
  _max?: IntegrationMaxAggregateInputType;
};

export type IntegrationGroupByOutputType = {
  id: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  organizationId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: IntegrationCountAggregateOutputType | null;
  _min: IntegrationMinAggregateOutputType | null;
  _max: IntegrationMaxAggregateOutputType | null;
};

type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<IntegrationGroupByOutputType, T['by']> & {
        [P in keyof T & keyof IntegrationGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IntegrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IntegrationGroupByOutputType[P]>;
      }
    >
  >;

export type IntegrationWhereInput = {
  AND?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
  OR?: Prisma.IntegrationWhereInput[];
  NOT?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
  id?: Prisma.UuidFilter<'Integration'> | string;
  name?: Prisma.StringFilter<'Integration'> | string;
  config?: Prisma.JsonFilter<'Integration'>;
  organizationId?: Prisma.StringFilter<'Integration'> | string;
  createdAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
  organization?: Prisma.XOR<
    Prisma.OrganizationScalarRelationFilter,
    Prisma.OrganizationWhereInput
  >;
  notificationRules?: Prisma.NotificationRuleListRelationFilter;
  notifications?: Prisma.NotificationListRelationFilter;
};

export type IntegrationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  organization?: Prisma.OrganizationOrderByWithRelationInput;
  notificationRules?: Prisma.NotificationRuleOrderByRelationAggregateInput;
  notifications?: Prisma.NotificationOrderByRelationAggregateInput;
};

export type IntegrationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
    OR?: Prisma.IntegrationWhereInput[];
    NOT?: Prisma.IntegrationWhereInput | Prisma.IntegrationWhereInput[];
    name?: Prisma.StringFilter<'Integration'> | string;
    config?: Prisma.JsonFilter<'Integration'>;
    organizationId?: Prisma.StringFilter<'Integration'> | string;
    createdAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
    organization?: Prisma.XOR<
      Prisma.OrganizationScalarRelationFilter,
      Prisma.OrganizationWhereInput
    >;
    notificationRules?: Prisma.NotificationRuleListRelationFilter;
    notifications?: Prisma.NotificationListRelationFilter;
  },
  'id'
>;

export type IntegrationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.IntegrationCountOrderByAggregateInput;
  _max?: Prisma.IntegrationMaxOrderByAggregateInput;
  _min?: Prisma.IntegrationMinOrderByAggregateInput;
};

export type IntegrationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.IntegrationScalarWhereWithAggregatesInput
    | Prisma.IntegrationScalarWhereWithAggregatesInput[];
  OR?: Prisma.IntegrationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.IntegrationScalarWhereWithAggregatesInput
    | Prisma.IntegrationScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'Integration'> | string;
  name?: Prisma.StringWithAggregatesFilter<'Integration'> | string;
  config?: Prisma.JsonWithAggregatesFilter<'Integration'>;
  organizationId?: Prisma.StringWithAggregatesFilter<'Integration'> | string;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'Integration'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'Integration'>
    | Date
    | string;
};

export type IntegrationCreateInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutIntegrationsInput;
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutIntegrationsInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationUncheckedCreateInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutIntegrationsInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput;
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutIntegrationsNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutIntegrationsNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationCreateManyInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationListRelationFilter = {
  every?: Prisma.IntegrationWhereInput;
  some?: Prisma.IntegrationWhereInput;
  none?: Prisma.IntegrationWhereInput;
};

export type IntegrationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type IntegrationNullableScalarRelationFilter = {
  is?: Prisma.IntegrationWhereInput | null;
  isNot?: Prisma.IntegrationWhereInput | null;
};

export type IntegrationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  organizationId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type IntegrationCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutOrganizationInput,
        Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.IntegrationCreateWithoutOrganizationInput[]
    | Prisma.IntegrationUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.IntegrationCreateManyOrganizationInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutOrganizationInput,
        Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.IntegrationCreateWithoutOrganizationInput[]
    | Prisma.IntegrationUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput[];
  createMany?: Prisma.IntegrationCreateManyOrganizationInputEnvelope;
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutOrganizationInput,
        Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.IntegrationCreateWithoutOrganizationInput[]
    | Prisma.IntegrationUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.IntegrationCreateManyOrganizationInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutOrganizationInput,
        Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
      >
    | Prisma.IntegrationCreateWithoutOrganizationInput[]
    | Prisma.IntegrationUncheckedCreateWithoutOrganizationInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput
    | Prisma.IntegrationCreateOrConnectWithoutOrganizationInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutOrganizationInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[];
  createMany?: Prisma.IntegrationCreateManyOrganizationInputEnvelope;
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutOrganizationInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutOrganizationInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutOrganizationInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationCreateNestedManyWithoutNotificationRulesInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutNotificationRulesInput,
        Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
      >
    | Prisma.IntegrationCreateWithoutNotificationRulesInput[]
    | Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput
    | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
};

export type IntegrationUncheckedCreateNestedManyWithoutNotificationRulesInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.IntegrationCreateWithoutNotificationRulesInput,
          Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
        >
      | Prisma.IntegrationCreateWithoutNotificationRulesInput[]
      | Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput[];
    connectOrCreate?:
      | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput
      | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput[];
    connect?:
      | Prisma.IntegrationWhereUniqueInput
      | Prisma.IntegrationWhereUniqueInput[];
  };

export type IntegrationUpdateManyWithoutNotificationRulesNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.IntegrationCreateWithoutNotificationRulesInput,
        Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
      >
    | Prisma.IntegrationCreateWithoutNotificationRulesInput[]
    | Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput[];
  connectOrCreate?:
    | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput
    | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput[];
  upsert?:
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutNotificationRulesInput
    | Prisma.IntegrationUpsertWithWhereUniqueWithoutNotificationRulesInput[];
  set?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  disconnect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  delete?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  connect?:
    | Prisma.IntegrationWhereUniqueInput
    | Prisma.IntegrationWhereUniqueInput[];
  update?:
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutNotificationRulesInput
    | Prisma.IntegrationUpdateWithWhereUniqueWithoutNotificationRulesInput[];
  updateMany?:
    | Prisma.IntegrationUpdateManyWithWhereWithoutNotificationRulesInput
    | Prisma.IntegrationUpdateManyWithWhereWithoutNotificationRulesInput[];
  deleteMany?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
};

export type IntegrationUncheckedUpdateManyWithoutNotificationRulesNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.IntegrationCreateWithoutNotificationRulesInput,
          Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
        >
      | Prisma.IntegrationCreateWithoutNotificationRulesInput[]
      | Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput[];
    connectOrCreate?:
      | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput
      | Prisma.IntegrationCreateOrConnectWithoutNotificationRulesInput[];
    upsert?:
      | Prisma.IntegrationUpsertWithWhereUniqueWithoutNotificationRulesInput
      | Prisma.IntegrationUpsertWithWhereUniqueWithoutNotificationRulesInput[];
    set?:
      | Prisma.IntegrationWhereUniqueInput
      | Prisma.IntegrationWhereUniqueInput[];
    disconnect?:
      | Prisma.IntegrationWhereUniqueInput
      | Prisma.IntegrationWhereUniqueInput[];
    delete?:
      | Prisma.IntegrationWhereUniqueInput
      | Prisma.IntegrationWhereUniqueInput[];
    connect?:
      | Prisma.IntegrationWhereUniqueInput
      | Prisma.IntegrationWhereUniqueInput[];
    update?:
      | Prisma.IntegrationUpdateWithWhereUniqueWithoutNotificationRulesInput
      | Prisma.IntegrationUpdateWithWhereUniqueWithoutNotificationRulesInput[];
    updateMany?:
      | Prisma.IntegrationUpdateManyWithWhereWithoutNotificationRulesInput
      | Prisma.IntegrationUpdateManyWithWhereWithoutNotificationRulesInput[];
    deleteMany?:
      | Prisma.IntegrationScalarWhereInput
      | Prisma.IntegrationScalarWhereInput[];
  };

export type IntegrationCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.IntegrationCreateOrConnectWithoutNotificationsInput;
  connect?: Prisma.IntegrationWhereUniqueInput;
};

export type IntegrationUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.IntegrationCreateOrConnectWithoutNotificationsInput;
  upsert?: Prisma.IntegrationUpsertWithoutNotificationsInput;
  disconnect?: Prisma.IntegrationWhereInput | boolean;
  delete?: Prisma.IntegrationWhereInput | boolean;
  connect?: Prisma.IntegrationWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.IntegrationUpdateToOneWithWhereWithoutNotificationsInput,
      Prisma.IntegrationUpdateWithoutNotificationsInput
    >,
    Prisma.IntegrationUncheckedUpdateWithoutNotificationsInput
  >;
};

export type IntegrationCreateWithoutOrganizationInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutIntegrationsInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationUncheckedCreateWithoutOrganizationInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutIntegrationsInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutOrganizationInput,
    Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
  >;
};

export type IntegrationCreateManyOrganizationInputEnvelope = {
  data:
    | Prisma.IntegrationCreateManyOrganizationInput
    | Prisma.IntegrationCreateManyOrganizationInput[];
  skipDuplicates?: boolean;
};

export type IntegrationUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutOrganizationInput,
    Prisma.IntegrationUncheckedUpdateWithoutOrganizationInput
  >;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutOrganizationInput,
    Prisma.IntegrationUncheckedCreateWithoutOrganizationInput
  >;
};

export type IntegrationUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutOrganizationInput,
    Prisma.IntegrationUncheckedUpdateWithoutOrganizationInput
  >;
};

export type IntegrationUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.IntegrationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyWithoutOrganizationInput
  >;
};

export type IntegrationScalarWhereInput = {
  AND?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
  OR?: Prisma.IntegrationScalarWhereInput[];
  NOT?:
    | Prisma.IntegrationScalarWhereInput
    | Prisma.IntegrationScalarWhereInput[];
  id?: Prisma.UuidFilter<'Integration'> | string;
  name?: Prisma.StringFilter<'Integration'> | string;
  config?: Prisma.JsonFilter<'Integration'>;
  organizationId?: Prisma.StringFilter<'Integration'> | string;
  createdAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Integration'> | Date | string;
};

export type IntegrationCreateWithoutNotificationRulesInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutIntegrationsInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationUncheckedCreateWithoutNotificationRulesInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutIntegrationInput;
};

export type IntegrationCreateOrConnectWithoutNotificationRulesInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationRulesInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
  >;
};

export type IntegrationUpsertWithWhereUniqueWithoutNotificationRulesInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutNotificationRulesInput,
    Prisma.IntegrationUncheckedUpdateWithoutNotificationRulesInput
  >;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationRulesInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationRulesInput
  >;
};

export type IntegrationUpdateWithWhereUniqueWithoutNotificationRulesInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutNotificationRulesInput,
    Prisma.IntegrationUncheckedUpdateWithoutNotificationRulesInput
  >;
};

export type IntegrationUpdateManyWithWhereWithoutNotificationRulesInput = {
  where: Prisma.IntegrationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyWithoutNotificationRulesInput
  >;
};

export type IntegrationCreateWithoutNotificationsInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  organization: Prisma.OrganizationCreateNestedOneWithoutIntegrationsInput;
  notificationRules?: Prisma.NotificationRuleCreateNestedManyWithoutIntegrationsInput;
};

export type IntegrationUncheckedCreateWithoutNotificationsInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  organizationId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedCreateNestedManyWithoutIntegrationsInput;
};

export type IntegrationCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.IntegrationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationsInput
  >;
};

export type IntegrationUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedUpdateWithoutNotificationsInput
  >;
  create: Prisma.XOR<
    Prisma.IntegrationCreateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedCreateWithoutNotificationsInput
  >;
  where?: Prisma.IntegrationWhereInput;
};

export type IntegrationUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.IntegrationWhereInput;
  data: Prisma.XOR<
    Prisma.IntegrationUpdateWithoutNotificationsInput,
    Prisma.IntegrationUncheckedUpdateWithoutNotificationsInput
  >;
};

export type IntegrationUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput;
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutIntegrationsNestedInput;
};

export type IntegrationUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutIntegrationsNestedInput;
};

export type IntegrationCreateManyOrganizationInput = {
  id?: string;
  name: string;
  config: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type IntegrationUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notificationRules?: Prisma.NotificationRuleUpdateManyWithoutIntegrationsNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notificationRules?: Prisma.NotificationRuleUncheckedUpdateManyWithoutIntegrationsNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type IntegrationUpdateWithoutNotificationRulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationUncheckedUpdateWithoutNotificationRulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutIntegrationNestedInput;
};

export type IntegrationUncheckedUpdateManyWithoutNotificationRulesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  config?: PrismaJson.IPrismaIntegrationConfig;
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type IntegrationCountOutputType
 */

export type IntegrationCountOutputType = {
  notificationRules: number;
  notifications: number;
};

export type IntegrationCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  notificationRules?:
    | boolean
    | IntegrationCountOutputTypeCountNotificationRulesArgs;
  notifications?: boolean | IntegrationCountOutputTypeCountNotificationsArgs;
};

/**
 * IntegrationCountOutputType without action
 */
export type IntegrationCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the IntegrationCountOutputType
   */
  select?: Prisma.IntegrationCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * IntegrationCountOutputType without action
 */
export type IntegrationCountOutputTypeCountNotificationRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationRuleWhereInput;
};

/**
 * IntegrationCountOutputType without action
 */
export type IntegrationCountOutputTypeCountNotificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationWhereInput;
};

export type IntegrationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    config?: boolean;
    organizationId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
    notificationRules?:
      | boolean
      | Prisma.Integration$notificationRulesArgs<ExtArgs>;
    notifications?: boolean | Prisma.Integration$notificationsArgs<ExtArgs>;
    _count?: boolean | Prisma.IntegrationCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['integration']
>;

export type IntegrationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    config?: boolean;
    organizationId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['integration']
>;

export type IntegrationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    config?: boolean;
    organizationId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['integration']
>;

export type IntegrationSelectScalar = {
  id?: boolean;
  name?: boolean;
  config?: boolean;
  organizationId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type IntegrationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'name' | 'config' | 'organizationId' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['integration']
>;
export type IntegrationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
  notificationRules?:
    | boolean
    | Prisma.Integration$notificationRulesArgs<ExtArgs>;
  notifications?: boolean | Prisma.Integration$notificationsArgs<ExtArgs>;
  _count?: boolean | Prisma.IntegrationCountOutputTypeDefaultArgs<ExtArgs>;
};
export type IntegrationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
};
export type IntegrationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>;
};

export type $IntegrationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Integration';
  objects: {
    organization: Prisma.$OrganizationPayload<ExtArgs>;
    notificationRules: Prisma.$NotificationRulePayload<ExtArgs>[];
    notifications: Prisma.$NotificationPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      /**
       * [IPrismaIntegrationConfig]
       */
      config: PrismaJson.IPrismaIntegrationConfig;
      organizationId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['integration']
  >;
  composites: {};
};

export type IntegrationGetPayload<
  S extends boolean | null | undefined | IntegrationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$IntegrationPayload, S>;

export type IntegrationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  IntegrationFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: IntegrationCountAggregateInputType | true;
};

export interface IntegrationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Integration'];
    meta: { name: 'Integration' };
  };
  /**
   * Find zero or one Integration that matches the filter.
   * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IntegrationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, IntegrationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Integration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, IntegrationFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Integration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IntegrationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Integration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
   * @example
   * // Get one Integration
   * const integration = await prisma.integration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Integrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Integrations
   * const integrations = await prisma.integration.findMany()
   *
   * // Get first 10 Integrations
   * const integrations = await prisma.integration.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
   *
   */
  findMany<T extends IntegrationFindManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Integration.
   * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
   * @example
   * // Create one Integration
   * const Integration = await prisma.integration.create({
   *   data: {
   *     // ... data to create a Integration
   *   }
   * })
   *
   */
  create<T extends IntegrationCreateArgs>(
    args: Prisma.SelectSubset<T, IntegrationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Integrations.
   * @param {IntegrationCreateManyArgs} args - Arguments to create many Integrations.
   * @example
   * // Create many Integrations
   * const integration = await prisma.integration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends IntegrationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Integrations and returns the data saved in the database.
   * @param {IntegrationCreateManyAndReturnArgs} args - Arguments to create many Integrations.
   * @example
   * // Create many Integrations
   * const integration = await prisma.integration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Integrations and only return the `id`
   * const integrationWithIdOnly = await prisma.integration.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends IntegrationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, IntegrationCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Integration.
   * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
   * @example
   * // Delete one Integration
   * const Integration = await prisma.integration.delete({
   *   where: {
   *     // ... filter to delete one Integration
   *   }
   * })
   *
   */
  delete<T extends IntegrationDeleteArgs>(
    args: Prisma.SelectSubset<T, IntegrationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Integration.
   * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
   * @example
   * // Update one Integration
   * const integration = await prisma.integration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends IntegrationUpdateArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Integrations.
   * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
   * @example
   * // Delete a few Integrations
   * const { count } = await prisma.integration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends IntegrationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, IntegrationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Integrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Integrations
   * const integration = await prisma.integration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends IntegrationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Integrations and returns the data updated in the database.
   * @param {IntegrationUpdateManyAndReturnArgs} args - Arguments to update many Integrations.
   * @example
   * // Update many Integrations
   * const integration = await prisma.integration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Integrations and only return the `id`
   * const integrationWithIdOnly = await prisma.integration.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends IntegrationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Integration.
   * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
   * @example
   * // Update or create a Integration
   * const integration = await prisma.integration.upsert({
   *   create: {
   *     // ... data to create a Integration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Integration we want to update
   *   }
   * })
   */
  upsert<T extends IntegrationUpsertArgs>(
    args: Prisma.SelectSubset<T, IntegrationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Integrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
   * @example
   * // Count the number of Integrations
   * const count = await prisma.integration.count({
   *   where: {
   *     // ... the filter for the Integrations we want to count
   *   }
   * })
   **/
  count<T extends IntegrationCountArgs>(
    args?: Prisma.Subset<T, IntegrationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IntegrationCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Integration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends IntegrationAggregateArgs>(
    args: Prisma.Subset<T, IntegrationAggregateArgs>,
  ): Prisma.PrismaPromise<GetIntegrationAggregateType<T>>;

  /**
   * Group by Integration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IntegrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends IntegrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IntegrationGroupByArgs['orderBy'] }
      : { orderBy?: IntegrationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetIntegrationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Integration model
   */
  readonly fields: IntegrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Integration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IntegrationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__OrganizationClient<
    | runtime.Types.Result.GetResult<
        Prisma.$OrganizationPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  notificationRules<
    T extends Prisma.Integration$notificationRulesArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.Integration$notificationRulesArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$NotificationRulePayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  notifications<T extends Prisma.Integration$notificationsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Integration$notificationsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Integration model
 */
export interface IntegrationFieldRefs {
  readonly id: Prisma.FieldRef<'Integration', 'String'>;
  readonly name: Prisma.FieldRef<'Integration', 'String'>;
  readonly config: Prisma.FieldRef<'Integration', 'Json'>;
  readonly organizationId: Prisma.FieldRef<'Integration', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Integration', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Integration', 'DateTime'>;
}

// Custom InputTypes
/**
 * Integration findUnique
 */
export type IntegrationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration findUniqueOrThrow
 */
export type IntegrationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration findFirst
 */
export type IntegrationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Integrations.
   */
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration findFirstOrThrow
 */
export type IntegrationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integration to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Integrations.
   */
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration findMany
 */
export type IntegrationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter, which Integrations to fetch.
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Integrations to fetch.
   */
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Integrations.
   */
  cursor?: Prisma.IntegrationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Integrations from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Integrations.
   */
  skip?: number;
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * Integration create
 */
export type IntegrationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The data needed to create a Integration.
   */
  data: Prisma.XOR<
    Prisma.IntegrationCreateInput,
    Prisma.IntegrationUncheckedCreateInput
  >;
};

/**
 * Integration createMany
 */
export type IntegrationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Integrations.
   */
  data: Prisma.IntegrationCreateManyInput | Prisma.IntegrationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Integration createManyAndReturn
 */
export type IntegrationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * The data used to create many Integrations.
   */
  data: Prisma.IntegrationCreateManyInput | Prisma.IntegrationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Integration update
 */
export type IntegrationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The data needed to update a Integration.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateInput,
    Prisma.IntegrationUncheckedUpdateInput
  >;
  /**
   * Choose, which Integration to update.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration updateMany
 */
export type IntegrationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Integrations.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Integrations to update
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to update.
   */
  limit?: number;
};

/**
 * Integration updateManyAndReturn
 */
export type IntegrationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * The data used to update Integrations.
   */
  data: Prisma.XOR<
    Prisma.IntegrationUpdateManyMutationInput,
    Prisma.IntegrationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Integrations to update
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Integration upsert
 */
export type IntegrationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * The filter to search for the Integration to update in case it exists.
   */
  where: Prisma.IntegrationWhereUniqueInput;
  /**
   * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
   */
  create: Prisma.XOR<
    Prisma.IntegrationCreateInput,
    Prisma.IntegrationUncheckedCreateInput
  >;
  /**
   * In case the Integration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.IntegrationUpdateInput,
    Prisma.IntegrationUncheckedUpdateInput
  >;
};

/**
 * Integration delete
 */
export type IntegrationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  /**
   * Filter which Integration to delete.
   */
  where: Prisma.IntegrationWhereUniqueInput;
};

/**
 * Integration deleteMany
 */
export type IntegrationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Integrations to delete
   */
  where?: Prisma.IntegrationWhereInput;
  /**
   * Limit how many Integrations to delete.
   */
  limit?: number;
};

/**
 * Integration.notificationRules
 */
export type Integration$notificationRulesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  where?: Prisma.NotificationRuleWhereInput;
  orderBy?:
    | Prisma.NotificationRuleOrderByWithRelationInput
    | Prisma.NotificationRuleOrderByWithRelationInput[];
  cursor?: Prisma.NotificationRuleWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.NotificationRuleScalarFieldEnum
    | Prisma.NotificationRuleScalarFieldEnum[];
};

/**
 * Integration.notifications
 */
export type Integration$notificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  where?: Prisma.NotificationWhereInput;
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  cursor?: Prisma.NotificationWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * Integration without action
 */
export type IntegrationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
};
