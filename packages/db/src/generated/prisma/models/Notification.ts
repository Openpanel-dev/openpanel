/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Notification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model Notification
 *
 */
export type NotificationModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotificationPayload>;

export type AggregateNotification = {
  _count: NotificationCountAggregateOutputType | null;
  _min: NotificationMinAggregateOutputType | null;
  _max: NotificationMaxAggregateOutputType | null;
};

export type NotificationMinAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  title: string | null;
  message: string | null;
  isReadAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  sendToApp: boolean | null;
  sendToEmail: boolean | null;
  integrationId: string | null;
  notificationRuleId: string | null;
};

export type NotificationMaxAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  title: string | null;
  message: string | null;
  isReadAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  sendToApp: boolean | null;
  sendToEmail: boolean | null;
  integrationId: string | null;
  notificationRuleId: string | null;
};

export type NotificationCountAggregateOutputType = {
  id: number;
  projectId: number;
  title: number;
  message: number;
  isReadAt: number;
  createdAt: number;
  updatedAt: number;
  sendToApp: number;
  sendToEmail: number;
  integrationId: number;
  notificationRuleId: number;
  payload: number;
  _all: number;
};

export type NotificationMinAggregateInputType = {
  id?: true;
  projectId?: true;
  title?: true;
  message?: true;
  isReadAt?: true;
  createdAt?: true;
  updatedAt?: true;
  sendToApp?: true;
  sendToEmail?: true;
  integrationId?: true;
  notificationRuleId?: true;
};

export type NotificationMaxAggregateInputType = {
  id?: true;
  projectId?: true;
  title?: true;
  message?: true;
  isReadAt?: true;
  createdAt?: true;
  updatedAt?: true;
  sendToApp?: true;
  sendToEmail?: true;
  integrationId?: true;
  notificationRuleId?: true;
};

export type NotificationCountAggregateInputType = {
  id?: true;
  projectId?: true;
  title?: true;
  message?: true;
  isReadAt?: true;
  createdAt?: true;
  updatedAt?: true;
  sendToApp?: true;
  sendToEmail?: true;
  integrationId?: true;
  notificationRuleId?: true;
  payload?: true;
  _all?: true;
};

export type NotificationAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Notification to aggregate.
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notifications to fetch.
   */
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Notifications
   **/
  _count?: true | NotificationCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NotificationMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NotificationMaxAggregateInputType;
};

export type GetNotificationAggregateType<T extends NotificationAggregateArgs> =
  {
    [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : Prisma.GetScalarType<T[P], AggregateNotification[P]>
      : Prisma.GetScalarType<T[P], AggregateNotification[P]>;
  };

export type NotificationGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationWhereInput;
  orderBy?:
    | Prisma.NotificationOrderByWithAggregationInput
    | Prisma.NotificationOrderByWithAggregationInput[];
  by: Prisma.NotificationScalarFieldEnum[] | Prisma.NotificationScalarFieldEnum;
  having?: Prisma.NotificationScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: NotificationCountAggregateInputType | true;
  _min?: NotificationMinAggregateInputType;
  _max?: NotificationMaxAggregateInputType;
};

export type NotificationGroupByOutputType = {
  id: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  sendToApp: boolean;
  sendToEmail: boolean;
  integrationId: string | null;
  notificationRuleId: string | null;
  payload: PrismaJson.IPrismaNotificationPayload | null;
  _count: NotificationCountAggregateOutputType | null;
  _min: NotificationMinAggregateOutputType | null;
  _max: NotificationMaxAggregateOutputType | null;
};

type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<NotificationGroupByOutputType, T['by']> & {
        [P in keyof T & keyof NotificationGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationGroupByOutputType[P]>;
      }
    >
  >;

export type NotificationWhereInput = {
  AND?: Prisma.NotificationWhereInput | Prisma.NotificationWhereInput[];
  OR?: Prisma.NotificationWhereInput[];
  NOT?: Prisma.NotificationWhereInput | Prisma.NotificationWhereInput[];
  id?: Prisma.UuidFilter<'Notification'> | string;
  projectId?: Prisma.StringFilter<'Notification'> | string;
  title?: Prisma.StringFilter<'Notification'> | string;
  message?: Prisma.StringFilter<'Notification'> | string;
  isReadAt?:
    | Prisma.DateTimeNullableFilter<'Notification'>
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
  sendToApp?: Prisma.BoolFilter<'Notification'> | boolean;
  sendToEmail?: Prisma.BoolFilter<'Notification'> | boolean;
  integrationId?: Prisma.UuidNullableFilter<'Notification'> | string | null;
  notificationRuleId?:
    | Prisma.UuidNullableFilter<'Notification'>
    | string
    | null;
  payload?: Prisma.JsonNullableFilter<'Notification'>;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
  integration?: Prisma.XOR<
    Prisma.IntegrationNullableScalarRelationFilter,
    Prisma.IntegrationWhereInput
  > | null;
  notificationRule?: Prisma.XOR<
    Prisma.NotificationRuleNullableScalarRelationFilter,
    Prisma.NotificationRuleWhereInput
  > | null;
};

export type NotificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  isReadAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  integrationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  notificationRuleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  payload?: Prisma.SortOrderInput | Prisma.SortOrder;
  project?: Prisma.ProjectOrderByWithRelationInput;
  integration?: Prisma.IntegrationOrderByWithRelationInput;
  notificationRule?: Prisma.NotificationRuleOrderByWithRelationInput;
};

export type NotificationWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.NotificationWhereInput | Prisma.NotificationWhereInput[];
    OR?: Prisma.NotificationWhereInput[];
    NOT?: Prisma.NotificationWhereInput | Prisma.NotificationWhereInput[];
    projectId?: Prisma.StringFilter<'Notification'> | string;
    title?: Prisma.StringFilter<'Notification'> | string;
    message?: Prisma.StringFilter<'Notification'> | string;
    isReadAt?:
      | Prisma.DateTimeNullableFilter<'Notification'>
      | Date
      | string
      | null;
    createdAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
    sendToApp?: Prisma.BoolFilter<'Notification'> | boolean;
    sendToEmail?: Prisma.BoolFilter<'Notification'> | boolean;
    integrationId?: Prisma.UuidNullableFilter<'Notification'> | string | null;
    notificationRuleId?:
      | Prisma.UuidNullableFilter<'Notification'>
      | string
      | null;
    payload?: Prisma.JsonNullableFilter<'Notification'>;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
    integration?: Prisma.XOR<
      Prisma.IntegrationNullableScalarRelationFilter,
      Prisma.IntegrationWhereInput
    > | null;
    notificationRule?: Prisma.XOR<
      Prisma.NotificationRuleNullableScalarRelationFilter,
      Prisma.NotificationRuleWhereInput
    > | null;
  },
  'id'
>;

export type NotificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  isReadAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  integrationId?: Prisma.SortOrderInput | Prisma.SortOrder;
  notificationRuleId?: Prisma.SortOrderInput | Prisma.SortOrder;
  payload?: Prisma.SortOrderInput | Prisma.SortOrder;
  _count?: Prisma.NotificationCountOrderByAggregateInput;
  _max?: Prisma.NotificationMaxOrderByAggregateInput;
  _min?: Prisma.NotificationMinOrderByAggregateInput;
};

export type NotificationScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NotificationScalarWhereWithAggregatesInput
    | Prisma.NotificationScalarWhereWithAggregatesInput[];
  OR?: Prisma.NotificationScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.NotificationScalarWhereWithAggregatesInput
    | Prisma.NotificationScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'Notification'> | string;
  projectId?: Prisma.StringWithAggregatesFilter<'Notification'> | string;
  title?: Prisma.StringWithAggregatesFilter<'Notification'> | string;
  message?: Prisma.StringWithAggregatesFilter<'Notification'> | string;
  isReadAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'Notification'>
    | Date
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'Notification'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'Notification'>
    | Date
    | string;
  sendToApp?: Prisma.BoolWithAggregatesFilter<'Notification'> | boolean;
  sendToEmail?: Prisma.BoolWithAggregatesFilter<'Notification'> | boolean;
  integrationId?:
    | Prisma.UuidNullableWithAggregatesFilter<'Notification'>
    | string
    | null;
  notificationRuleId?:
    | Prisma.UuidNullableWithAggregatesFilter<'Notification'>
    | string
    | null;
  payload?: Prisma.JsonNullableWithAggregatesFilter<'Notification'>;
};

export type NotificationCreateInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationsInput;
  integration?: Prisma.IntegrationCreateNestedOneWithoutNotificationsInput;
  notificationRule?: Prisma.NotificationRuleCreateNestedOneWithoutNotificationsInput;
};

export type NotificationUncheckedCreateInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationsNestedInput;
  integration?: Prisma.IntegrationUpdateOneWithoutNotificationsNestedInput;
  notificationRule?: Prisma.NotificationRuleUpdateOneWithoutNotificationsNestedInput;
};

export type NotificationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateManyInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationListRelationFilter = {
  every?: Prisma.NotificationWhereInput;
  some?: Prisma.NotificationWhereInput;
  none?: Prisma.NotificationWhereInput;
};

export type NotificationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type NotificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  isReadAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  integrationId?: Prisma.SortOrder;
  notificationRuleId?: Prisma.SortOrder;
  payload?: Prisma.SortOrder;
};

export type NotificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  isReadAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  integrationId?: Prisma.SortOrder;
  notificationRuleId?: Prisma.SortOrder;
};

export type NotificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  title?: Prisma.SortOrder;
  message?: Prisma.SortOrder;
  isReadAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  integrationId?: Prisma.SortOrder;
  notificationRuleId?: Prisma.SortOrder;
};

export type NotificationCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutProjectInput,
        Prisma.NotificationUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationCreateWithoutProjectInput[]
    | Prisma.NotificationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutProjectInput
    | Prisma.NotificationCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.NotificationCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
};

export type NotificationUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutProjectInput,
        Prisma.NotificationUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationCreateWithoutProjectInput[]
    | Prisma.NotificationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutProjectInput
    | Prisma.NotificationCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.NotificationCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
};

export type NotificationUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutProjectInput,
        Prisma.NotificationUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationCreateWithoutProjectInput[]
    | Prisma.NotificationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutProjectInput
    | Prisma.NotificationCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.NotificationUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.NotificationCreateManyProjectInputEnvelope;
  set?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  delete?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  update?:
    | Prisma.NotificationUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.NotificationUpdateManyWithWhereWithoutProjectInput
    | Prisma.NotificationUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
};

export type NotificationUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutProjectInput,
        Prisma.NotificationUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationCreateWithoutProjectInput[]
    | Prisma.NotificationUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutProjectInput
    | Prisma.NotificationCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.NotificationUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.NotificationCreateManyProjectInputEnvelope;
  set?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  delete?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  update?:
    | Prisma.NotificationUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.NotificationUpdateManyWithWhereWithoutProjectInput
    | Prisma.NotificationUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
};

export type NotificationCreateNestedManyWithoutNotificationRuleInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutNotificationRuleInput,
        Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
      >
    | Prisma.NotificationCreateWithoutNotificationRuleInput[]
    | Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput
    | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput[];
  createMany?: Prisma.NotificationCreateManyNotificationRuleInputEnvelope;
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
};

export type NotificationUncheckedCreateNestedManyWithoutNotificationRuleInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationCreateWithoutNotificationRuleInput,
          Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
        >
      | Prisma.NotificationCreateWithoutNotificationRuleInput[]
      | Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput[];
    connectOrCreate?:
      | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput
      | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput[];
    createMany?: Prisma.NotificationCreateManyNotificationRuleInputEnvelope;
    connect?:
      | Prisma.NotificationWhereUniqueInput
      | Prisma.NotificationWhereUniqueInput[];
  };

export type NotificationUpdateManyWithoutNotificationRuleNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutNotificationRuleInput,
        Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
      >
    | Prisma.NotificationCreateWithoutNotificationRuleInput[]
    | Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput
    | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput[];
  upsert?:
    | Prisma.NotificationUpsertWithWhereUniqueWithoutNotificationRuleInput
    | Prisma.NotificationUpsertWithWhereUniqueWithoutNotificationRuleInput[];
  createMany?: Prisma.NotificationCreateManyNotificationRuleInputEnvelope;
  set?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  delete?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  update?:
    | Prisma.NotificationUpdateWithWhereUniqueWithoutNotificationRuleInput
    | Prisma.NotificationUpdateWithWhereUniqueWithoutNotificationRuleInput[];
  updateMany?:
    | Prisma.NotificationUpdateManyWithWhereWithoutNotificationRuleInput
    | Prisma.NotificationUpdateManyWithWhereWithoutNotificationRuleInput[];
  deleteMany?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
};

export type NotificationUncheckedUpdateManyWithoutNotificationRuleNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationCreateWithoutNotificationRuleInput,
          Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
        >
      | Prisma.NotificationCreateWithoutNotificationRuleInput[]
      | Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput[];
    connectOrCreate?:
      | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput
      | Prisma.NotificationCreateOrConnectWithoutNotificationRuleInput[];
    upsert?:
      | Prisma.NotificationUpsertWithWhereUniqueWithoutNotificationRuleInput
      | Prisma.NotificationUpsertWithWhereUniqueWithoutNotificationRuleInput[];
    createMany?: Prisma.NotificationCreateManyNotificationRuleInputEnvelope;
    set?:
      | Prisma.NotificationWhereUniqueInput
      | Prisma.NotificationWhereUniqueInput[];
    disconnect?:
      | Prisma.NotificationWhereUniqueInput
      | Prisma.NotificationWhereUniqueInput[];
    delete?:
      | Prisma.NotificationWhereUniqueInput
      | Prisma.NotificationWhereUniqueInput[];
    connect?:
      | Prisma.NotificationWhereUniqueInput
      | Prisma.NotificationWhereUniqueInput[];
    update?:
      | Prisma.NotificationUpdateWithWhereUniqueWithoutNotificationRuleInput
      | Prisma.NotificationUpdateWithWhereUniqueWithoutNotificationRuleInput[];
    updateMany?:
      | Prisma.NotificationUpdateManyWithWhereWithoutNotificationRuleInput
      | Prisma.NotificationUpdateManyWithWhereWithoutNotificationRuleInput[];
    deleteMany?:
      | Prisma.NotificationScalarWhereInput
      | Prisma.NotificationScalarWhereInput[];
  };

export type NotificationCreateNestedManyWithoutIntegrationInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutIntegrationInput,
        Prisma.NotificationUncheckedCreateWithoutIntegrationInput
      >
    | Prisma.NotificationCreateWithoutIntegrationInput[]
    | Prisma.NotificationUncheckedCreateWithoutIntegrationInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput[];
  createMany?: Prisma.NotificationCreateManyIntegrationInputEnvelope;
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
};

export type NotificationUncheckedCreateNestedManyWithoutIntegrationInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutIntegrationInput,
        Prisma.NotificationUncheckedCreateWithoutIntegrationInput
      >
    | Prisma.NotificationCreateWithoutIntegrationInput[]
    | Prisma.NotificationUncheckedCreateWithoutIntegrationInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput[];
  createMany?: Prisma.NotificationCreateManyIntegrationInputEnvelope;
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
};

export type NotificationUpdateManyWithoutIntegrationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutIntegrationInput,
        Prisma.NotificationUncheckedCreateWithoutIntegrationInput
      >
    | Prisma.NotificationCreateWithoutIntegrationInput[]
    | Prisma.NotificationUncheckedCreateWithoutIntegrationInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput[];
  upsert?:
    | Prisma.NotificationUpsertWithWhereUniqueWithoutIntegrationInput
    | Prisma.NotificationUpsertWithWhereUniqueWithoutIntegrationInput[];
  createMany?: Prisma.NotificationCreateManyIntegrationInputEnvelope;
  set?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  delete?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  update?:
    | Prisma.NotificationUpdateWithWhereUniqueWithoutIntegrationInput
    | Prisma.NotificationUpdateWithWhereUniqueWithoutIntegrationInput[];
  updateMany?:
    | Prisma.NotificationUpdateManyWithWhereWithoutIntegrationInput
    | Prisma.NotificationUpdateManyWithWhereWithoutIntegrationInput[];
  deleteMany?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
};

export type NotificationUncheckedUpdateManyWithoutIntegrationNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationCreateWithoutIntegrationInput,
        Prisma.NotificationUncheckedCreateWithoutIntegrationInput
      >
    | Prisma.NotificationCreateWithoutIntegrationInput[]
    | Prisma.NotificationUncheckedCreateWithoutIntegrationInput[];
  connectOrCreate?:
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput
    | Prisma.NotificationCreateOrConnectWithoutIntegrationInput[];
  upsert?:
    | Prisma.NotificationUpsertWithWhereUniqueWithoutIntegrationInput
    | Prisma.NotificationUpsertWithWhereUniqueWithoutIntegrationInput[];
  createMany?: Prisma.NotificationCreateManyIntegrationInputEnvelope;
  set?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  delete?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  connect?:
    | Prisma.NotificationWhereUniqueInput
    | Prisma.NotificationWhereUniqueInput[];
  update?:
    | Prisma.NotificationUpdateWithWhereUniqueWithoutIntegrationInput
    | Prisma.NotificationUpdateWithWhereUniqueWithoutIntegrationInput[];
  updateMany?:
    | Prisma.NotificationUpdateManyWithWhereWithoutIntegrationInput
    | Prisma.NotificationUpdateManyWithWhereWithoutIntegrationInput[];
  deleteMany?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
};

export type NotificationCreateWithoutProjectInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  integration?: Prisma.IntegrationCreateNestedOneWithoutNotificationsInput;
  notificationRule?: Prisma.NotificationRuleCreateNestedOneWithoutNotificationsInput;
};

export type NotificationUncheckedCreateWithoutProjectInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateOrConnectWithoutProjectInput = {
  where: Prisma.NotificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutProjectInput,
    Prisma.NotificationUncheckedCreateWithoutProjectInput
  >;
};

export type NotificationCreateManyProjectInputEnvelope = {
  data:
    | Prisma.NotificationCreateManyProjectInput
    | Prisma.NotificationCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type NotificationUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.NotificationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationUpdateWithoutProjectInput,
    Prisma.NotificationUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutProjectInput,
    Prisma.NotificationUncheckedCreateWithoutProjectInput
  >;
};

export type NotificationUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.NotificationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateWithoutProjectInput,
    Prisma.NotificationUncheckedUpdateWithoutProjectInput
  >;
};

export type NotificationUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.NotificationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateManyMutationInput,
    Prisma.NotificationUncheckedUpdateManyWithoutProjectInput
  >;
};

export type NotificationScalarWhereInput = {
  AND?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
  OR?: Prisma.NotificationScalarWhereInput[];
  NOT?:
    | Prisma.NotificationScalarWhereInput
    | Prisma.NotificationScalarWhereInput[];
  id?: Prisma.UuidFilter<'Notification'> | string;
  projectId?: Prisma.StringFilter<'Notification'> | string;
  title?: Prisma.StringFilter<'Notification'> | string;
  message?: Prisma.StringFilter<'Notification'> | string;
  isReadAt?:
    | Prisma.DateTimeNullableFilter<'Notification'>
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Notification'> | Date | string;
  sendToApp?: Prisma.BoolFilter<'Notification'> | boolean;
  sendToEmail?: Prisma.BoolFilter<'Notification'> | boolean;
  integrationId?: Prisma.UuidNullableFilter<'Notification'> | string | null;
  notificationRuleId?:
    | Prisma.UuidNullableFilter<'Notification'>
    | string
    | null;
  payload?: Prisma.JsonNullableFilter<'Notification'>;
};

export type NotificationCreateWithoutNotificationRuleInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationsInput;
  integration?: Prisma.IntegrationCreateNestedOneWithoutNotificationsInput;
};

export type NotificationUncheckedCreateWithoutNotificationRuleInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateOrConnectWithoutNotificationRuleInput = {
  where: Prisma.NotificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutNotificationRuleInput,
    Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
  >;
};

export type NotificationCreateManyNotificationRuleInputEnvelope = {
  data:
    | Prisma.NotificationCreateManyNotificationRuleInput
    | Prisma.NotificationCreateManyNotificationRuleInput[];
  skipDuplicates?: boolean;
};

export type NotificationUpsertWithWhereUniqueWithoutNotificationRuleInput = {
  where: Prisma.NotificationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationUpdateWithoutNotificationRuleInput,
    Prisma.NotificationUncheckedUpdateWithoutNotificationRuleInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutNotificationRuleInput,
    Prisma.NotificationUncheckedCreateWithoutNotificationRuleInput
  >;
};

export type NotificationUpdateWithWhereUniqueWithoutNotificationRuleInput = {
  where: Prisma.NotificationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateWithoutNotificationRuleInput,
    Prisma.NotificationUncheckedUpdateWithoutNotificationRuleInput
  >;
};

export type NotificationUpdateManyWithWhereWithoutNotificationRuleInput = {
  where: Prisma.NotificationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateManyMutationInput,
    Prisma.NotificationUncheckedUpdateManyWithoutNotificationRuleInput
  >;
};

export type NotificationCreateWithoutIntegrationInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationsInput;
  notificationRule?: Prisma.NotificationRuleCreateNestedOneWithoutNotificationsInput;
};

export type NotificationUncheckedCreateWithoutIntegrationInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateOrConnectWithoutIntegrationInput = {
  where: Prisma.NotificationWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutIntegrationInput,
    Prisma.NotificationUncheckedCreateWithoutIntegrationInput
  >;
};

export type NotificationCreateManyIntegrationInputEnvelope = {
  data:
    | Prisma.NotificationCreateManyIntegrationInput
    | Prisma.NotificationCreateManyIntegrationInput[];
  skipDuplicates?: boolean;
};

export type NotificationUpsertWithWhereUniqueWithoutIntegrationInput = {
  where: Prisma.NotificationWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationUpdateWithoutIntegrationInput,
    Prisma.NotificationUncheckedUpdateWithoutIntegrationInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationCreateWithoutIntegrationInput,
    Prisma.NotificationUncheckedCreateWithoutIntegrationInput
  >;
};

export type NotificationUpdateWithWhereUniqueWithoutIntegrationInput = {
  where: Prisma.NotificationWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateWithoutIntegrationInput,
    Prisma.NotificationUncheckedUpdateWithoutIntegrationInput
  >;
};

export type NotificationUpdateManyWithWhereWithoutIntegrationInput = {
  where: Prisma.NotificationScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationUpdateManyMutationInput,
    Prisma.NotificationUncheckedUpdateManyWithoutIntegrationInput
  >;
};

export type NotificationCreateManyProjectInput = {
  id?: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  integration?: Prisma.IntegrationUpdateOneWithoutNotificationsNestedInput;
  notificationRule?: Prisma.NotificationRuleUpdateOneWithoutNotificationsNestedInput;
};

export type NotificationUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateManyNotificationRuleInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUpdateWithoutNotificationRuleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationsNestedInput;
  integration?: Prisma.IntegrationUpdateOneWithoutNotificationsNestedInput;
};

export type NotificationUncheckedUpdateWithoutNotificationRuleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUncheckedUpdateManyWithoutNotificationRuleInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  integrationId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationCreateManyIntegrationInput = {
  id?: string;
  projectId: string;
  title: string;
  message: string;
  isReadAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  notificationRuleId?: string | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUpdateWithoutIntegrationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationsNestedInput;
  notificationRule?: Prisma.NotificationRuleUpdateOneWithoutNotificationsNestedInput;
};

export type NotificationUncheckedUpdateWithoutIntegrationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationUncheckedUpdateManyWithoutIntegrationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  title?: Prisma.StringFieldUpdateOperationsInput | string;
  message?: Prisma.StringFieldUpdateOperationsInput | string;
  isReadAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  notificationRuleId?:
    | Prisma.NullableStringFieldUpdateOperationsInput
    | string
    | null;
  payload?:
    | Prisma.NullableJsonNullValueInput
    | PrismaJson.IPrismaNotificationPayload;
};

export type NotificationSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    title?: boolean;
    message?: boolean;
    isReadAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    integrationId?: boolean;
    notificationRuleId?: boolean;
    payload?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
    notificationRule?:
      | boolean
      | Prisma.Notification$notificationRuleArgs<ExtArgs>;
  },
  ExtArgs['result']['notification']
>;

export type NotificationSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    title?: boolean;
    message?: boolean;
    isReadAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    integrationId?: boolean;
    notificationRuleId?: boolean;
    payload?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
    notificationRule?:
      | boolean
      | Prisma.Notification$notificationRuleArgs<ExtArgs>;
  },
  ExtArgs['result']['notification']
>;

export type NotificationSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    projectId?: boolean;
    title?: boolean;
    message?: boolean;
    isReadAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    integrationId?: boolean;
    notificationRuleId?: boolean;
    payload?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
    notificationRule?:
      | boolean
      | Prisma.Notification$notificationRuleArgs<ExtArgs>;
  },
  ExtArgs['result']['notification']
>;

export type NotificationSelectScalar = {
  id?: boolean;
  projectId?: boolean;
  title?: boolean;
  message?: boolean;
  isReadAt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  integrationId?: boolean;
  notificationRuleId?: boolean;
  payload?: boolean;
};

export type NotificationOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'projectId'
  | 'title'
  | 'message'
  | 'isReadAt'
  | 'createdAt'
  | 'updatedAt'
  | 'sendToApp'
  | 'sendToEmail'
  | 'integrationId'
  | 'notificationRuleId'
  | 'payload',
  ExtArgs['result']['notification']
>;
export type NotificationInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
  notificationRule?:
    | boolean
    | Prisma.Notification$notificationRuleArgs<ExtArgs>;
};
export type NotificationIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
  notificationRule?:
    | boolean
    | Prisma.Notification$notificationRuleArgs<ExtArgs>;
};
export type NotificationIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  integration?: boolean | Prisma.Notification$integrationArgs<ExtArgs>;
  notificationRule?:
    | boolean
    | Prisma.Notification$notificationRuleArgs<ExtArgs>;
};

export type $NotificationPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Notification';
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>;
    integration: Prisma.$IntegrationPayload<ExtArgs> | null;
    notificationRule: Prisma.$NotificationRulePayload<ExtArgs> | null;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      projectId: string;
      title: string;
      message: string;
      isReadAt: Date | null;
      createdAt: Date;
      updatedAt: Date;
      sendToApp: boolean;
      sendToEmail: boolean;
      integrationId: string | null;
      notificationRuleId: string | null;
      /**
       * [IPrismaNotificationPayload]
       */
      payload: PrismaJson.IPrismaNotificationPayload | null;
    },
    ExtArgs['result']['notification']
  >;
  composites: {};
};

export type NotificationGetPayload<
  S extends boolean | null | undefined | NotificationDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$NotificationPayload, S>;

export type NotificationCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  NotificationFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: NotificationCountAggregateInputType | true;
};

export interface NotificationDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Notification'];
    meta: { name: 'Notification' };
  };
  /**
   * Find zero or one Notification that matches the filter.
   * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
   * @example
   * // Get one Notification
   * const notification = await prisma.notification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
   * @example
   * // Get one Notification
   * const notification = await prisma.notification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Notification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
   * @example
   * // Get one Notification
   * const notification = await prisma.notification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Notification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
   * @example
   * // Get one Notification
   * const notification = await prisma.notification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Notifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notifications
   * const notifications = await prisma.notification.findMany()
   *
   * // Get first 10 Notifications
   * const notifications = await prisma.notification.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NotificationFindManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Notification.
   * @param {NotificationCreateArgs} args - Arguments to create a Notification.
   * @example
   * // Create one Notification
   * const Notification = await prisma.notification.create({
   *   data: {
   *     // ... data to create a Notification
   *   }
   * })
   *
   */
  create<T extends NotificationCreateArgs>(
    args: Prisma.SelectSubset<T, NotificationCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Notifications.
   * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
   * @example
   * // Create many Notifications
   * const notification = await prisma.notification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NotificationCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Notifications and returns the data saved in the database.
   * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
   * @example
   * // Create many Notifications
   * const notification = await prisma.notification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Notifications and only return the `id`
   * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Notification.
   * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
   * @example
   * // Delete one Notification
   * const Notification = await prisma.notification.delete({
   *   where: {
   *     // ... filter to delete one Notification
   *   }
   * })
   *
   */
  delete<T extends NotificationDeleteArgs>(
    args: Prisma.SelectSubset<T, NotificationDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Notification.
   * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
   * @example
   * // Update one Notification
   * const notification = await prisma.notification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NotificationUpdateArgs>(
    args: Prisma.SelectSubset<T, NotificationUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Notifications.
   * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
   * @example
   * // Delete a few Notifications
   * const { count } = await prisma.notification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NotificationDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notifications
   * const notification = await prisma.notification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NotificationUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Notifications and returns the data updated in the database.
   * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
   * @example
   * // Update many Notifications
   * const notification = await prisma.notification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Notifications and only return the `id`
   * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Notification.
   * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
   * @example
   * // Update or create a Notification
   * const notification = await prisma.notification.upsert({
   *   create: {
   *     // ... data to create a Notification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Notification we want to update
   *   }
   * })
   */
  upsert<T extends NotificationUpsertArgs>(
    args: Prisma.SelectSubset<T, NotificationUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Notifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
   * @example
   * // Count the number of Notifications
   * const count = await prisma.notification.count({
   *   where: {
   *     // ... the filter for the Notifications we want to count
   *   }
   * })
   **/
  count<T extends NotificationCountArgs>(
    args?: Prisma.Subset<T, NotificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            NotificationCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Notification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NotificationAggregateArgs>(
    args: Prisma.Subset<T, NotificationAggregateArgs>,
  ): Prisma.PrismaPromise<GetNotificationAggregateType<T>>;

  /**
   * Group by Notification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NotificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationGroupByArgs['orderBy'] }
      : { orderBy?: NotificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetNotificationGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Notification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  integration<T extends Prisma.Notification$integrationArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Notification$integrationArgs<ExtArgs>>,
  ): Prisma.Prisma__IntegrationClient<
    runtime.Types.Result.GetResult<
      Prisma.$IntegrationPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  notificationRule<
    T extends Prisma.Notification$notificationRuleArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.Notification$notificationRuleArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Notification model
 */
export interface NotificationFieldRefs {
  readonly id: Prisma.FieldRef<'Notification', 'String'>;
  readonly projectId: Prisma.FieldRef<'Notification', 'String'>;
  readonly title: Prisma.FieldRef<'Notification', 'String'>;
  readonly message: Prisma.FieldRef<'Notification', 'String'>;
  readonly isReadAt: Prisma.FieldRef<'Notification', 'DateTime'>;
  readonly createdAt: Prisma.FieldRef<'Notification', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Notification', 'DateTime'>;
  readonly sendToApp: Prisma.FieldRef<'Notification', 'Boolean'>;
  readonly sendToEmail: Prisma.FieldRef<'Notification', 'Boolean'>;
  readonly integrationId: Prisma.FieldRef<'Notification', 'String'>;
  readonly notificationRuleId: Prisma.FieldRef<'Notification', 'String'>;
  readonly payload: Prisma.FieldRef<'Notification', 'Json'>;
}

// Custom InputTypes
/**
 * Notification findUnique
 */
export type NotificationFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter, which Notification to fetch.
   */
  where: Prisma.NotificationWhereUniqueInput;
};

/**
 * Notification findUniqueOrThrow
 */
export type NotificationFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter, which Notification to fetch.
   */
  where: Prisma.NotificationWhereUniqueInput;
};

/**
 * Notification findFirst
 */
export type NotificationFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter, which Notification to fetch.
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notifications to fetch.
   */
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notifications.
   */
  cursor?: Prisma.NotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notifications.
   */
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * Notification findFirstOrThrow
 */
export type NotificationFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter, which Notification to fetch.
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notifications to fetch.
   */
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Notifications.
   */
  cursor?: Prisma.NotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notifications.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Notifications.
   */
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * Notification findMany
 */
export type NotificationFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter, which Notifications to fetch.
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Notifications to fetch.
   */
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Notifications.
   */
  cursor?: Prisma.NotificationWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Notifications from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Notifications.
   */
  skip?: number;
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * Notification create
 */
export type NotificationCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * The data needed to create a Notification.
   */
  data: Prisma.XOR<
    Prisma.NotificationCreateInput,
    Prisma.NotificationUncheckedCreateInput
  >;
};

/**
 * Notification createMany
 */
export type NotificationCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Notifications.
   */
  data:
    | Prisma.NotificationCreateManyInput
    | Prisma.NotificationCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Notification createManyAndReturn
 */
export type NotificationCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * The data used to create many Notifications.
   */
  data:
    | Prisma.NotificationCreateManyInput
    | Prisma.NotificationCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Notification update
 */
export type NotificationUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * The data needed to update a Notification.
   */
  data: Prisma.XOR<
    Prisma.NotificationUpdateInput,
    Prisma.NotificationUncheckedUpdateInput
  >;
  /**
   * Choose, which Notification to update.
   */
  where: Prisma.NotificationWhereUniqueInput;
};

/**
 * Notification updateMany
 */
export type NotificationUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Notifications.
   */
  data: Prisma.XOR<
    Prisma.NotificationUpdateManyMutationInput,
    Prisma.NotificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Notifications to update
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * Limit how many Notifications to update.
   */
  limit?: number;
};

/**
 * Notification updateManyAndReturn
 */
export type NotificationUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * The data used to update Notifications.
   */
  data: Prisma.XOR<
    Prisma.NotificationUpdateManyMutationInput,
    Prisma.NotificationUncheckedUpdateManyInput
  >;
  /**
   * Filter which Notifications to update
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * Limit how many Notifications to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Notification upsert
 */
export type NotificationUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * The filter to search for the Notification to update in case it exists.
   */
  where: Prisma.NotificationWhereUniqueInput;
  /**
   * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
   */
  create: Prisma.XOR<
    Prisma.NotificationCreateInput,
    Prisma.NotificationUncheckedCreateInput
  >;
  /**
   * In case the Notification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.NotificationUpdateInput,
    Prisma.NotificationUncheckedUpdateInput
  >;
};

/**
 * Notification delete
 */
export type NotificationDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  /**
   * Filter which Notification to delete.
   */
  where: Prisma.NotificationWhereUniqueInput;
};

/**
 * Notification deleteMany
 */
export type NotificationDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Notifications to delete
   */
  where?: Prisma.NotificationWhereInput;
  /**
   * Limit how many Notifications to delete.
   */
  limit?: number;
};

/**
 * Notification.integration
 */
export type Notification$integrationArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  where?: Prisma.IntegrationWhereInput;
};

/**
 * Notification.notificationRule
 */
export type Notification$notificationRuleArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  where?: Prisma.NotificationRuleWhereInput;
};

/**
 * Notification without action
 */
export type NotificationDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
};
