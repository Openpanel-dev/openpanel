/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Chat` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model Chat
 *
 */
export type ChatModel =
  runtime.Types.Result.DefaultSelection<Prisma.$ChatPayload>;

export type AggregateChat = {
  _count: ChatCountAggregateOutputType | null;
  _min: ChatMinAggregateOutputType | null;
  _max: ChatMaxAggregateOutputType | null;
};

export type ChatMinAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ChatMaxAggregateOutputType = {
  id: string | null;
  projectId: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type ChatCountAggregateOutputType = {
  id: number;
  messages: number;
  projectId: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type ChatMinAggregateInputType = {
  id?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ChatMaxAggregateInputType = {
  id?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type ChatCountAggregateInputType = {
  id?: true;
  messages?: true;
  projectId?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type ChatAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Chat to aggregate.
   */
  where?: Prisma.ChatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chats to fetch.
   */
  orderBy?:
    | Prisma.ChatOrderByWithRelationInput
    | Prisma.ChatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ChatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Chats
   **/
  _count?: true | ChatCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ChatMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ChatMaxAggregateInputType;
};

export type GetChatAggregateType<T extends ChatAggregateArgs> = {
  [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChat[P]>
    : Prisma.GetScalarType<T[P], AggregateChat[P]>;
};

export type ChatGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ChatWhereInput;
  orderBy?:
    | Prisma.ChatOrderByWithAggregationInput
    | Prisma.ChatOrderByWithAggregationInput[];
  by: Prisma.ChatScalarFieldEnum[] | Prisma.ChatScalarFieldEnum;
  having?: Prisma.ChatScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ChatCountAggregateInputType | true;
  _min?: ChatMinAggregateInputType;
  _max?: ChatMaxAggregateInputType;
};

export type ChatGroupByOutputType = {
  id: string;
  messages: runtime.JsonValue;
  projectId: string;
  createdAt: Date;
  updatedAt: Date;
  _count: ChatCountAggregateOutputType | null;
  _min: ChatMinAggregateOutputType | null;
  _max: ChatMaxAggregateOutputType | null;
};

type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupByOutputType, T['by']> & {
      [P in keyof T & keyof ChatGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ChatGroupByOutputType[P]>;
    }
  >
>;

export type ChatWhereInput = {
  AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[];
  OR?: Prisma.ChatWhereInput[];
  NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[];
  id?: Prisma.StringFilter<'Chat'> | string;
  messages?: Prisma.JsonFilter<'Chat'>;
  projectId?: Prisma.StringFilter<'Chat'> | string;
  createdAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
};

export type ChatOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  messages?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  project?: Prisma.ProjectOrderByWithRelationInput;
};

export type ChatWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[];
    OR?: Prisma.ChatWhereInput[];
    NOT?: Prisma.ChatWhereInput | Prisma.ChatWhereInput[];
    messages?: Prisma.JsonFilter<'Chat'>;
    projectId?: Prisma.StringFilter<'Chat'> | string;
    createdAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
  },
  'id'
>;

export type ChatOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  messages?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.ChatCountOrderByAggregateInput;
  _max?: Prisma.ChatMaxOrderByAggregateInput;
  _min?: Prisma.ChatMinOrderByAggregateInput;
};

export type ChatScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ChatScalarWhereWithAggregatesInput
    | Prisma.ChatScalarWhereWithAggregatesInput[];
  OR?: Prisma.ChatScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ChatScalarWhereWithAggregatesInput
    | Prisma.ChatScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<'Chat'> | string;
  messages?: Prisma.JsonWithAggregatesFilter<'Chat'>;
  projectId?: Prisma.StringWithAggregatesFilter<'Chat'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Chat'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Chat'> | Date | string;
};

export type ChatCreateInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutChatInput;
};

export type ChatUncheckedCreateInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ChatUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutChatNestedInput;
};

export type ChatUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatCreateManyInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  projectId: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ChatUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  messages?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ChatMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ChatMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type ChatListRelationFilter = {
  every?: Prisma.ChatWhereInput;
  some?: Prisma.ChatWhereInput;
  none?: Prisma.ChatWhereInput;
};

export type ChatOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type ChatCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatCreateWithoutProjectInput,
        Prisma.ChatUncheckedCreateWithoutProjectInput
      >
    | Prisma.ChatCreateWithoutProjectInput[]
    | Prisma.ChatUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ChatCreateOrConnectWithoutProjectInput
    | Prisma.ChatCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.ChatCreateManyProjectInputEnvelope;
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
};

export type ChatUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatCreateWithoutProjectInput,
        Prisma.ChatUncheckedCreateWithoutProjectInput
      >
    | Prisma.ChatCreateWithoutProjectInput[]
    | Prisma.ChatUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ChatCreateOrConnectWithoutProjectInput
    | Prisma.ChatCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.ChatCreateManyProjectInputEnvelope;
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
};

export type ChatUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatCreateWithoutProjectInput,
        Prisma.ChatUncheckedCreateWithoutProjectInput
      >
    | Prisma.ChatCreateWithoutProjectInput[]
    | Prisma.ChatUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ChatCreateOrConnectWithoutProjectInput
    | Prisma.ChatCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.ChatUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.ChatUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.ChatCreateManyProjectInputEnvelope;
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  update?:
    | Prisma.ChatUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.ChatUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.ChatUpdateManyWithWhereWithoutProjectInput
    | Prisma.ChatUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[];
};

export type ChatUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ChatCreateWithoutProjectInput,
        Prisma.ChatUncheckedCreateWithoutProjectInput
      >
    | Prisma.ChatCreateWithoutProjectInput[]
    | Prisma.ChatUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.ChatCreateOrConnectWithoutProjectInput
    | Prisma.ChatCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.ChatUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.ChatUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.ChatCreateManyProjectInputEnvelope;
  set?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  disconnect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  delete?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  connect?: Prisma.ChatWhereUniqueInput | Prisma.ChatWhereUniqueInput[];
  update?:
    | Prisma.ChatUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.ChatUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.ChatUpdateManyWithWhereWithoutProjectInput
    | Prisma.ChatUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[];
};

export type ChatCreateWithoutProjectInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ChatUncheckedCreateWithoutProjectInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ChatCreateOrConnectWithoutProjectInput = {
  where: Prisma.ChatWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ChatCreateWithoutProjectInput,
    Prisma.ChatUncheckedCreateWithoutProjectInput
  >;
};

export type ChatCreateManyProjectInputEnvelope = {
  data: Prisma.ChatCreateManyProjectInput | Prisma.ChatCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type ChatUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ChatWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ChatUpdateWithoutProjectInput,
    Prisma.ChatUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.ChatCreateWithoutProjectInput,
    Prisma.ChatUncheckedCreateWithoutProjectInput
  >;
};

export type ChatUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ChatWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ChatUpdateWithoutProjectInput,
    Prisma.ChatUncheckedUpdateWithoutProjectInput
  >;
};

export type ChatUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ChatScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ChatUpdateManyMutationInput,
    Prisma.ChatUncheckedUpdateManyWithoutProjectInput
  >;
};

export type ChatScalarWhereInput = {
  AND?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[];
  OR?: Prisma.ChatScalarWhereInput[];
  NOT?: Prisma.ChatScalarWhereInput | Prisma.ChatScalarWhereInput[];
  id?: Prisma.StringFilter<'Chat'> | string;
  messages?: Prisma.JsonFilter<'Chat'>;
  projectId?: Prisma.StringFilter<'Chat'> | string;
  createdAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Chat'> | Date | string;
};

export type ChatCreateManyProjectInput = {
  id?: string;
  messages: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ChatUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  messages?: Prisma.JsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ChatSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    messages?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['chat']
>;

export type ChatSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    messages?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['chat']
>;

export type ChatSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    messages?: boolean;
    projectId?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['chat']
>;

export type ChatSelectScalar = {
  id?: boolean;
  messages?: boolean;
  projectId?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type ChatOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'id' | 'messages' | 'projectId' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['chat']
>;
export type ChatInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};
export type ChatIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};
export type ChatIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};

export type $ChatPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Chat';
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>;
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      messages: runtime.JsonValue;
      projectId: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['chat']
  >;
  composites: {};
};

export type ChatGetPayload<
  S extends boolean | null | undefined | ChatDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$ChatPayload, S>;

export type ChatCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ChatCountAggregateInputType | true;
};

export interface ChatDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Chat'];
    meta: { name: 'Chat' };
  };
  /**
   * Find zero or one Chat that matches the filter.
   * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Chat that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Chat that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ChatFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Chat that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
   * @example
   * // Get one Chat
   * const chat = await prisma.chat.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chats
   * const chats = await prisma.chat.findMany()
   *
   * // Get first 10 Chats
   * const chats = await prisma.chat.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ChatFindManyArgs>(
    args?: Prisma.SelectSubset<T, ChatFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Chat.
   * @param {ChatCreateArgs} args - Arguments to create a Chat.
   * @example
   * // Create one Chat
   * const Chat = await prisma.chat.create({
   *   data: {
   *     // ... data to create a Chat
   *   }
   * })
   *
   */
  create<T extends ChatCreateArgs>(
    args: Prisma.SelectSubset<T, ChatCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Chats.
   * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ChatCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ChatCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Chats and returns the data saved in the database.
   * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chat = await prisma.chat.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Chat.
   * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
   * @example
   * // Delete one Chat
   * const Chat = await prisma.chat.delete({
   *   where: {
   *     // ... filter to delete one Chat
   *   }
   * })
   *
   */
  delete<T extends ChatDeleteArgs>(
    args: Prisma.SelectSubset<T, ChatDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Chat.
   * @param {ChatUpdateArgs} args - Arguments to update one Chat.
   * @example
   * // Update one Chat
   * const chat = await prisma.chat.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ChatUpdateArgs>(
    args: Prisma.SelectSubset<T, ChatUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Chats.
   * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
   * @example
   * // Delete a few Chats
   * const { count } = await prisma.chat.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ChatDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ChatUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Chats and returns the data updated in the database.
   * @param {ChatUpdateManyAndReturnArgs} args - Arguments to update many Chats.
   * @example
   * // Update many Chats
   * const chat = await prisma.chat.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Chats and only return the `id`
   * const chatWithIdOnly = await prisma.chat.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ChatUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ChatUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Chat.
   * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
   * @example
   * // Update or create a Chat
   * const chat = await prisma.chat.upsert({
   *   create: {
   *     // ... data to create a Chat
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chat we want to update
   *   }
   * })
   */
  upsert<T extends ChatUpsertArgs>(
    args: Prisma.SelectSubset<T, ChatUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__ChatClient<
    runtime.Types.Result.GetResult<
      Prisma.$ChatPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatCountArgs} args - Arguments to filter Chats to count.
   * @example
   * // Count the number of Chats
   * const count = await prisma.chat.count({
   *   where: {
   *     // ... the filter for the Chats we want to count
   *   }
   * })
   **/
  count<T extends ChatCountArgs>(
    args?: Prisma.Subset<T, ChatCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ChatAggregateArgs>(
    args: Prisma.Subset<T, ChatAggregateArgs>,
  ): Prisma.PrismaPromise<GetChatAggregateType<T>>;

  /**
   * Group by Chat.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ChatGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ChatGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetChatGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chat.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Chat model
 */
export interface ChatFieldRefs {
  readonly id: Prisma.FieldRef<'Chat', 'String'>;
  readonly messages: Prisma.FieldRef<'Chat', 'Json'>;
  readonly projectId: Prisma.FieldRef<'Chat', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Chat', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Chat', 'DateTime'>;
}

// Custom InputTypes
/**
 * Chat findUnique
 */
export type ChatFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput;
};

/**
 * Chat findUniqueOrThrow
 */
export type ChatFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter, which Chat to fetch.
   */
  where: Prisma.ChatWhereUniqueInput;
};

/**
 * Chat findFirst
 */
export type ChatFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chats to fetch.
   */
  orderBy?:
    | Prisma.ChatOrderByWithRelationInput
    | Prisma.ChatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[];
};

/**
 * Chat findFirstOrThrow
 */
export type ChatFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter, which Chat to fetch.
   */
  where?: Prisma.ChatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chats to fetch.
   */
  orderBy?:
    | Prisma.ChatOrderByWithRelationInput
    | Prisma.ChatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chats.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[];
};

/**
 * Chat findMany
 */
export type ChatFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Chats to fetch.
   */
  orderBy?:
    | Prisma.ChatOrderByWithRelationInput
    | Prisma.ChatOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Chats.
   */
  cursor?: Prisma.ChatWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Chats.
   */
  skip?: number;
  distinct?: Prisma.ChatScalarFieldEnum | Prisma.ChatScalarFieldEnum[];
};

/**
 * Chat create
 */
export type ChatCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * The data needed to create a Chat.
   */
  data: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>;
};

/**
 * Chat createMany
 */
export type ChatCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Chat createManyAndReturn
 */
export type ChatCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatCreateManyInput | Prisma.ChatCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Chat update
 */
export type ChatUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * The data needed to update a Chat.
   */
  data: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>;
  /**
   * Choose, which Chat to update.
   */
  where: Prisma.ChatWhereUniqueInput;
};

/**
 * Chat updateMany
 */
export type ChatUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<
    Prisma.ChatUpdateManyMutationInput,
    Prisma.ChatUncheckedUpdateManyInput
  >;
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput;
  /**
   * Limit how many Chats to update.
   */
  limit?: number;
};

/**
 * Chat updateManyAndReturn
 */
export type ChatUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<
    Prisma.ChatUpdateManyMutationInput,
    Prisma.ChatUncheckedUpdateManyInput
  >;
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatWhereInput;
  /**
   * Limit how many Chats to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Chat upsert
 */
export type ChatUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * The filter to search for the Chat to update in case it exists.
   */
  where: Prisma.ChatWhereUniqueInput;
  /**
   * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
   */
  create: Prisma.XOR<Prisma.ChatCreateInput, Prisma.ChatUncheckedCreateInput>;
  /**
   * In case the Chat was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatUpdateInput, Prisma.ChatUncheckedUpdateInput>;
};

/**
 * Chat delete
 */
export type ChatDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
  /**
   * Filter which Chat to delete.
   */
  where: Prisma.ChatWhereUniqueInput;
};

/**
 * Chat deleteMany
 */
export type ChatDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Chats to delete
   */
  where?: Prisma.ChatWhereInput;
  /**
   * Limit how many Chats to delete.
   */
  limit?: number;
};

/**
 * Chat without action
 */
export type ChatDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Chat
   */
  select?: Prisma.ChatSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Chat
   */
  omit?: Prisma.ChatOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatInclude<ExtArgs> | null;
};
