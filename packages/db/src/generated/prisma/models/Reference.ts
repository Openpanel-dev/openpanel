
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Reference` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Reference
 * 
 */
export type ReferenceModel = runtime.Types.Result.DefaultSelection<Prisma.$ReferencePayload>

export type AggregateReference = {
  _count: ReferenceCountAggregateOutputType | null
  _min: ReferenceMinAggregateOutputType | null
  _max: ReferenceMaxAggregateOutputType | null
}

export type ReferenceMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  date: Date | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReferenceMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  date: Date | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReferenceCountAggregateOutputType = {
  id: number
  title: number
  description: number
  date: number
  projectId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ReferenceMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  date?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ReferenceMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  date?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ReferenceCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  date?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ReferenceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Reference to aggregate.
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of References to fetch.
   */
  orderBy?: Prisma.ReferenceOrderByWithRelationInput | Prisma.ReferenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReferenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` References from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` References.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned References
  **/
  _count?: true | ReferenceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReferenceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReferenceMaxAggregateInputType
}

export type GetReferenceAggregateType<T extends ReferenceAggregateArgs> = {
      [P in keyof T & keyof AggregateReference]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReference[P]>
    : Prisma.GetScalarType<T[P], AggregateReference[P]>
}




export type ReferenceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReferenceWhereInput
  orderBy?: Prisma.ReferenceOrderByWithAggregationInput | Prisma.ReferenceOrderByWithAggregationInput[]
  by: Prisma.ReferenceScalarFieldEnum[] | Prisma.ReferenceScalarFieldEnum
  having?: Prisma.ReferenceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReferenceCountAggregateInputType | true
  _min?: ReferenceMinAggregateInputType
  _max?: ReferenceMaxAggregateInputType
}

export type ReferenceGroupByOutputType = {
  id: string
  title: string
  description: string | null
  date: Date
  projectId: string
  createdAt: Date
  updatedAt: Date
  _count: ReferenceCountAggregateOutputType | null
  _min: ReferenceMinAggregateOutputType | null
  _max: ReferenceMaxAggregateOutputType | null
}

type GetReferenceGroupByPayload<T extends ReferenceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReferenceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReferenceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReferenceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReferenceGroupByOutputType[P]>
      }
    >
  >



export type ReferenceWhereInput = {
  AND?: Prisma.ReferenceWhereInput | Prisma.ReferenceWhereInput[]
  OR?: Prisma.ReferenceWhereInput[]
  NOT?: Prisma.ReferenceWhereInput | Prisma.ReferenceWhereInput[]
  id?: Prisma.UuidFilter<"Reference"> | string
  title?: Prisma.StringFilter<"Reference"> | string
  description?: Prisma.StringNullableFilter<"Reference"> | string | null
  date?: Prisma.DateTimeFilter<"Reference"> | Date | string
  projectId?: Prisma.StringFilter<"Reference"> | string
  createdAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}

export type ReferenceOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  date?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type ReferenceWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ReferenceWhereInput | Prisma.ReferenceWhereInput[]
  OR?: Prisma.ReferenceWhereInput[]
  NOT?: Prisma.ReferenceWhereInput | Prisma.ReferenceWhereInput[]
  title?: Prisma.StringFilter<"Reference"> | string
  description?: Prisma.StringNullableFilter<"Reference"> | string | null
  date?: Prisma.DateTimeFilter<"Reference"> | Date | string
  projectId?: Prisma.StringFilter<"Reference"> | string
  createdAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}, "id">

export type ReferenceOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  date?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ReferenceCountOrderByAggregateInput
  _max?: Prisma.ReferenceMaxOrderByAggregateInput
  _min?: Prisma.ReferenceMinOrderByAggregateInput
}

export type ReferenceScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReferenceScalarWhereWithAggregatesInput | Prisma.ReferenceScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReferenceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReferenceScalarWhereWithAggregatesInput | Prisma.ReferenceScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Reference"> | string
  title?: Prisma.StringWithAggregatesFilter<"Reference"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Reference"> | string | null
  date?: Prisma.DateTimeWithAggregatesFilter<"Reference"> | Date | string
  projectId?: Prisma.StringWithAggregatesFilter<"Reference"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Reference"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Reference"> | Date | string
}

export type ReferenceCreateInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutReferencesInput
}

export type ReferenceUncheckedCreateInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReferenceUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutReferencesNestedInput
}

export type ReferenceUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReferenceCreateManyInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReferenceUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReferenceUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReferenceListRelationFilter = {
  every?: Prisma.ReferenceWhereInput
  some?: Prisma.ReferenceWhereInput
  none?: Prisma.ReferenceWhereInput
}

export type ReferenceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReferenceCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReferenceMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReferenceMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReferenceCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput> | Prisma.ReferenceCreateWithoutProjectInput[] | Prisma.ReferenceUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReferenceCreateOrConnectWithoutProjectInput | Prisma.ReferenceCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ReferenceCreateManyProjectInputEnvelope
  connect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
}

export type ReferenceUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput> | Prisma.ReferenceCreateWithoutProjectInput[] | Prisma.ReferenceUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReferenceCreateOrConnectWithoutProjectInput | Prisma.ReferenceCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ReferenceCreateManyProjectInputEnvelope
  connect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
}

export type ReferenceUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput> | Prisma.ReferenceCreateWithoutProjectInput[] | Prisma.ReferenceUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReferenceCreateOrConnectWithoutProjectInput | Prisma.ReferenceCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ReferenceUpsertWithWhereUniqueWithoutProjectInput | Prisma.ReferenceUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ReferenceCreateManyProjectInputEnvelope
  set?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  disconnect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  delete?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  connect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  update?: Prisma.ReferenceUpdateWithWhereUniqueWithoutProjectInput | Prisma.ReferenceUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ReferenceUpdateManyWithWhereWithoutProjectInput | Prisma.ReferenceUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ReferenceScalarWhereInput | Prisma.ReferenceScalarWhereInput[]
}

export type ReferenceUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput> | Prisma.ReferenceCreateWithoutProjectInput[] | Prisma.ReferenceUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReferenceCreateOrConnectWithoutProjectInput | Prisma.ReferenceCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ReferenceUpsertWithWhereUniqueWithoutProjectInput | Prisma.ReferenceUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ReferenceCreateManyProjectInputEnvelope
  set?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  disconnect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  delete?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  connect?: Prisma.ReferenceWhereUniqueInput | Prisma.ReferenceWhereUniqueInput[]
  update?: Prisma.ReferenceUpdateWithWhereUniqueWithoutProjectInput | Prisma.ReferenceUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ReferenceUpdateManyWithWhereWithoutProjectInput | Prisma.ReferenceUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ReferenceScalarWhereInput | Prisma.ReferenceScalarWhereInput[]
}

export type ReferenceCreateWithoutProjectInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReferenceUncheckedCreateWithoutProjectInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReferenceCreateOrConnectWithoutProjectInput = {
  where: Prisma.ReferenceWhereUniqueInput
  create: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput>
}

export type ReferenceCreateManyProjectInputEnvelope = {
  data: Prisma.ReferenceCreateManyProjectInput | Prisma.ReferenceCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ReferenceUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ReferenceWhereUniqueInput
  update: Prisma.XOR<Prisma.ReferenceUpdateWithoutProjectInput, Prisma.ReferenceUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ReferenceCreateWithoutProjectInput, Prisma.ReferenceUncheckedCreateWithoutProjectInput>
}

export type ReferenceUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ReferenceWhereUniqueInput
  data: Prisma.XOR<Prisma.ReferenceUpdateWithoutProjectInput, Prisma.ReferenceUncheckedUpdateWithoutProjectInput>
}

export type ReferenceUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ReferenceScalarWhereInput
  data: Prisma.XOR<Prisma.ReferenceUpdateManyMutationInput, Prisma.ReferenceUncheckedUpdateManyWithoutProjectInput>
}

export type ReferenceScalarWhereInput = {
  AND?: Prisma.ReferenceScalarWhereInput | Prisma.ReferenceScalarWhereInput[]
  OR?: Prisma.ReferenceScalarWhereInput[]
  NOT?: Prisma.ReferenceScalarWhereInput | Prisma.ReferenceScalarWhereInput[]
  id?: Prisma.UuidFilter<"Reference"> | string
  title?: Prisma.StringFilter<"Reference"> | string
  description?: Prisma.StringNullableFilter<"Reference"> | string | null
  date?: Prisma.DateTimeFilter<"Reference"> | Date | string
  projectId?: Prisma.StringFilter<"Reference"> | string
  createdAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Reference"> | Date | string
}

export type ReferenceCreateManyProjectInput = {
  id?: string
  title: string
  description?: string | null
  date?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReferenceUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReferenceUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReferenceUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ReferenceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  date?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reference"]>

export type ReferenceSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  date?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reference"]>

export type ReferenceSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  date?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["reference"]>

export type ReferenceSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  date?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ReferenceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "date" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["reference"]>
export type ReferenceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ReferenceIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ReferenceIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $ReferencePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Reference"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string | null
    date: Date
    projectId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["reference"]>
  composites: {}
}

export type ReferenceGetPayload<S extends boolean | null | undefined | ReferenceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReferencePayload, S>

export type ReferenceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReferenceCountAggregateInputType | true
  }

export interface ReferenceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reference'], meta: { name: 'Reference' } }
  /**
   * Find zero or one Reference that matches the filter.
   * @param {ReferenceFindUniqueArgs} args - Arguments to find a Reference
   * @example
   * // Get one Reference
   * const reference = await prisma.reference.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReferenceFindUniqueArgs>(args: Prisma.SelectSubset<T, ReferenceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Reference that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReferenceFindUniqueOrThrowArgs} args - Arguments to find a Reference
   * @example
   * // Get one Reference
   * const reference = await prisma.reference.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReferenceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reference that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceFindFirstArgs} args - Arguments to find a Reference
   * @example
   * // Get one Reference
   * const reference = await prisma.reference.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReferenceFindFirstArgs>(args?: Prisma.SelectSubset<T, ReferenceFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Reference that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceFindFirstOrThrowArgs} args - Arguments to find a Reference
   * @example
   * // Get one Reference
   * const reference = await prisma.reference.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReferenceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more References that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all References
   * const references = await prisma.reference.findMany()
   * 
   * // Get first 10 References
   * const references = await prisma.reference.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const referenceWithIdOnly = await prisma.reference.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReferenceFindManyArgs>(args?: Prisma.SelectSubset<T, ReferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Reference.
   * @param {ReferenceCreateArgs} args - Arguments to create a Reference.
   * @example
   * // Create one Reference
   * const Reference = await prisma.reference.create({
   *   data: {
   *     // ... data to create a Reference
   *   }
   * })
   * 
   */
  create<T extends ReferenceCreateArgs>(args: Prisma.SelectSubset<T, ReferenceCreateArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many References.
   * @param {ReferenceCreateManyArgs} args - Arguments to create many References.
   * @example
   * // Create many References
   * const reference = await prisma.reference.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReferenceCreateManyArgs>(args?: Prisma.SelectSubset<T, ReferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many References and returns the data saved in the database.
   * @param {ReferenceCreateManyAndReturnArgs} args - Arguments to create many References.
   * @example
   * // Create many References
   * const reference = await prisma.reference.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many References and only return the `id`
   * const referenceWithIdOnly = await prisma.reference.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReferenceCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Reference.
   * @param {ReferenceDeleteArgs} args - Arguments to delete one Reference.
   * @example
   * // Delete one Reference
   * const Reference = await prisma.reference.delete({
   *   where: {
   *     // ... filter to delete one Reference
   *   }
   * })
   * 
   */
  delete<T extends ReferenceDeleteArgs>(args: Prisma.SelectSubset<T, ReferenceDeleteArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Reference.
   * @param {ReferenceUpdateArgs} args - Arguments to update one Reference.
   * @example
   * // Update one Reference
   * const reference = await prisma.reference.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReferenceUpdateArgs>(args: Prisma.SelectSubset<T, ReferenceUpdateArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more References.
   * @param {ReferenceDeleteManyArgs} args - Arguments to filter References to delete.
   * @example
   * // Delete a few References
   * const { count } = await prisma.reference.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReferenceDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more References.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many References
   * const reference = await prisma.reference.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReferenceUpdateManyArgs>(args: Prisma.SelectSubset<T, ReferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more References and returns the data updated in the database.
   * @param {ReferenceUpdateManyAndReturnArgs} args - Arguments to update many References.
   * @example
   * // Update many References
   * const reference = await prisma.reference.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more References and only return the `id`
   * const referenceWithIdOnly = await prisma.reference.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReferenceUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Reference.
   * @param {ReferenceUpsertArgs} args - Arguments to update or create a Reference.
   * @example
   * // Update or create a Reference
   * const reference = await prisma.reference.upsert({
   *   create: {
   *     // ... data to create a Reference
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Reference we want to update
   *   }
   * })
   */
  upsert<T extends ReferenceUpsertArgs>(args: Prisma.SelectSubset<T, ReferenceUpsertArgs<ExtArgs>>): Prisma.Prisma__ReferenceClient<runtime.Types.Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of References.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceCountArgs} args - Arguments to filter References to count.
   * @example
   * // Count the number of References
   * const count = await prisma.reference.count({
   *   where: {
   *     // ... the filter for the References we want to count
   *   }
   * })
  **/
  count<T extends ReferenceCountArgs>(
    args?: Prisma.Subset<T, ReferenceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReferenceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Reference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReferenceAggregateArgs>(args: Prisma.Subset<T, ReferenceAggregateArgs>): Prisma.PrismaPromise<GetReferenceAggregateType<T>>

  /**
   * Group by Reference.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReferenceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReferenceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReferenceGroupByArgs['orderBy'] }
      : { orderBy?: ReferenceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Reference model
 */
readonly fields: ReferenceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Reference.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReferenceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Reference model
 */
export interface ReferenceFieldRefs {
  readonly id: Prisma.FieldRef<"Reference", 'String'>
  readonly title: Prisma.FieldRef<"Reference", 'String'>
  readonly description: Prisma.FieldRef<"Reference", 'String'>
  readonly date: Prisma.FieldRef<"Reference", 'DateTime'>
  readonly projectId: Prisma.FieldRef<"Reference", 'String'>
  readonly createdAt: Prisma.FieldRef<"Reference", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Reference", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Reference findUnique
 */
export type ReferenceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter, which Reference to fetch.
   */
  where: Prisma.ReferenceWhereUniqueInput
}

/**
 * Reference findUniqueOrThrow
 */
export type ReferenceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter, which Reference to fetch.
   */
  where: Prisma.ReferenceWhereUniqueInput
}

/**
 * Reference findFirst
 */
export type ReferenceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter, which Reference to fetch.
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of References to fetch.
   */
  orderBy?: Prisma.ReferenceOrderByWithRelationInput | Prisma.ReferenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for References.
   */
  cursor?: Prisma.ReferenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` References from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` References.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of References.
   */
  distinct?: Prisma.ReferenceScalarFieldEnum | Prisma.ReferenceScalarFieldEnum[]
}

/**
 * Reference findFirstOrThrow
 */
export type ReferenceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter, which Reference to fetch.
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of References to fetch.
   */
  orderBy?: Prisma.ReferenceOrderByWithRelationInput | Prisma.ReferenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for References.
   */
  cursor?: Prisma.ReferenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` References from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` References.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of References.
   */
  distinct?: Prisma.ReferenceScalarFieldEnum | Prisma.ReferenceScalarFieldEnum[]
}

/**
 * Reference findMany
 */
export type ReferenceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter, which References to fetch.
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of References to fetch.
   */
  orderBy?: Prisma.ReferenceOrderByWithRelationInput | Prisma.ReferenceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing References.
   */
  cursor?: Prisma.ReferenceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` References from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` References.
   */
  skip?: number
  distinct?: Prisma.ReferenceScalarFieldEnum | Prisma.ReferenceScalarFieldEnum[]
}

/**
 * Reference create
 */
export type ReferenceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * The data needed to create a Reference.
   */
  data: Prisma.XOR<Prisma.ReferenceCreateInput, Prisma.ReferenceUncheckedCreateInput>
}

/**
 * Reference createMany
 */
export type ReferenceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many References.
   */
  data: Prisma.ReferenceCreateManyInput | Prisma.ReferenceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Reference createManyAndReturn
 */
export type ReferenceCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * The data used to create many References.
   */
  data: Prisma.ReferenceCreateManyInput | Prisma.ReferenceCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Reference update
 */
export type ReferenceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * The data needed to update a Reference.
   */
  data: Prisma.XOR<Prisma.ReferenceUpdateInput, Prisma.ReferenceUncheckedUpdateInput>
  /**
   * Choose, which Reference to update.
   */
  where: Prisma.ReferenceWhereUniqueInput
}

/**
 * Reference updateMany
 */
export type ReferenceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update References.
   */
  data: Prisma.XOR<Prisma.ReferenceUpdateManyMutationInput, Prisma.ReferenceUncheckedUpdateManyInput>
  /**
   * Filter which References to update
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * Limit how many References to update.
   */
  limit?: number
}

/**
 * Reference updateManyAndReturn
 */
export type ReferenceUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * The data used to update References.
   */
  data: Prisma.XOR<Prisma.ReferenceUpdateManyMutationInput, Prisma.ReferenceUncheckedUpdateManyInput>
  /**
   * Filter which References to update
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * Limit how many References to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Reference upsert
 */
export type ReferenceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * The filter to search for the Reference to update in case it exists.
   */
  where: Prisma.ReferenceWhereUniqueInput
  /**
   * In case the Reference found by the `where` argument doesn't exist, create a new Reference with this data.
   */
  create: Prisma.XOR<Prisma.ReferenceCreateInput, Prisma.ReferenceUncheckedCreateInput>
  /**
   * In case the Reference was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReferenceUpdateInput, Prisma.ReferenceUncheckedUpdateInput>
}

/**
 * Reference delete
 */
export type ReferenceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
  /**
   * Filter which Reference to delete.
   */
  where: Prisma.ReferenceWhereUniqueInput
}

/**
 * Reference deleteMany
 */
export type ReferenceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which References to delete
   */
  where?: Prisma.ReferenceWhereInput
  /**
   * Limit how many References to delete.
   */
  limit?: number
}

/**
 * Reference without action
 */
export type ReferenceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Reference
   */
  select?: Prisma.ReferenceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Reference
   */
  omit?: Prisma.ReferenceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReferenceInclude<ExtArgs> | null
}
