
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CodeMigration` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model CodeMigration
 * 
 */
export type CodeMigrationModel = runtime.Types.Result.DefaultSelection<Prisma.$CodeMigrationPayload>

export type AggregateCodeMigration = {
  _count: CodeMigrationCountAggregateOutputType | null
  _min: CodeMigrationMinAggregateOutputType | null
  _max: CodeMigrationMaxAggregateOutputType | null
}

export type CodeMigrationMinAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CodeMigrationMaxAggregateOutputType = {
  id: string | null
  name: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CodeMigrationCountAggregateOutputType = {
  id: number
  name: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CodeMigrationMinAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type CodeMigrationMaxAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
}

export type CodeMigrationCountAggregateInputType = {
  id?: true
  name?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CodeMigrationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CodeMigration to aggregate.
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CodeMigrations to fetch.
   */
  orderBy?: Prisma.CodeMigrationOrderByWithRelationInput | Prisma.CodeMigrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CodeMigrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CodeMigrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CodeMigrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CodeMigrations
  **/
  _count?: true | CodeMigrationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CodeMigrationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CodeMigrationMaxAggregateInputType
}

export type GetCodeMigrationAggregateType<T extends CodeMigrationAggregateArgs> = {
      [P in keyof T & keyof AggregateCodeMigration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCodeMigration[P]>
    : Prisma.GetScalarType<T[P], AggregateCodeMigration[P]>
}




export type CodeMigrationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CodeMigrationWhereInput
  orderBy?: Prisma.CodeMigrationOrderByWithAggregationInput | Prisma.CodeMigrationOrderByWithAggregationInput[]
  by: Prisma.CodeMigrationScalarFieldEnum[] | Prisma.CodeMigrationScalarFieldEnum
  having?: Prisma.CodeMigrationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CodeMigrationCountAggregateInputType | true
  _min?: CodeMigrationMinAggregateInputType
  _max?: CodeMigrationMaxAggregateInputType
}

export type CodeMigrationGroupByOutputType = {
  id: string
  name: string
  createdAt: Date
  updatedAt: Date
  _count: CodeMigrationCountAggregateOutputType | null
  _min: CodeMigrationMinAggregateOutputType | null
  _max: CodeMigrationMaxAggregateOutputType | null
}

type GetCodeMigrationGroupByPayload<T extends CodeMigrationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CodeMigrationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CodeMigrationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CodeMigrationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CodeMigrationGroupByOutputType[P]>
      }
    >
  >



export type CodeMigrationWhereInput = {
  AND?: Prisma.CodeMigrationWhereInput | Prisma.CodeMigrationWhereInput[]
  OR?: Prisma.CodeMigrationWhereInput[]
  NOT?: Prisma.CodeMigrationWhereInput | Prisma.CodeMigrationWhereInput[]
  id?: Prisma.StringFilter<"CodeMigration"> | string
  name?: Prisma.StringFilter<"CodeMigration"> | string
  createdAt?: Prisma.DateTimeFilter<"CodeMigration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CodeMigration"> | Date | string
}

export type CodeMigrationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CodeMigrationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.CodeMigrationWhereInput | Prisma.CodeMigrationWhereInput[]
  OR?: Prisma.CodeMigrationWhereInput[]
  NOT?: Prisma.CodeMigrationWhereInput | Prisma.CodeMigrationWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"CodeMigration"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CodeMigration"> | Date | string
}, "id" | "name">

export type CodeMigrationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CodeMigrationCountOrderByAggregateInput
  _max?: Prisma.CodeMigrationMaxOrderByAggregateInput
  _min?: Prisma.CodeMigrationMinOrderByAggregateInput
}

export type CodeMigrationScalarWhereWithAggregatesInput = {
  AND?: Prisma.CodeMigrationScalarWhereWithAggregatesInput | Prisma.CodeMigrationScalarWhereWithAggregatesInput[]
  OR?: Prisma.CodeMigrationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CodeMigrationScalarWhereWithAggregatesInput | Prisma.CodeMigrationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CodeMigration"> | string
  name?: Prisma.StringWithAggregatesFilter<"CodeMigration"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CodeMigration"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CodeMigration"> | Date | string
}

export type CodeMigrationCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CodeMigrationUncheckedCreateInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CodeMigrationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CodeMigrationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CodeMigrationCreateManyInput = {
  id?: string
  name: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CodeMigrationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CodeMigrationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CodeMigrationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CodeMigrationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CodeMigrationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}



export type CodeMigrationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["codeMigration"]>

export type CodeMigrationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["codeMigration"]>

export type CodeMigrationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["codeMigration"]>

export type CodeMigrationSelectScalar = {
  id?: boolean
  name?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CodeMigrationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["codeMigration"]>

export type $CodeMigrationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CodeMigration"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["codeMigration"]>
  composites: {}
}

export type CodeMigrationGetPayload<S extends boolean | null | undefined | CodeMigrationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload, S>

export type CodeMigrationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CodeMigrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CodeMigrationCountAggregateInputType | true
  }

export interface CodeMigrationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodeMigration'], meta: { name: 'CodeMigration' } }
  /**
   * Find zero or one CodeMigration that matches the filter.
   * @param {CodeMigrationFindUniqueArgs} args - Arguments to find a CodeMigration
   * @example
   * // Get one CodeMigration
   * const codeMigration = await prisma.codeMigration.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CodeMigrationFindUniqueArgs>(args: Prisma.SelectSubset<T, CodeMigrationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CodeMigration that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CodeMigrationFindUniqueOrThrowArgs} args - Arguments to find a CodeMigration
   * @example
   * // Get one CodeMigration
   * const codeMigration = await prisma.codeMigration.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CodeMigrationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CodeMigrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CodeMigration that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationFindFirstArgs} args - Arguments to find a CodeMigration
   * @example
   * // Get one CodeMigration
   * const codeMigration = await prisma.codeMigration.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CodeMigrationFindFirstArgs>(args?: Prisma.SelectSubset<T, CodeMigrationFindFirstArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CodeMigration that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationFindFirstOrThrowArgs} args - Arguments to find a CodeMigration
   * @example
   * // Get one CodeMigration
   * const codeMigration = await prisma.codeMigration.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CodeMigrationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CodeMigrationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CodeMigrations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CodeMigrations
   * const codeMigrations = await prisma.codeMigration.findMany()
   * 
   * // Get first 10 CodeMigrations
   * const codeMigrations = await prisma.codeMigration.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const codeMigrationWithIdOnly = await prisma.codeMigration.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CodeMigrationFindManyArgs>(args?: Prisma.SelectSubset<T, CodeMigrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CodeMigration.
   * @param {CodeMigrationCreateArgs} args - Arguments to create a CodeMigration.
   * @example
   * // Create one CodeMigration
   * const CodeMigration = await prisma.codeMigration.create({
   *   data: {
   *     // ... data to create a CodeMigration
   *   }
   * })
   * 
   */
  create<T extends CodeMigrationCreateArgs>(args: Prisma.SelectSubset<T, CodeMigrationCreateArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CodeMigrations.
   * @param {CodeMigrationCreateManyArgs} args - Arguments to create many CodeMigrations.
   * @example
   * // Create many CodeMigrations
   * const codeMigration = await prisma.codeMigration.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CodeMigrationCreateManyArgs>(args?: Prisma.SelectSubset<T, CodeMigrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CodeMigrations and returns the data saved in the database.
   * @param {CodeMigrationCreateManyAndReturnArgs} args - Arguments to create many CodeMigrations.
   * @example
   * // Create many CodeMigrations
   * const codeMigration = await prisma.codeMigration.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CodeMigrations and only return the `id`
   * const codeMigrationWithIdOnly = await prisma.codeMigration.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CodeMigrationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CodeMigrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CodeMigration.
   * @param {CodeMigrationDeleteArgs} args - Arguments to delete one CodeMigration.
   * @example
   * // Delete one CodeMigration
   * const CodeMigration = await prisma.codeMigration.delete({
   *   where: {
   *     // ... filter to delete one CodeMigration
   *   }
   * })
   * 
   */
  delete<T extends CodeMigrationDeleteArgs>(args: Prisma.SelectSubset<T, CodeMigrationDeleteArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CodeMigration.
   * @param {CodeMigrationUpdateArgs} args - Arguments to update one CodeMigration.
   * @example
   * // Update one CodeMigration
   * const codeMigration = await prisma.codeMigration.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CodeMigrationUpdateArgs>(args: Prisma.SelectSubset<T, CodeMigrationUpdateArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CodeMigrations.
   * @param {CodeMigrationDeleteManyArgs} args - Arguments to filter CodeMigrations to delete.
   * @example
   * // Delete a few CodeMigrations
   * const { count } = await prisma.codeMigration.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CodeMigrationDeleteManyArgs>(args?: Prisma.SelectSubset<T, CodeMigrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CodeMigrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CodeMigrations
   * const codeMigration = await prisma.codeMigration.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CodeMigrationUpdateManyArgs>(args: Prisma.SelectSubset<T, CodeMigrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CodeMigrations and returns the data updated in the database.
   * @param {CodeMigrationUpdateManyAndReturnArgs} args - Arguments to update many CodeMigrations.
   * @example
   * // Update many CodeMigrations
   * const codeMigration = await prisma.codeMigration.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CodeMigrations and only return the `id`
   * const codeMigrationWithIdOnly = await prisma.codeMigration.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CodeMigrationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CodeMigrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CodeMigration.
   * @param {CodeMigrationUpsertArgs} args - Arguments to update or create a CodeMigration.
   * @example
   * // Update or create a CodeMigration
   * const codeMigration = await prisma.codeMigration.upsert({
   *   create: {
   *     // ... data to create a CodeMigration
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CodeMigration we want to update
   *   }
   * })
   */
  upsert<T extends CodeMigrationUpsertArgs>(args: Prisma.SelectSubset<T, CodeMigrationUpsertArgs<ExtArgs>>): Prisma.Prisma__CodeMigrationClient<runtime.Types.Result.GetResult<Prisma.$CodeMigrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CodeMigrations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationCountArgs} args - Arguments to filter CodeMigrations to count.
   * @example
   * // Count the number of CodeMigrations
   * const count = await prisma.codeMigration.count({
   *   where: {
   *     // ... the filter for the CodeMigrations we want to count
   *   }
   * })
  **/
  count<T extends CodeMigrationCountArgs>(
    args?: Prisma.Subset<T, CodeMigrationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CodeMigrationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CodeMigration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CodeMigrationAggregateArgs>(args: Prisma.Subset<T, CodeMigrationAggregateArgs>): Prisma.PrismaPromise<GetCodeMigrationAggregateType<T>>

  /**
   * Group by CodeMigration.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CodeMigrationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CodeMigrationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CodeMigrationGroupByArgs['orderBy'] }
      : { orderBy?: CodeMigrationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CodeMigrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodeMigrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CodeMigration model
 */
readonly fields: CodeMigrationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CodeMigration.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CodeMigrationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CodeMigration model
 */
export interface CodeMigrationFieldRefs {
  readonly id: Prisma.FieldRef<"CodeMigration", 'String'>
  readonly name: Prisma.FieldRef<"CodeMigration", 'String'>
  readonly createdAt: Prisma.FieldRef<"CodeMigration", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CodeMigration", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CodeMigration findUnique
 */
export type CodeMigrationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter, which CodeMigration to fetch.
   */
  where: Prisma.CodeMigrationWhereUniqueInput
}

/**
 * CodeMigration findUniqueOrThrow
 */
export type CodeMigrationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter, which CodeMigration to fetch.
   */
  where: Prisma.CodeMigrationWhereUniqueInput
}

/**
 * CodeMigration findFirst
 */
export type CodeMigrationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter, which CodeMigration to fetch.
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CodeMigrations to fetch.
   */
  orderBy?: Prisma.CodeMigrationOrderByWithRelationInput | Prisma.CodeMigrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CodeMigrations.
   */
  cursor?: Prisma.CodeMigrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CodeMigrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CodeMigrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CodeMigrations.
   */
  distinct?: Prisma.CodeMigrationScalarFieldEnum | Prisma.CodeMigrationScalarFieldEnum[]
}

/**
 * CodeMigration findFirstOrThrow
 */
export type CodeMigrationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter, which CodeMigration to fetch.
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CodeMigrations to fetch.
   */
  orderBy?: Prisma.CodeMigrationOrderByWithRelationInput | Prisma.CodeMigrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CodeMigrations.
   */
  cursor?: Prisma.CodeMigrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CodeMigrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CodeMigrations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CodeMigrations.
   */
  distinct?: Prisma.CodeMigrationScalarFieldEnum | Prisma.CodeMigrationScalarFieldEnum[]
}

/**
 * CodeMigration findMany
 */
export type CodeMigrationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter, which CodeMigrations to fetch.
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CodeMigrations to fetch.
   */
  orderBy?: Prisma.CodeMigrationOrderByWithRelationInput | Prisma.CodeMigrationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CodeMigrations.
   */
  cursor?: Prisma.CodeMigrationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CodeMigrations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CodeMigrations.
   */
  skip?: number
  distinct?: Prisma.CodeMigrationScalarFieldEnum | Prisma.CodeMigrationScalarFieldEnum[]
}

/**
 * CodeMigration create
 */
export type CodeMigrationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * The data needed to create a CodeMigration.
   */
  data: Prisma.XOR<Prisma.CodeMigrationCreateInput, Prisma.CodeMigrationUncheckedCreateInput>
}

/**
 * CodeMigration createMany
 */
export type CodeMigrationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CodeMigrations.
   */
  data: Prisma.CodeMigrationCreateManyInput | Prisma.CodeMigrationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CodeMigration createManyAndReturn
 */
export type CodeMigrationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * The data used to create many CodeMigrations.
   */
  data: Prisma.CodeMigrationCreateManyInput | Prisma.CodeMigrationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CodeMigration update
 */
export type CodeMigrationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * The data needed to update a CodeMigration.
   */
  data: Prisma.XOR<Prisma.CodeMigrationUpdateInput, Prisma.CodeMigrationUncheckedUpdateInput>
  /**
   * Choose, which CodeMigration to update.
   */
  where: Prisma.CodeMigrationWhereUniqueInput
}

/**
 * CodeMigration updateMany
 */
export type CodeMigrationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CodeMigrations.
   */
  data: Prisma.XOR<Prisma.CodeMigrationUpdateManyMutationInput, Prisma.CodeMigrationUncheckedUpdateManyInput>
  /**
   * Filter which CodeMigrations to update
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * Limit how many CodeMigrations to update.
   */
  limit?: number
}

/**
 * CodeMigration updateManyAndReturn
 */
export type CodeMigrationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * The data used to update CodeMigrations.
   */
  data: Prisma.XOR<Prisma.CodeMigrationUpdateManyMutationInput, Prisma.CodeMigrationUncheckedUpdateManyInput>
  /**
   * Filter which CodeMigrations to update
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * Limit how many CodeMigrations to update.
   */
  limit?: number
}

/**
 * CodeMigration upsert
 */
export type CodeMigrationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * The filter to search for the CodeMigration to update in case it exists.
   */
  where: Prisma.CodeMigrationWhereUniqueInput
  /**
   * In case the CodeMigration found by the `where` argument doesn't exist, create a new CodeMigration with this data.
   */
  create: Prisma.XOR<Prisma.CodeMigrationCreateInput, Prisma.CodeMigrationUncheckedCreateInput>
  /**
   * In case the CodeMigration was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CodeMigrationUpdateInput, Prisma.CodeMigrationUncheckedUpdateInput>
}

/**
 * CodeMigration delete
 */
export type CodeMigrationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
  /**
   * Filter which CodeMigration to delete.
   */
  where: Prisma.CodeMigrationWhereUniqueInput
}

/**
 * CodeMigration deleteMany
 */
export type CodeMigrationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CodeMigrations to delete
   */
  where?: Prisma.CodeMigrationWhereInput
  /**
   * Limit how many CodeMigrations to delete.
   */
  limit?: number
}

/**
 * CodeMigration without action
 */
export type CodeMigrationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CodeMigration
   */
  select?: Prisma.CodeMigrationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CodeMigration
   */
  omit?: Prisma.CodeMigrationOmit<ExtArgs> | null
}
