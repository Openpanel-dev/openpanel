
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ProjectAccess` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ProjectAccess
 * 
 */
export type ProjectAccessModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectAccessPayload>

export type AggregateProjectAccess = {
  _count: ProjectAccessCountAggregateOutputType | null
  _min: ProjectAccessMinAggregateOutputType | null
  _max: ProjectAccessMaxAggregateOutputType | null
}

export type ProjectAccessMinAggregateOutputType = {
  id: string | null
  projectId: string | null
  organizationId: string | null
  userId: string | null
  level: $Enums.AccessLevel | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectAccessMaxAggregateOutputType = {
  id: string | null
  projectId: string | null
  organizationId: string | null
  userId: string | null
  level: $Enums.AccessLevel | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectAccessCountAggregateOutputType = {
  id: number
  projectId: number
  organizationId: number
  userId: number
  level: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectAccessMinAggregateInputType = {
  id?: true
  projectId?: true
  organizationId?: true
  userId?: true
  level?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectAccessMaxAggregateInputType = {
  id?: true
  projectId?: true
  organizationId?: true
  userId?: true
  level?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectAccessCountAggregateInputType = {
  id?: true
  projectId?: true
  organizationId?: true
  userId?: true
  level?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectAccessAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectAccess to aggregate.
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccesses to fetch.
   */
  orderBy?: Prisma.ProjectAccessOrderByWithRelationInput | Prisma.ProjectAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectAccesses
  **/
  _count?: true | ProjectAccessCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectAccessMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectAccessMaxAggregateInputType
}

export type GetProjectAccessAggregateType<T extends ProjectAccessAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectAccess]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectAccess[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectAccess[P]>
}




export type ProjectAccessGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectAccessWhereInput
  orderBy?: Prisma.ProjectAccessOrderByWithAggregationInput | Prisma.ProjectAccessOrderByWithAggregationInput[]
  by: Prisma.ProjectAccessScalarFieldEnum[] | Prisma.ProjectAccessScalarFieldEnum
  having?: Prisma.ProjectAccessScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectAccessCountAggregateInputType | true
  _min?: ProjectAccessMinAggregateInputType
  _max?: ProjectAccessMaxAggregateInputType
}

export type ProjectAccessGroupByOutputType = {
  id: string
  projectId: string
  organizationId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt: Date
  updatedAt: Date
  _count: ProjectAccessCountAggregateOutputType | null
  _min: ProjectAccessMinAggregateOutputType | null
  _max: ProjectAccessMaxAggregateOutputType | null
}

type GetProjectAccessGroupByPayload<T extends ProjectAccessGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectAccessGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectAccessGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectAccessGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectAccessGroupByOutputType[P]>
      }
    >
  >



export type ProjectAccessWhereInput = {
  AND?: Prisma.ProjectAccessWhereInput | Prisma.ProjectAccessWhereInput[]
  OR?: Prisma.ProjectAccessWhereInput[]
  NOT?: Prisma.ProjectAccessWhereInput | Prisma.ProjectAccessWhereInput[]
  id?: Prisma.UuidFilter<"ProjectAccess"> | string
  projectId?: Prisma.StringFilter<"ProjectAccess"> | string
  organizationId?: Prisma.StringFilter<"ProjectAccess"> | string
  userId?: Prisma.StringFilter<"ProjectAccess"> | string
  level?: Prisma.EnumAccessLevelFilter<"ProjectAccess"> | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type ProjectAccessOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type ProjectAccessWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectAccessWhereInput | Prisma.ProjectAccessWhereInput[]
  OR?: Prisma.ProjectAccessWhereInput[]
  NOT?: Prisma.ProjectAccessWhereInput | Prisma.ProjectAccessWhereInput[]
  projectId?: Prisma.StringFilter<"ProjectAccess"> | string
  organizationId?: Prisma.StringFilter<"ProjectAccess"> | string
  userId?: Prisma.StringFilter<"ProjectAccess"> | string
  level?: Prisma.EnumAccessLevelFilter<"ProjectAccess"> | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type ProjectAccessOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectAccessCountOrderByAggregateInput
  _max?: Prisma.ProjectAccessMaxOrderByAggregateInput
  _min?: Prisma.ProjectAccessMinOrderByAggregateInput
}

export type ProjectAccessScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectAccessScalarWhereWithAggregatesInput | Prisma.ProjectAccessScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectAccessScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectAccessScalarWhereWithAggregatesInput | Prisma.ProjectAccessScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"ProjectAccess"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectAccess"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"ProjectAccess"> | string
  userId?: Prisma.StringWithAggregatesFilter<"ProjectAccess"> | string
  level?: Prisma.EnumAccessLevelWithAggregatesFilter<"ProjectAccess"> | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectAccess"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectAccess"> | Date | string
}

export type ProjectAccessCreateInput = {
  id?: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutAccessInput
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectAccessInput
  user: Prisma.UserCreateNestedOneWithoutProjectAccessInput
}

export type ProjectAccessUncheckedCreateInput = {
  id?: string
  projectId: string
  organizationId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutAccessNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectAccessNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectAccessNestedInput
}

export type ProjectAccessUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessCreateManyInput = {
  id?: string
  projectId: string
  organizationId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessListRelationFilter = {
  every?: Prisma.ProjectAccessWhereInput
  some?: Prisma.ProjectAccessWhereInput
  none?: Prisma.ProjectAccessWhereInput
}

export type ProjectAccessOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectAccessCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectAccessMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectAccessMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  level?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectAccessCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectAccessCreateWithoutOrganizationInput[] | Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput | Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ProjectAccessCreateManyOrganizationInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectAccessCreateWithoutOrganizationInput[] | Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput | Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.ProjectAccessCreateManyOrganizationInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectAccessCreateWithoutOrganizationInput[] | Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput | Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ProjectAccessCreateManyOrganizationInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutOrganizationInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type ProjectAccessUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput> | Prisma.ProjectAccessCreateWithoutOrganizationInput[] | Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput | Prisma.ProjectAccessCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.ProjectAccessCreateManyOrganizationInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutOrganizationInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type ProjectAccessCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput> | Prisma.ProjectAccessCreateWithoutUserInput[] | Prisma.ProjectAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutUserInput | Prisma.ProjectAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProjectAccessCreateManyUserInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput> | Prisma.ProjectAccessCreateWithoutUserInput[] | Prisma.ProjectAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutUserInput | Prisma.ProjectAccessCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProjectAccessCreateManyUserInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput> | Prisma.ProjectAccessCreateWithoutUserInput[] | Prisma.ProjectAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutUserInput | Prisma.ProjectAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProjectAccessCreateManyUserInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutUserInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type ProjectAccessUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput> | Prisma.ProjectAccessCreateWithoutUserInput[] | Prisma.ProjectAccessUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutUserInput | Prisma.ProjectAccessCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutUserInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProjectAccessCreateManyUserInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutUserInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutUserInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type ProjectAccessCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccessCreateWithoutProjectInput[] | Prisma.ProjectAccessUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutProjectInput | Prisma.ProjectAccessCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectAccessCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccessCreateWithoutProjectInput[] | Prisma.ProjectAccessUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutProjectInput | Prisma.ProjectAccessCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectAccessCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
}

export type ProjectAccessUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccessCreateWithoutProjectInput[] | Prisma.ProjectAccessUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutProjectInput | Prisma.ProjectAccessCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectAccessCreateManyProjectInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type ProjectAccessUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput> | Prisma.ProjectAccessCreateWithoutProjectInput[] | Prisma.ProjectAccessUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectAccessCreateOrConnectWithoutProjectInput | Prisma.ProjectAccessCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectAccessUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccessUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectAccessCreateManyProjectInputEnvelope
  set?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  disconnect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  delete?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  connect?: Prisma.ProjectAccessWhereUniqueInput | Prisma.ProjectAccessWhereUniqueInput[]
  update?: Prisma.ProjectAccessUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectAccessUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectAccessUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectAccessUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
}

export type EnumAccessLevelFieldUpdateOperationsInput = {
  set?: $Enums.AccessLevel
}

export type ProjectAccessCreateWithoutOrganizationInput = {
  id?: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutAccessInput
  user: Prisma.UserCreateNestedOneWithoutProjectAccessInput
}

export type ProjectAccessUncheckedCreateWithoutOrganizationInput = {
  id?: string
  projectId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput>
}

export type ProjectAccessCreateManyOrganizationInputEnvelope = {
  data: Prisma.ProjectAccessCreateManyOrganizationInput | Prisma.ProjectAccessCreateManyOrganizationInput[]
  skipDuplicates?: boolean
}

export type ProjectAccessUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedCreateWithoutOrganizationInput>
}

export type ProjectAccessUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutOrganizationInput, Prisma.ProjectAccessUncheckedUpdateWithoutOrganizationInput>
}

export type ProjectAccessUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.ProjectAccessScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateManyMutationInput, Prisma.ProjectAccessUncheckedUpdateManyWithoutOrganizationInput>
}

export type ProjectAccessScalarWhereInput = {
  AND?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
  OR?: Prisma.ProjectAccessScalarWhereInput[]
  NOT?: Prisma.ProjectAccessScalarWhereInput | Prisma.ProjectAccessScalarWhereInput[]
  id?: Prisma.UuidFilter<"ProjectAccess"> | string
  projectId?: Prisma.StringFilter<"ProjectAccess"> | string
  organizationId?: Prisma.StringFilter<"ProjectAccess"> | string
  userId?: Prisma.StringFilter<"ProjectAccess"> | string
  level?: Prisma.EnumAccessLevelFilter<"ProjectAccess"> | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectAccess"> | Date | string
}

export type ProjectAccessCreateWithoutUserInput = {
  id?: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutAccessInput
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectAccessInput
}

export type ProjectAccessUncheckedCreateWithoutUserInput = {
  id?: string
  projectId: string
  organizationId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessCreateOrConnectWithoutUserInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput>
}

export type ProjectAccessCreateManyUserInputEnvelope = {
  data: Prisma.ProjectAccessCreateManyUserInput | Prisma.ProjectAccessCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ProjectAccessUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutUserInput, Prisma.ProjectAccessUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutUserInput, Prisma.ProjectAccessUncheckedCreateWithoutUserInput>
}

export type ProjectAccessUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutUserInput, Prisma.ProjectAccessUncheckedUpdateWithoutUserInput>
}

export type ProjectAccessUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProjectAccessScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateManyMutationInput, Prisma.ProjectAccessUncheckedUpdateManyWithoutUserInput>
}

export type ProjectAccessCreateWithoutProjectInput = {
  id?: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutProjectAccessInput
  user: Prisma.UserCreateNestedOneWithoutProjectAccessInput
}

export type ProjectAccessUncheckedCreateWithoutProjectInput = {
  id?: string
  organizationId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput>
}

export type ProjectAccessCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectAccessCreateManyProjectInput | Prisma.ProjectAccessCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectAccessUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutProjectInput, Prisma.ProjectAccessUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectAccessCreateWithoutProjectInput, Prisma.ProjectAccessUncheckedCreateWithoutProjectInput>
}

export type ProjectAccessUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectAccessWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateWithoutProjectInput, Prisma.ProjectAccessUncheckedUpdateWithoutProjectInput>
}

export type ProjectAccessUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectAccessScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectAccessUpdateManyMutationInput, Prisma.ProjectAccessUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectAccessCreateManyOrganizationInput = {
  id?: string
  projectId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutAccessNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectAccessNestedInput
}

export type ProjectAccessUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessCreateManyUserInput = {
  id?: string
  projectId: string
  organizationId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutAccessNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectAccessNestedInput
}

export type ProjectAccessUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessCreateManyProjectInput = {
  id?: string
  organizationId: string
  userId: string
  level: $Enums.AccessLevel
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectAccessUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutProjectAccessNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutProjectAccessNestedInput
}

export type ProjectAccessUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectAccessUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.EnumAccessLevelFieldUpdateOperationsInput | $Enums.AccessLevel
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProjectAccessSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  organizationId?: boolean
  userId?: boolean
  level?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccess"]>

export type ProjectAccessSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  organizationId?: boolean
  userId?: boolean
  level?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccess"]>

export type ProjectAccessSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  organizationId?: boolean
  userId?: boolean
  level?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectAccess"]>

export type ProjectAccessSelectScalar = {
  id?: boolean
  projectId?: boolean
  organizationId?: boolean
  userId?: boolean
  level?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectAccessOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "projectId" | "organizationId" | "userId" | "level" | "createdAt" | "updatedAt", ExtArgs["result"]["projectAccess"]>
export type ProjectAccessInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProjectAccessIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProjectAccessIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProjectAccessPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectAccess"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    projectId: string
    organizationId: string
    userId: string
    level: $Enums.AccessLevel
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["projectAccess"]>
  composites: {}
}

export type ProjectAccessGetPayload<S extends boolean | null | undefined | ProjectAccessDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload, S>

export type ProjectAccessCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectAccessCountAggregateInputType | true
  }

export interface ProjectAccessDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectAccess'], meta: { name: 'ProjectAccess' } }
  /**
   * Find zero or one ProjectAccess that matches the filter.
   * @param {ProjectAccessFindUniqueArgs} args - Arguments to find a ProjectAccess
   * @example
   * // Get one ProjectAccess
   * const projectAccess = await prisma.projectAccess.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectAccessFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectAccessFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectAccess that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectAccessFindUniqueOrThrowArgs} args - Arguments to find a ProjectAccess
   * @example
   * // Get one ProjectAccess
   * const projectAccess = await prisma.projectAccess.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectAccessFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectAccess that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessFindFirstArgs} args - Arguments to find a ProjectAccess
   * @example
   * // Get one ProjectAccess
   * const projectAccess = await prisma.projectAccess.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectAccessFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectAccessFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectAccess that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessFindFirstOrThrowArgs} args - Arguments to find a ProjectAccess
   * @example
   * // Get one ProjectAccess
   * const projectAccess = await prisma.projectAccess.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectAccessFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectAccesses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectAccesses
   * const projectAccesses = await prisma.projectAccess.findMany()
   * 
   * // Get first 10 ProjectAccesses
   * const projectAccesses = await prisma.projectAccess.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectAccessWithIdOnly = await prisma.projectAccess.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectAccessFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectAccess.
   * @param {ProjectAccessCreateArgs} args - Arguments to create a ProjectAccess.
   * @example
   * // Create one ProjectAccess
   * const ProjectAccess = await prisma.projectAccess.create({
   *   data: {
   *     // ... data to create a ProjectAccess
   *   }
   * })
   * 
   */
  create<T extends ProjectAccessCreateArgs>(args: Prisma.SelectSubset<T, ProjectAccessCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectAccesses.
   * @param {ProjectAccessCreateManyArgs} args - Arguments to create many ProjectAccesses.
   * @example
   * // Create many ProjectAccesses
   * const projectAccess = await prisma.projectAccess.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectAccessCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectAccesses and returns the data saved in the database.
   * @param {ProjectAccessCreateManyAndReturnArgs} args - Arguments to create many ProjectAccesses.
   * @example
   * // Create many ProjectAccesses
   * const projectAccess = await prisma.projectAccess.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectAccesses and only return the `id`
   * const projectAccessWithIdOnly = await prisma.projectAccess.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectAccessCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectAccess.
   * @param {ProjectAccessDeleteArgs} args - Arguments to delete one ProjectAccess.
   * @example
   * // Delete one ProjectAccess
   * const ProjectAccess = await prisma.projectAccess.delete({
   *   where: {
   *     // ... filter to delete one ProjectAccess
   *   }
   * })
   * 
   */
  delete<T extends ProjectAccessDeleteArgs>(args: Prisma.SelectSubset<T, ProjectAccessDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectAccess.
   * @param {ProjectAccessUpdateArgs} args - Arguments to update one ProjectAccess.
   * @example
   * // Update one ProjectAccess
   * const projectAccess = await prisma.projectAccess.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectAccessUpdateArgs>(args: Prisma.SelectSubset<T, ProjectAccessUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectAccesses.
   * @param {ProjectAccessDeleteManyArgs} args - Arguments to filter ProjectAccesses to delete.
   * @example
   * // Delete a few ProjectAccesses
   * const { count } = await prisma.projectAccess.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectAccessDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectAccesses
   * const projectAccess = await prisma.projectAccess.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectAccessUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectAccesses and returns the data updated in the database.
   * @param {ProjectAccessUpdateManyAndReturnArgs} args - Arguments to update many ProjectAccesses.
   * @example
   * // Update many ProjectAccesses
   * const projectAccess = await prisma.projectAccess.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectAccesses and only return the `id`
   * const projectAccessWithIdOnly = await prisma.projectAccess.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectAccessUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectAccess.
   * @param {ProjectAccessUpsertArgs} args - Arguments to update or create a ProjectAccess.
   * @example
   * // Update or create a ProjectAccess
   * const projectAccess = await prisma.projectAccess.upsert({
   *   create: {
   *     // ... data to create a ProjectAccess
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectAccess we want to update
   *   }
   * })
   */
  upsert<T extends ProjectAccessUpsertArgs>(args: Prisma.SelectSubset<T, ProjectAccessUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectAccessClient<runtime.Types.Result.GetResult<Prisma.$ProjectAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectAccesses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessCountArgs} args - Arguments to filter ProjectAccesses to count.
   * @example
   * // Count the number of ProjectAccesses
   * const count = await prisma.projectAccess.count({
   *   where: {
   *     // ... the filter for the ProjectAccesses we want to count
   *   }
   * })
  **/
  count<T extends ProjectAccessCountArgs>(
    args?: Prisma.Subset<T, ProjectAccessCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectAccessCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectAccessAggregateArgs>(args: Prisma.Subset<T, ProjectAccessAggregateArgs>): Prisma.PrismaPromise<GetProjectAccessAggregateType<T>>

  /**
   * Group by ProjectAccess.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectAccessGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectAccessGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectAccessGroupByArgs['orderBy'] }
      : { orderBy?: ProjectAccessGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectAccess model
 */
readonly fields: ProjectAccessFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectAccess.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectAccessClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectAccess model
 */
export interface ProjectAccessFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectAccess", 'String'>
  readonly projectId: Prisma.FieldRef<"ProjectAccess", 'String'>
  readonly organizationId: Prisma.FieldRef<"ProjectAccess", 'String'>
  readonly userId: Prisma.FieldRef<"ProjectAccess", 'String'>
  readonly level: Prisma.FieldRef<"ProjectAccess", 'AccessLevel'>
  readonly createdAt: Prisma.FieldRef<"ProjectAccess", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProjectAccess", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProjectAccess findUnique
 */
export type ProjectAccessFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccess to fetch.
   */
  where: Prisma.ProjectAccessWhereUniqueInput
}

/**
 * ProjectAccess findUniqueOrThrow
 */
export type ProjectAccessFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccess to fetch.
   */
  where: Prisma.ProjectAccessWhereUniqueInput
}

/**
 * ProjectAccess findFirst
 */
export type ProjectAccessFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccess to fetch.
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccesses to fetch.
   */
  orderBy?: Prisma.ProjectAccessOrderByWithRelationInput | Prisma.ProjectAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectAccesses.
   */
  cursor?: Prisma.ProjectAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectAccesses.
   */
  distinct?: Prisma.ProjectAccessScalarFieldEnum | Prisma.ProjectAccessScalarFieldEnum[]
}

/**
 * ProjectAccess findFirstOrThrow
 */
export type ProjectAccessFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccess to fetch.
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccesses to fetch.
   */
  orderBy?: Prisma.ProjectAccessOrderByWithRelationInput | Prisma.ProjectAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectAccesses.
   */
  cursor?: Prisma.ProjectAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccesses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectAccesses.
   */
  distinct?: Prisma.ProjectAccessScalarFieldEnum | Prisma.ProjectAccessScalarFieldEnum[]
}

/**
 * ProjectAccess findMany
 */
export type ProjectAccessFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter, which ProjectAccesses to fetch.
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectAccesses to fetch.
   */
  orderBy?: Prisma.ProjectAccessOrderByWithRelationInput | Prisma.ProjectAccessOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectAccesses.
   */
  cursor?: Prisma.ProjectAccessWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectAccesses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectAccesses.
   */
  skip?: number
  distinct?: Prisma.ProjectAccessScalarFieldEnum | Prisma.ProjectAccessScalarFieldEnum[]
}

/**
 * ProjectAccess create
 */
export type ProjectAccessCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectAccess.
   */
  data: Prisma.XOR<Prisma.ProjectAccessCreateInput, Prisma.ProjectAccessUncheckedCreateInput>
}

/**
 * ProjectAccess createMany
 */
export type ProjectAccessCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectAccesses.
   */
  data: Prisma.ProjectAccessCreateManyInput | Prisma.ProjectAccessCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectAccess createManyAndReturn
 */
export type ProjectAccessCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectAccesses.
   */
  data: Prisma.ProjectAccessCreateManyInput | Prisma.ProjectAccessCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectAccess update
 */
export type ProjectAccessUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectAccess.
   */
  data: Prisma.XOR<Prisma.ProjectAccessUpdateInput, Prisma.ProjectAccessUncheckedUpdateInput>
  /**
   * Choose, which ProjectAccess to update.
   */
  where: Prisma.ProjectAccessWhereUniqueInput
}

/**
 * ProjectAccess updateMany
 */
export type ProjectAccessUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectAccesses.
   */
  data: Prisma.XOR<Prisma.ProjectAccessUpdateManyMutationInput, Prisma.ProjectAccessUncheckedUpdateManyInput>
  /**
   * Filter which ProjectAccesses to update
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * Limit how many ProjectAccesses to update.
   */
  limit?: number
}

/**
 * ProjectAccess updateManyAndReturn
 */
export type ProjectAccessUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * The data used to update ProjectAccesses.
   */
  data: Prisma.XOR<Prisma.ProjectAccessUpdateManyMutationInput, Prisma.ProjectAccessUncheckedUpdateManyInput>
  /**
   * Filter which ProjectAccesses to update
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * Limit how many ProjectAccesses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectAccess upsert
 */
export type ProjectAccessUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectAccess to update in case it exists.
   */
  where: Prisma.ProjectAccessWhereUniqueInput
  /**
   * In case the ProjectAccess found by the `where` argument doesn't exist, create a new ProjectAccess with this data.
   */
  create: Prisma.XOR<Prisma.ProjectAccessCreateInput, Prisma.ProjectAccessUncheckedCreateInput>
  /**
   * In case the ProjectAccess was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectAccessUpdateInput, Prisma.ProjectAccessUncheckedUpdateInput>
}

/**
 * ProjectAccess delete
 */
export type ProjectAccessDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
  /**
   * Filter which ProjectAccess to delete.
   */
  where: Prisma.ProjectAccessWhereUniqueInput
}

/**
 * ProjectAccess deleteMany
 */
export type ProjectAccessDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectAccesses to delete
   */
  where?: Prisma.ProjectAccessWhereInput
  /**
   * Limit how many ProjectAccesses to delete.
   */
  limit?: number
}

/**
 * ProjectAccess without action
 */
export type ProjectAccessDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectAccess
   */
  select?: Prisma.ProjectAccessSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectAccess
   */
  omit?: Prisma.ProjectAccessOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectAccessInclude<ExtArgs> | null
}
