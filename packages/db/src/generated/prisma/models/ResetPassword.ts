
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ResetPassword` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ResetPassword
 * 
 */
export type ResetPasswordModel = runtime.Types.Result.DefaultSelection<Prisma.$ResetPasswordPayload>

export type AggregateResetPassword = {
  _count: ResetPasswordCountAggregateOutputType | null
  _min: ResetPasswordMinAggregateOutputType | null
  _max: ResetPasswordMaxAggregateOutputType | null
}

export type ResetPasswordMinAggregateOutputType = {
  id: string | null
  accountId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ResetPasswordMaxAggregateOutputType = {
  id: string | null
  accountId: string | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ResetPasswordCountAggregateOutputType = {
  id: number
  accountId: number
  expiresAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ResetPasswordMinAggregateInputType = {
  id?: true
  accountId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ResetPasswordMaxAggregateInputType = {
  id?: true
  accountId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ResetPasswordCountAggregateInputType = {
  id?: true
  accountId?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ResetPasswordAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ResetPassword to aggregate.
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResetPasswords to fetch.
   */
  orderBy?: Prisma.ResetPasswordOrderByWithRelationInput | Prisma.ResetPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ResetPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResetPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResetPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ResetPasswords
  **/
  _count?: true | ResetPasswordCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ResetPasswordMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ResetPasswordMaxAggregateInputType
}

export type GetResetPasswordAggregateType<T extends ResetPasswordAggregateArgs> = {
      [P in keyof T & keyof AggregateResetPassword]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateResetPassword[P]>
    : Prisma.GetScalarType<T[P], AggregateResetPassword[P]>
}




export type ResetPasswordGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ResetPasswordWhereInput
  orderBy?: Prisma.ResetPasswordOrderByWithAggregationInput | Prisma.ResetPasswordOrderByWithAggregationInput[]
  by: Prisma.ResetPasswordScalarFieldEnum[] | Prisma.ResetPasswordScalarFieldEnum
  having?: Prisma.ResetPasswordScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ResetPasswordCountAggregateInputType | true
  _min?: ResetPasswordMinAggregateInputType
  _max?: ResetPasswordMaxAggregateInputType
}

export type ResetPasswordGroupByOutputType = {
  id: string
  accountId: string
  expiresAt: Date
  createdAt: Date
  updatedAt: Date
  _count: ResetPasswordCountAggregateOutputType | null
  _min: ResetPasswordMinAggregateOutputType | null
  _max: ResetPasswordMaxAggregateOutputType | null
}

type GetResetPasswordGroupByPayload<T extends ResetPasswordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ResetPasswordGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ResetPasswordGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ResetPasswordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ResetPasswordGroupByOutputType[P]>
      }
    >
  >



export type ResetPasswordWhereInput = {
  AND?: Prisma.ResetPasswordWhereInput | Prisma.ResetPasswordWhereInput[]
  OR?: Prisma.ResetPasswordWhereInput[]
  NOT?: Prisma.ResetPasswordWhereInput | Prisma.ResetPasswordWhereInput[]
  id?: Prisma.StringFilter<"ResetPassword"> | string
  accountId?: Prisma.StringFilter<"ResetPassword"> | string
  expiresAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}

export type ResetPasswordOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  account?: Prisma.AccountOrderByWithRelationInput
}

export type ResetPasswordWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ResetPasswordWhereInput | Prisma.ResetPasswordWhereInput[]
  OR?: Prisma.ResetPasswordWhereInput[]
  NOT?: Prisma.ResetPasswordWhereInput | Prisma.ResetPasswordWhereInput[]
  accountId?: Prisma.StringFilter<"ResetPassword"> | string
  expiresAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  account?: Prisma.XOR<Prisma.AccountScalarRelationFilter, Prisma.AccountWhereInput>
}, "id">

export type ResetPasswordOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ResetPasswordCountOrderByAggregateInput
  _max?: Prisma.ResetPasswordMaxOrderByAggregateInput
  _min?: Prisma.ResetPasswordMinOrderByAggregateInput
}

export type ResetPasswordScalarWhereWithAggregatesInput = {
  AND?: Prisma.ResetPasswordScalarWhereWithAggregatesInput | Prisma.ResetPasswordScalarWhereWithAggregatesInput[]
  OR?: Prisma.ResetPasswordScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ResetPasswordScalarWhereWithAggregatesInput | Prisma.ResetPasswordScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ResetPassword"> | string
  accountId?: Prisma.StringWithAggregatesFilter<"ResetPassword"> | string
  expiresAt?: Prisma.DateTimeWithAggregatesFilter<"ResetPassword"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ResetPassword"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ResetPassword"> | Date | string
}

export type ResetPasswordCreateInput = {
  id: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  account: Prisma.AccountCreateNestedOneWithoutResetPasswordsInput
}

export type ResetPasswordUncheckedCreateInput = {
  id: string
  accountId: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResetPasswordUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  account?: Prisma.AccountUpdateOneRequiredWithoutResetPasswordsNestedInput
}

export type ResetPasswordUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResetPasswordCreateManyInput = {
  id: string
  accountId: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResetPasswordUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResetPasswordUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  accountId?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResetPasswordListRelationFilter = {
  every?: Prisma.ResetPasswordWhereInput
  some?: Prisma.ResetPasswordWhereInput
  none?: Prisma.ResetPasswordWhereInput
}

export type ResetPasswordOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ResetPasswordCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResetPasswordMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResetPasswordMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ResetPasswordCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput> | Prisma.ResetPasswordCreateWithoutAccountInput[] | Prisma.ResetPasswordUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ResetPasswordCreateOrConnectWithoutAccountInput | Prisma.ResetPasswordCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.ResetPasswordCreateManyAccountInputEnvelope
  connect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
}

export type ResetPasswordUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput> | Prisma.ResetPasswordCreateWithoutAccountInput[] | Prisma.ResetPasswordUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ResetPasswordCreateOrConnectWithoutAccountInput | Prisma.ResetPasswordCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.ResetPasswordCreateManyAccountInputEnvelope
  connect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
}

export type ResetPasswordUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput> | Prisma.ResetPasswordCreateWithoutAccountInput[] | Prisma.ResetPasswordUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ResetPasswordCreateOrConnectWithoutAccountInput | Prisma.ResetPasswordCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.ResetPasswordUpsertWithWhereUniqueWithoutAccountInput | Prisma.ResetPasswordUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.ResetPasswordCreateManyAccountInputEnvelope
  set?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  disconnect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  delete?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  connect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  update?: Prisma.ResetPasswordUpdateWithWhereUniqueWithoutAccountInput | Prisma.ResetPasswordUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.ResetPasswordUpdateManyWithWhereWithoutAccountInput | Prisma.ResetPasswordUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.ResetPasswordScalarWhereInput | Prisma.ResetPasswordScalarWhereInput[]
}

export type ResetPasswordUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput> | Prisma.ResetPasswordCreateWithoutAccountInput[] | Prisma.ResetPasswordUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.ResetPasswordCreateOrConnectWithoutAccountInput | Prisma.ResetPasswordCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.ResetPasswordUpsertWithWhereUniqueWithoutAccountInput | Prisma.ResetPasswordUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.ResetPasswordCreateManyAccountInputEnvelope
  set?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  disconnect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  delete?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  connect?: Prisma.ResetPasswordWhereUniqueInput | Prisma.ResetPasswordWhereUniqueInput[]
  update?: Prisma.ResetPasswordUpdateWithWhereUniqueWithoutAccountInput | Prisma.ResetPasswordUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.ResetPasswordUpdateManyWithWhereWithoutAccountInput | Prisma.ResetPasswordUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.ResetPasswordScalarWhereInput | Prisma.ResetPasswordScalarWhereInput[]
}

export type ResetPasswordCreateWithoutAccountInput = {
  id: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResetPasswordUncheckedCreateWithoutAccountInput = {
  id: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResetPasswordCreateOrConnectWithoutAccountInput = {
  where: Prisma.ResetPasswordWhereUniqueInput
  create: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput>
}

export type ResetPasswordCreateManyAccountInputEnvelope = {
  data: Prisma.ResetPasswordCreateManyAccountInput | Prisma.ResetPasswordCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type ResetPasswordUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.ResetPasswordWhereUniqueInput
  update: Prisma.XOR<Prisma.ResetPasswordUpdateWithoutAccountInput, Prisma.ResetPasswordUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.ResetPasswordCreateWithoutAccountInput, Prisma.ResetPasswordUncheckedCreateWithoutAccountInput>
}

export type ResetPasswordUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.ResetPasswordWhereUniqueInput
  data: Prisma.XOR<Prisma.ResetPasswordUpdateWithoutAccountInput, Prisma.ResetPasswordUncheckedUpdateWithoutAccountInput>
}

export type ResetPasswordUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.ResetPasswordScalarWhereInput
  data: Prisma.XOR<Prisma.ResetPasswordUpdateManyMutationInput, Prisma.ResetPasswordUncheckedUpdateManyWithoutAccountInput>
}

export type ResetPasswordScalarWhereInput = {
  AND?: Prisma.ResetPasswordScalarWhereInput | Prisma.ResetPasswordScalarWhereInput[]
  OR?: Prisma.ResetPasswordScalarWhereInput[]
  NOT?: Prisma.ResetPasswordScalarWhereInput | Prisma.ResetPasswordScalarWhereInput[]
  id?: Prisma.StringFilter<"ResetPassword"> | string
  accountId?: Prisma.StringFilter<"ResetPassword"> | string
  expiresAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ResetPassword"> | Date | string
}

export type ResetPasswordCreateManyAccountInput = {
  id: string
  expiresAt: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ResetPasswordUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResetPasswordUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ResetPasswordUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  expiresAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ResetPasswordSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resetPassword"]>

export type ResetPasswordSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resetPassword"]>

export type ResetPasswordSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  accountId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}, ExtArgs["result"]["resetPassword"]>

export type ResetPasswordSelectScalar = {
  id?: boolean
  accountId?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ResetPasswordOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "accountId" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["resetPassword"]>
export type ResetPasswordInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type ResetPasswordIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}
export type ResetPasswordIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountDefaultArgs<ExtArgs>
}

export type $ResetPasswordPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ResetPassword"
  objects: {
    account: Prisma.$AccountPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    accountId: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["resetPassword"]>
  composites: {}
}

export type ResetPasswordGetPayload<S extends boolean | null | undefined | ResetPasswordDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload, S>

export type ResetPasswordCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ResetPasswordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ResetPasswordCountAggregateInputType | true
  }

export interface ResetPasswordDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResetPassword'], meta: { name: 'ResetPassword' } }
  /**
   * Find zero or one ResetPassword that matches the filter.
   * @param {ResetPasswordFindUniqueArgs} args - Arguments to find a ResetPassword
   * @example
   * // Get one ResetPassword
   * const resetPassword = await prisma.resetPassword.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ResetPasswordFindUniqueArgs>(args: Prisma.SelectSubset<T, ResetPasswordFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ResetPassword that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ResetPasswordFindUniqueOrThrowArgs} args - Arguments to find a ResetPassword
   * @example
   * // Get one ResetPassword
   * const resetPassword = await prisma.resetPassword.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ResetPasswordFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ResetPasswordFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ResetPassword that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordFindFirstArgs} args - Arguments to find a ResetPassword
   * @example
   * // Get one ResetPassword
   * const resetPassword = await prisma.resetPassword.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ResetPasswordFindFirstArgs>(args?: Prisma.SelectSubset<T, ResetPasswordFindFirstArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ResetPassword that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordFindFirstOrThrowArgs} args - Arguments to find a ResetPassword
   * @example
   * // Get one ResetPassword
   * const resetPassword = await prisma.resetPassword.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ResetPasswordFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ResetPasswordFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ResetPasswords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ResetPasswords
   * const resetPasswords = await prisma.resetPassword.findMany()
   * 
   * // Get first 10 ResetPasswords
   * const resetPasswords = await prisma.resetPassword.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const resetPasswordWithIdOnly = await prisma.resetPassword.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ResetPasswordFindManyArgs>(args?: Prisma.SelectSubset<T, ResetPasswordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ResetPassword.
   * @param {ResetPasswordCreateArgs} args - Arguments to create a ResetPassword.
   * @example
   * // Create one ResetPassword
   * const ResetPassword = await prisma.resetPassword.create({
   *   data: {
   *     // ... data to create a ResetPassword
   *   }
   * })
   * 
   */
  create<T extends ResetPasswordCreateArgs>(args: Prisma.SelectSubset<T, ResetPasswordCreateArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ResetPasswords.
   * @param {ResetPasswordCreateManyArgs} args - Arguments to create many ResetPasswords.
   * @example
   * // Create many ResetPasswords
   * const resetPassword = await prisma.resetPassword.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ResetPasswordCreateManyArgs>(args?: Prisma.SelectSubset<T, ResetPasswordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ResetPasswords and returns the data saved in the database.
   * @param {ResetPasswordCreateManyAndReturnArgs} args - Arguments to create many ResetPasswords.
   * @example
   * // Create many ResetPasswords
   * const resetPassword = await prisma.resetPassword.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ResetPasswords and only return the `id`
   * const resetPasswordWithIdOnly = await prisma.resetPassword.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ResetPasswordCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ResetPasswordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ResetPassword.
   * @param {ResetPasswordDeleteArgs} args - Arguments to delete one ResetPassword.
   * @example
   * // Delete one ResetPassword
   * const ResetPassword = await prisma.resetPassword.delete({
   *   where: {
   *     // ... filter to delete one ResetPassword
   *   }
   * })
   * 
   */
  delete<T extends ResetPasswordDeleteArgs>(args: Prisma.SelectSubset<T, ResetPasswordDeleteArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ResetPassword.
   * @param {ResetPasswordUpdateArgs} args - Arguments to update one ResetPassword.
   * @example
   * // Update one ResetPassword
   * const resetPassword = await prisma.resetPassword.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ResetPasswordUpdateArgs>(args: Prisma.SelectSubset<T, ResetPasswordUpdateArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ResetPasswords.
   * @param {ResetPasswordDeleteManyArgs} args - Arguments to filter ResetPasswords to delete.
   * @example
   * // Delete a few ResetPasswords
   * const { count } = await prisma.resetPassword.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ResetPasswordDeleteManyArgs>(args?: Prisma.SelectSubset<T, ResetPasswordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ResetPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ResetPasswords
   * const resetPassword = await prisma.resetPassword.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ResetPasswordUpdateManyArgs>(args: Prisma.SelectSubset<T, ResetPasswordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ResetPasswords and returns the data updated in the database.
   * @param {ResetPasswordUpdateManyAndReturnArgs} args - Arguments to update many ResetPasswords.
   * @example
   * // Update many ResetPasswords
   * const resetPassword = await prisma.resetPassword.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ResetPasswords and only return the `id`
   * const resetPasswordWithIdOnly = await prisma.resetPassword.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ResetPasswordUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ResetPasswordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ResetPassword.
   * @param {ResetPasswordUpsertArgs} args - Arguments to update or create a ResetPassword.
   * @example
   * // Update or create a ResetPassword
   * const resetPassword = await prisma.resetPassword.upsert({
   *   create: {
   *     // ... data to create a ResetPassword
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ResetPassword we want to update
   *   }
   * })
   */
  upsert<T extends ResetPasswordUpsertArgs>(args: Prisma.SelectSubset<T, ResetPasswordUpsertArgs<ExtArgs>>): Prisma.Prisma__ResetPasswordClient<runtime.Types.Result.GetResult<Prisma.$ResetPasswordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ResetPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordCountArgs} args - Arguments to filter ResetPasswords to count.
   * @example
   * // Count the number of ResetPasswords
   * const count = await prisma.resetPassword.count({
   *   where: {
   *     // ... the filter for the ResetPasswords we want to count
   *   }
   * })
  **/
  count<T extends ResetPasswordCountArgs>(
    args?: Prisma.Subset<T, ResetPasswordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ResetPasswordCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ResetPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ResetPasswordAggregateArgs>(args: Prisma.Subset<T, ResetPasswordAggregateArgs>): Prisma.PrismaPromise<GetResetPasswordAggregateType<T>>

  /**
   * Group by ResetPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ResetPasswordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ResetPasswordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ResetPasswordGroupByArgs['orderBy'] }
      : { orderBy?: ResetPasswordGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ResetPasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResetPasswordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ResetPassword model
 */
readonly fields: ResetPasswordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ResetPassword.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ResetPasswordClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.AccountDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountDefaultArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ResetPassword model
 */
export interface ResetPasswordFieldRefs {
  readonly id: Prisma.FieldRef<"ResetPassword", 'String'>
  readonly accountId: Prisma.FieldRef<"ResetPassword", 'String'>
  readonly expiresAt: Prisma.FieldRef<"ResetPassword", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"ResetPassword", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ResetPassword", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ResetPassword findUnique
 */
export type ResetPasswordFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter, which ResetPassword to fetch.
   */
  where: Prisma.ResetPasswordWhereUniqueInput
}

/**
 * ResetPassword findUniqueOrThrow
 */
export type ResetPasswordFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter, which ResetPassword to fetch.
   */
  where: Prisma.ResetPasswordWhereUniqueInput
}

/**
 * ResetPassword findFirst
 */
export type ResetPasswordFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter, which ResetPassword to fetch.
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResetPasswords to fetch.
   */
  orderBy?: Prisma.ResetPasswordOrderByWithRelationInput | Prisma.ResetPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ResetPasswords.
   */
  cursor?: Prisma.ResetPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResetPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResetPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ResetPasswords.
   */
  distinct?: Prisma.ResetPasswordScalarFieldEnum | Prisma.ResetPasswordScalarFieldEnum[]
}

/**
 * ResetPassword findFirstOrThrow
 */
export type ResetPasswordFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter, which ResetPassword to fetch.
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResetPasswords to fetch.
   */
  orderBy?: Prisma.ResetPasswordOrderByWithRelationInput | Prisma.ResetPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ResetPasswords.
   */
  cursor?: Prisma.ResetPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResetPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResetPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ResetPasswords.
   */
  distinct?: Prisma.ResetPasswordScalarFieldEnum | Prisma.ResetPasswordScalarFieldEnum[]
}

/**
 * ResetPassword findMany
 */
export type ResetPasswordFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter, which ResetPasswords to fetch.
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ResetPasswords to fetch.
   */
  orderBy?: Prisma.ResetPasswordOrderByWithRelationInput | Prisma.ResetPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ResetPasswords.
   */
  cursor?: Prisma.ResetPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ResetPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ResetPasswords.
   */
  skip?: number
  distinct?: Prisma.ResetPasswordScalarFieldEnum | Prisma.ResetPasswordScalarFieldEnum[]
}

/**
 * ResetPassword create
 */
export type ResetPasswordCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * The data needed to create a ResetPassword.
   */
  data: Prisma.XOR<Prisma.ResetPasswordCreateInput, Prisma.ResetPasswordUncheckedCreateInput>
}

/**
 * ResetPassword createMany
 */
export type ResetPasswordCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ResetPasswords.
   */
  data: Prisma.ResetPasswordCreateManyInput | Prisma.ResetPasswordCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ResetPassword createManyAndReturn
 */
export type ResetPasswordCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * The data used to create many ResetPasswords.
   */
  data: Prisma.ResetPasswordCreateManyInput | Prisma.ResetPasswordCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ResetPassword update
 */
export type ResetPasswordUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * The data needed to update a ResetPassword.
   */
  data: Prisma.XOR<Prisma.ResetPasswordUpdateInput, Prisma.ResetPasswordUncheckedUpdateInput>
  /**
   * Choose, which ResetPassword to update.
   */
  where: Prisma.ResetPasswordWhereUniqueInput
}

/**
 * ResetPassword updateMany
 */
export type ResetPasswordUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ResetPasswords.
   */
  data: Prisma.XOR<Prisma.ResetPasswordUpdateManyMutationInput, Prisma.ResetPasswordUncheckedUpdateManyInput>
  /**
   * Filter which ResetPasswords to update
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * Limit how many ResetPasswords to update.
   */
  limit?: number
}

/**
 * ResetPassword updateManyAndReturn
 */
export type ResetPasswordUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * The data used to update ResetPasswords.
   */
  data: Prisma.XOR<Prisma.ResetPasswordUpdateManyMutationInput, Prisma.ResetPasswordUncheckedUpdateManyInput>
  /**
   * Filter which ResetPasswords to update
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * Limit how many ResetPasswords to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ResetPassword upsert
 */
export type ResetPasswordUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * The filter to search for the ResetPassword to update in case it exists.
   */
  where: Prisma.ResetPasswordWhereUniqueInput
  /**
   * In case the ResetPassword found by the `where` argument doesn't exist, create a new ResetPassword with this data.
   */
  create: Prisma.XOR<Prisma.ResetPasswordCreateInput, Prisma.ResetPasswordUncheckedCreateInput>
  /**
   * In case the ResetPassword was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ResetPasswordUpdateInput, Prisma.ResetPasswordUncheckedUpdateInput>
}

/**
 * ResetPassword delete
 */
export type ResetPasswordDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
  /**
   * Filter which ResetPassword to delete.
   */
  where: Prisma.ResetPasswordWhereUniqueInput
}

/**
 * ResetPassword deleteMany
 */
export type ResetPasswordDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ResetPasswords to delete
   */
  where?: Prisma.ResetPasswordWhereInput
  /**
   * Limit how many ResetPasswords to delete.
   */
  limit?: number
}

/**
 * ResetPassword without action
 */
export type ResetPasswordDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ResetPassword
   */
  select?: Prisma.ResetPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ResetPassword
   */
  omit?: Prisma.ResetPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ResetPasswordInclude<ExtArgs> | null
}
