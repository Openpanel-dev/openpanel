
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Report` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Report
 * 
 */
export type ReportModel = runtime.Types.Result.DefaultSelection<Prisma.$ReportPayload>

export type AggregateReport = {
  _count: ReportCountAggregateOutputType | null
  _avg: ReportAvgAggregateOutputType | null
  _sum: ReportSumAggregateOutputType | null
  _min: ReportMinAggregateOutputType | null
  _max: ReportMaxAggregateOutputType | null
}

export type ReportAvgAggregateOutputType = {
  funnelWindow: number | null
}

export type ReportSumAggregateOutputType = {
  funnelWindow: number | null
}

export type ReportMinAggregateOutputType = {
  id: string | null
  name: string | null
  interval: $Enums.Interval | null
  range: string | null
  chartType: $Enums.ChartType | null
  lineType: string | null
  formula: string | null
  unit: string | null
  metric: $Enums.Metric | null
  projectId: string | null
  previous: boolean | null
  criteria: string | null
  funnelGroup: string | null
  funnelWindow: number | null
  dashboardId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportMaxAggregateOutputType = {
  id: string | null
  name: string | null
  interval: $Enums.Interval | null
  range: string | null
  chartType: $Enums.ChartType | null
  lineType: string | null
  formula: string | null
  unit: string | null
  metric: $Enums.Metric | null
  projectId: string | null
  previous: boolean | null
  criteria: string | null
  funnelGroup: string | null
  funnelWindow: number | null
  dashboardId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ReportCountAggregateOutputType = {
  id: number
  name: number
  interval: number
  range: number
  chartType: number
  lineType: number
  breakdowns: number
  events: number
  formula: number
  unit: number
  metric: number
  projectId: number
  previous: number
  criteria: number
  funnelGroup: number
  funnelWindow: number
  dashboardId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ReportAvgAggregateInputType = {
  funnelWindow?: true
}

export type ReportSumAggregateInputType = {
  funnelWindow?: true
}

export type ReportMinAggregateInputType = {
  id?: true
  name?: true
  interval?: true
  range?: true
  chartType?: true
  lineType?: true
  formula?: true
  unit?: true
  metric?: true
  projectId?: true
  previous?: true
  criteria?: true
  funnelGroup?: true
  funnelWindow?: true
  dashboardId?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportMaxAggregateInputType = {
  id?: true
  name?: true
  interval?: true
  range?: true
  chartType?: true
  lineType?: true
  formula?: true
  unit?: true
  metric?: true
  projectId?: true
  previous?: true
  criteria?: true
  funnelGroup?: true
  funnelWindow?: true
  dashboardId?: true
  createdAt?: true
  updatedAt?: true
}

export type ReportCountAggregateInputType = {
  id?: true
  name?: true
  interval?: true
  range?: true
  chartType?: true
  lineType?: true
  breakdowns?: true
  events?: true
  formula?: true
  unit?: true
  metric?: true
  projectId?: true
  previous?: true
  criteria?: true
  funnelGroup?: true
  funnelWindow?: true
  dashboardId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ReportAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Report to aggregate.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Reports to fetch.
   */
  orderBy?: Prisma.ReportOrderByWithRelationInput | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Reports
  **/
  _count?: true | ReportCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ReportAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ReportSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ReportMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ReportMaxAggregateInputType
}

export type GetReportAggregateType<T extends ReportAggregateArgs> = {
      [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateReport[P]>
    : Prisma.GetScalarType<T[P], AggregateReport[P]>
}




export type ReportGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReportWhereInput
  orderBy?: Prisma.ReportOrderByWithAggregationInput | Prisma.ReportOrderByWithAggregationInput[]
  by: Prisma.ReportScalarFieldEnum[] | Prisma.ReportScalarFieldEnum
  having?: Prisma.ReportScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ReportCountAggregateInputType | true
  _avg?: ReportAvgAggregateInputType
  _sum?: ReportSumAggregateInputType
  _min?: ReportMinAggregateInputType
  _max?: ReportMaxAggregateInputType
}

export type ReportGroupByOutputType = {
  id: string
  name: string
  interval: $Enums.Interval
  range: string
  chartType: $Enums.ChartType
  lineType: string
  breakdowns: runtime.JsonValue
  events: runtime.JsonValue
  formula: string | null
  unit: string | null
  metric: $Enums.Metric
  projectId: string
  previous: boolean
  criteria: string | null
  funnelGroup: string | null
  funnelWindow: number | null
  dashboardId: string
  createdAt: Date
  updatedAt: Date
  _count: ReportCountAggregateOutputType | null
  _avg: ReportAvgAggregateOutputType | null
  _sum: ReportSumAggregateOutputType | null
  _min: ReportMinAggregateOutputType | null
  _max: ReportMaxAggregateOutputType | null
}

type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ReportGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ReportGroupByOutputType[P]>
      }
    >
  >



export type ReportWhereInput = {
  AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  OR?: Prisma.ReportWhereInput[]
  NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  id?: Prisma.UuidFilter<"Report"> | string
  name?: Prisma.StringFilter<"Report"> | string
  interval?: Prisma.EnumIntervalFilter<"Report"> | $Enums.Interval
  range?: Prisma.StringFilter<"Report"> | string
  chartType?: Prisma.EnumChartTypeFilter<"Report"> | $Enums.ChartType
  lineType?: Prisma.StringFilter<"Report"> | string
  breakdowns?: Prisma.JsonFilter<"Report">
  events?: Prisma.JsonFilter<"Report">
  formula?: Prisma.StringNullableFilter<"Report"> | string | null
  unit?: Prisma.StringNullableFilter<"Report"> | string | null
  metric?: Prisma.EnumMetricFilter<"Report"> | $Enums.Metric
  projectId?: Prisma.StringFilter<"Report"> | string
  previous?: Prisma.BoolFilter<"Report"> | boolean
  criteria?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelGroup?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelWindow?: Prisma.FloatNullableFilter<"Report"> | number | null
  dashboardId?: Prisma.StringFilter<"Report"> | string
  createdAt?: Prisma.DateTimeFilter<"Report"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Report"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  dashboard?: Prisma.XOR<Prisma.DashboardScalarRelationFilter, Prisma.DashboardWhereInput>
}

export type ReportOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  interval?: Prisma.SortOrder
  range?: Prisma.SortOrder
  chartType?: Prisma.SortOrder
  lineType?: Prisma.SortOrder
  breakdowns?: Prisma.SortOrder
  events?: Prisma.SortOrder
  formula?: Prisma.SortOrderInput | Prisma.SortOrder
  unit?: Prisma.SortOrderInput | Prisma.SortOrder
  metric?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  previous?: Prisma.SortOrder
  criteria?: Prisma.SortOrderInput | Prisma.SortOrder
  funnelGroup?: Prisma.SortOrderInput | Prisma.SortOrder
  funnelWindow?: Prisma.SortOrderInput | Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  dashboard?: Prisma.DashboardOrderByWithRelationInput
}

export type ReportWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  OR?: Prisma.ReportWhereInput[]
  NOT?: Prisma.ReportWhereInput | Prisma.ReportWhereInput[]
  name?: Prisma.StringFilter<"Report"> | string
  interval?: Prisma.EnumIntervalFilter<"Report"> | $Enums.Interval
  range?: Prisma.StringFilter<"Report"> | string
  chartType?: Prisma.EnumChartTypeFilter<"Report"> | $Enums.ChartType
  lineType?: Prisma.StringFilter<"Report"> | string
  breakdowns?: Prisma.JsonFilter<"Report">
  events?: Prisma.JsonFilter<"Report">
  formula?: Prisma.StringNullableFilter<"Report"> | string | null
  unit?: Prisma.StringNullableFilter<"Report"> | string | null
  metric?: Prisma.EnumMetricFilter<"Report"> | $Enums.Metric
  projectId?: Prisma.StringFilter<"Report"> | string
  previous?: Prisma.BoolFilter<"Report"> | boolean
  criteria?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelGroup?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelWindow?: Prisma.FloatNullableFilter<"Report"> | number | null
  dashboardId?: Prisma.StringFilter<"Report"> | string
  createdAt?: Prisma.DateTimeFilter<"Report"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Report"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  dashboard?: Prisma.XOR<Prisma.DashboardScalarRelationFilter, Prisma.DashboardWhereInput>
}, "id">

export type ReportOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  interval?: Prisma.SortOrder
  range?: Prisma.SortOrder
  chartType?: Prisma.SortOrder
  lineType?: Prisma.SortOrder
  breakdowns?: Prisma.SortOrder
  events?: Prisma.SortOrder
  formula?: Prisma.SortOrderInput | Prisma.SortOrder
  unit?: Prisma.SortOrderInput | Prisma.SortOrder
  metric?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  previous?: Prisma.SortOrder
  criteria?: Prisma.SortOrderInput | Prisma.SortOrder
  funnelGroup?: Prisma.SortOrderInput | Prisma.SortOrder
  funnelWindow?: Prisma.SortOrderInput | Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ReportCountOrderByAggregateInput
  _avg?: Prisma.ReportAvgOrderByAggregateInput
  _max?: Prisma.ReportMaxOrderByAggregateInput
  _min?: Prisma.ReportMinOrderByAggregateInput
  _sum?: Prisma.ReportSumOrderByAggregateInput
}

export type ReportScalarWhereWithAggregatesInput = {
  AND?: Prisma.ReportScalarWhereWithAggregatesInput | Prisma.ReportScalarWhereWithAggregatesInput[]
  OR?: Prisma.ReportScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ReportScalarWhereWithAggregatesInput | Prisma.ReportScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Report"> | string
  name?: Prisma.StringWithAggregatesFilter<"Report"> | string
  interval?: Prisma.EnumIntervalWithAggregatesFilter<"Report"> | $Enums.Interval
  range?: Prisma.StringWithAggregatesFilter<"Report"> | string
  chartType?: Prisma.EnumChartTypeWithAggregatesFilter<"Report"> | $Enums.ChartType
  lineType?: Prisma.StringWithAggregatesFilter<"Report"> | string
  breakdowns?: Prisma.JsonWithAggregatesFilter<"Report">
  events?: Prisma.JsonWithAggregatesFilter<"Report">
  formula?: Prisma.StringNullableWithAggregatesFilter<"Report"> | string | null
  unit?: Prisma.StringNullableWithAggregatesFilter<"Report"> | string | null
  metric?: Prisma.EnumMetricWithAggregatesFilter<"Report"> | $Enums.Metric
  projectId?: Prisma.StringWithAggregatesFilter<"Report"> | string
  previous?: Prisma.BoolWithAggregatesFilter<"Report"> | boolean
  criteria?: Prisma.StringNullableWithAggregatesFilter<"Report"> | string | null
  funnelGroup?: Prisma.StringNullableWithAggregatesFilter<"Report"> | string | null
  funnelWindow?: Prisma.FloatNullableWithAggregatesFilter<"Report"> | number | null
  dashboardId?: Prisma.StringWithAggregatesFilter<"Report"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Report"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Report"> | Date | string
}

export type ReportCreateInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutReportsInput
  dashboard: Prisma.DashboardCreateNestedOneWithoutReportsInput
}

export type ReportUncheckedCreateInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  projectId: string
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  dashboardId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutReportsNestedInput
  dashboard?: Prisma.DashboardUpdateOneRequiredWithoutReportsNestedInput
}

export type ReportUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCreateManyInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  projectId: string
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  dashboardId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportListRelationFilter = {
  every?: Prisma.ReportWhereInput
  some?: Prisma.ReportWhereInput
  none?: Prisma.ReportWhereInput
}

export type ReportOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ReportCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  interval?: Prisma.SortOrder
  range?: Prisma.SortOrder
  chartType?: Prisma.SortOrder
  lineType?: Prisma.SortOrder
  breakdowns?: Prisma.SortOrder
  events?: Prisma.SortOrder
  formula?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  previous?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  funnelGroup?: Prisma.SortOrder
  funnelWindow?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportAvgOrderByAggregateInput = {
  funnelWindow?: Prisma.SortOrder
}

export type ReportMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  interval?: Prisma.SortOrder
  range?: Prisma.SortOrder
  chartType?: Prisma.SortOrder
  lineType?: Prisma.SortOrder
  formula?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  previous?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  funnelGroup?: Prisma.SortOrder
  funnelWindow?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  interval?: Prisma.SortOrder
  range?: Prisma.SortOrder
  chartType?: Prisma.SortOrder
  lineType?: Prisma.SortOrder
  formula?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  metric?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  previous?: Prisma.SortOrder
  criteria?: Prisma.SortOrder
  funnelGroup?: Prisma.SortOrder
  funnelWindow?: Prisma.SortOrder
  dashboardId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ReportSumOrderByAggregateInput = {
  funnelWindow?: Prisma.SortOrder
}

export type ReportCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput> | Prisma.ReportCreateWithoutProjectInput[] | Prisma.ReportUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutProjectInput | Prisma.ReportCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ReportCreateManyProjectInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput> | Prisma.ReportCreateWithoutProjectInput[] | Prisma.ReportUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutProjectInput | Prisma.ReportCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ReportCreateManyProjectInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput> | Prisma.ReportCreateWithoutProjectInput[] | Prisma.ReportUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutProjectInput | Prisma.ReportCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ReportUpsertWithWhereUniqueWithoutProjectInput | Prisma.ReportUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ReportCreateManyProjectInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?: Prisma.ReportUpdateWithWhereUniqueWithoutProjectInput | Prisma.ReportUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ReportUpdateManyWithWhereWithoutProjectInput | Prisma.ReportUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type ReportUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput> | Prisma.ReportCreateWithoutProjectInput[] | Prisma.ReportUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutProjectInput | Prisma.ReportCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ReportUpsertWithWhereUniqueWithoutProjectInput | Prisma.ReportUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ReportCreateManyProjectInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?: Prisma.ReportUpdateWithWhereUniqueWithoutProjectInput | Prisma.ReportUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ReportUpdateManyWithWhereWithoutProjectInput | Prisma.ReportUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type ReportCreateNestedManyWithoutDashboardInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput> | Prisma.ReportCreateWithoutDashboardInput[] | Prisma.ReportUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutDashboardInput | Prisma.ReportCreateOrConnectWithoutDashboardInput[]
  createMany?: Prisma.ReportCreateManyDashboardInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUncheckedCreateNestedManyWithoutDashboardInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput> | Prisma.ReportCreateWithoutDashboardInput[] | Prisma.ReportUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutDashboardInput | Prisma.ReportCreateOrConnectWithoutDashboardInput[]
  createMany?: Prisma.ReportCreateManyDashboardInputEnvelope
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
}

export type ReportUpdateManyWithoutDashboardNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput> | Prisma.ReportCreateWithoutDashboardInput[] | Prisma.ReportUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutDashboardInput | Prisma.ReportCreateOrConnectWithoutDashboardInput[]
  upsert?: Prisma.ReportUpsertWithWhereUniqueWithoutDashboardInput | Prisma.ReportUpsertWithWhereUniqueWithoutDashboardInput[]
  createMany?: Prisma.ReportCreateManyDashboardInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?: Prisma.ReportUpdateWithWhereUniqueWithoutDashboardInput | Prisma.ReportUpdateWithWhereUniqueWithoutDashboardInput[]
  updateMany?: Prisma.ReportUpdateManyWithWhereWithoutDashboardInput | Prisma.ReportUpdateManyWithWhereWithoutDashboardInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type ReportUncheckedUpdateManyWithoutDashboardNestedInput = {
  create?: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput> | Prisma.ReportCreateWithoutDashboardInput[] | Prisma.ReportUncheckedCreateWithoutDashboardInput[]
  connectOrCreate?: Prisma.ReportCreateOrConnectWithoutDashboardInput | Prisma.ReportCreateOrConnectWithoutDashboardInput[]
  upsert?: Prisma.ReportUpsertWithWhereUniqueWithoutDashboardInput | Prisma.ReportUpsertWithWhereUniqueWithoutDashboardInput[]
  createMany?: Prisma.ReportCreateManyDashboardInputEnvelope
  set?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  disconnect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  delete?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  connect?: Prisma.ReportWhereUniqueInput | Prisma.ReportWhereUniqueInput[]
  update?: Prisma.ReportUpdateWithWhereUniqueWithoutDashboardInput | Prisma.ReportUpdateWithWhereUniqueWithoutDashboardInput[]
  updateMany?: Prisma.ReportUpdateManyWithWhereWithoutDashboardInput | Prisma.ReportUpdateManyWithWhereWithoutDashboardInput[]
  deleteMany?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
}

export type EnumIntervalFieldUpdateOperationsInput = {
  set?: $Enums.Interval
}

export type EnumChartTypeFieldUpdateOperationsInput = {
  set?: $Enums.ChartType
}

export type EnumMetricFieldUpdateOperationsInput = {
  set?: $Enums.Metric
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ReportCreateWithoutProjectInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  dashboard: Prisma.DashboardCreateNestedOneWithoutReportsInput
}

export type ReportUncheckedCreateWithoutProjectInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  dashboardId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCreateOrConnectWithoutProjectInput = {
  where: Prisma.ReportWhereUniqueInput
  create: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput>
}

export type ReportCreateManyProjectInputEnvelope = {
  data: Prisma.ReportCreateManyProjectInput | Prisma.ReportCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ReportUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ReportWhereUniqueInput
  update: Prisma.XOR<Prisma.ReportUpdateWithoutProjectInput, Prisma.ReportUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ReportCreateWithoutProjectInput, Prisma.ReportUncheckedCreateWithoutProjectInput>
}

export type ReportUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ReportWhereUniqueInput
  data: Prisma.XOR<Prisma.ReportUpdateWithoutProjectInput, Prisma.ReportUncheckedUpdateWithoutProjectInput>
}

export type ReportUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ReportScalarWhereInput
  data: Prisma.XOR<Prisma.ReportUpdateManyMutationInput, Prisma.ReportUncheckedUpdateManyWithoutProjectInput>
}

export type ReportScalarWhereInput = {
  AND?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
  OR?: Prisma.ReportScalarWhereInput[]
  NOT?: Prisma.ReportScalarWhereInput | Prisma.ReportScalarWhereInput[]
  id?: Prisma.UuidFilter<"Report"> | string
  name?: Prisma.StringFilter<"Report"> | string
  interval?: Prisma.EnumIntervalFilter<"Report"> | $Enums.Interval
  range?: Prisma.StringFilter<"Report"> | string
  chartType?: Prisma.EnumChartTypeFilter<"Report"> | $Enums.ChartType
  lineType?: Prisma.StringFilter<"Report"> | string
  breakdowns?: Prisma.JsonFilter<"Report">
  events?: Prisma.JsonFilter<"Report">
  formula?: Prisma.StringNullableFilter<"Report"> | string | null
  unit?: Prisma.StringNullableFilter<"Report"> | string | null
  metric?: Prisma.EnumMetricFilter<"Report"> | $Enums.Metric
  projectId?: Prisma.StringFilter<"Report"> | string
  previous?: Prisma.BoolFilter<"Report"> | boolean
  criteria?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelGroup?: Prisma.StringNullableFilter<"Report"> | string | null
  funnelWindow?: Prisma.FloatNullableFilter<"Report"> | number | null
  dashboardId?: Prisma.StringFilter<"Report"> | string
  createdAt?: Prisma.DateTimeFilter<"Report"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Report"> | Date | string
}

export type ReportCreateWithoutDashboardInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutReportsInput
}

export type ReportUncheckedCreateWithoutDashboardInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  projectId: string
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportCreateOrConnectWithoutDashboardInput = {
  where: Prisma.ReportWhereUniqueInput
  create: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput>
}

export type ReportCreateManyDashboardInputEnvelope = {
  data: Prisma.ReportCreateManyDashboardInput | Prisma.ReportCreateManyDashboardInput[]
  skipDuplicates?: boolean
}

export type ReportUpsertWithWhereUniqueWithoutDashboardInput = {
  where: Prisma.ReportWhereUniqueInput
  update: Prisma.XOR<Prisma.ReportUpdateWithoutDashboardInput, Prisma.ReportUncheckedUpdateWithoutDashboardInput>
  create: Prisma.XOR<Prisma.ReportCreateWithoutDashboardInput, Prisma.ReportUncheckedCreateWithoutDashboardInput>
}

export type ReportUpdateWithWhereUniqueWithoutDashboardInput = {
  where: Prisma.ReportWhereUniqueInput
  data: Prisma.XOR<Prisma.ReportUpdateWithoutDashboardInput, Prisma.ReportUncheckedUpdateWithoutDashboardInput>
}

export type ReportUpdateManyWithWhereWithoutDashboardInput = {
  where: Prisma.ReportScalarWhereInput
  data: Prisma.XOR<Prisma.ReportUpdateManyMutationInput, Prisma.ReportUncheckedUpdateManyWithoutDashboardInput>
}

export type ReportCreateManyProjectInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  dashboardId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dashboard?: Prisma.DashboardUpdateOneRequiredWithoutReportsNestedInput
}

export type ReportUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  dashboardId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportCreateManyDashboardInput = {
  id?: string
  name: string
  interval: $Enums.Interval
  range?: string
  chartType: $Enums.ChartType
  lineType?: string
  breakdowns: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: string | null
  unit?: string | null
  metric?: $Enums.Metric
  projectId: string
  previous?: boolean
  criteria?: string | null
  funnelGroup?: string | null
  funnelWindow?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ReportUpdateWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutReportsNestedInput
}

export type ReportUncheckedUpdateWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ReportUncheckedUpdateManyWithoutDashboardInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  interval?: Prisma.EnumIntervalFieldUpdateOperationsInput | $Enums.Interval
  range?: Prisma.StringFieldUpdateOperationsInput | string
  chartType?: Prisma.EnumChartTypeFieldUpdateOperationsInput | $Enums.ChartType
  lineType?: Prisma.StringFieldUpdateOperationsInput | string
  breakdowns?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  events?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  formula?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  metric?: Prisma.EnumMetricFieldUpdateOperationsInput | $Enums.Metric
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  previous?: Prisma.BoolFieldUpdateOperationsInput | boolean
  criteria?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelGroup?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  funnelWindow?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ReportSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  interval?: boolean
  range?: boolean
  chartType?: boolean
  lineType?: boolean
  breakdowns?: boolean
  events?: boolean
  formula?: boolean
  unit?: boolean
  metric?: boolean
  projectId?: boolean
  previous?: boolean
  criteria?: boolean
  funnelGroup?: boolean
  funnelWindow?: boolean
  dashboardId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["report"]>

export type ReportSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  interval?: boolean
  range?: boolean
  chartType?: boolean
  lineType?: boolean
  breakdowns?: boolean
  events?: boolean
  formula?: boolean
  unit?: boolean
  metric?: boolean
  projectId?: boolean
  previous?: boolean
  criteria?: boolean
  funnelGroup?: boolean
  funnelWindow?: boolean
  dashboardId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["report"]>

export type ReportSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  interval?: boolean
  range?: boolean
  chartType?: boolean
  lineType?: boolean
  breakdowns?: boolean
  events?: boolean
  formula?: boolean
  unit?: boolean
  metric?: boolean
  projectId?: boolean
  previous?: boolean
  criteria?: boolean
  funnelGroup?: boolean
  funnelWindow?: boolean
  dashboardId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}, ExtArgs["result"]["report"]>

export type ReportSelectScalar = {
  id?: boolean
  name?: boolean
  interval?: boolean
  range?: boolean
  chartType?: boolean
  lineType?: boolean
  breakdowns?: boolean
  events?: boolean
  formula?: boolean
  unit?: boolean
  metric?: boolean
  projectId?: boolean
  previous?: boolean
  criteria?: boolean
  funnelGroup?: boolean
  funnelWindow?: boolean
  dashboardId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ReportOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "interval" | "range" | "chartType" | "lineType" | "breakdowns" | "events" | "formula" | "unit" | "metric" | "projectId" | "previous" | "criteria" | "funnelGroup" | "funnelWindow" | "dashboardId" | "createdAt" | "updatedAt", ExtArgs["result"]["report"]>
export type ReportInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}
export type ReportIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}
export type ReportIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  dashboard?: boolean | Prisma.DashboardDefaultArgs<ExtArgs>
}

export type $ReportPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Report"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    dashboard: Prisma.$DashboardPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    interval: $Enums.Interval
    range: string
    chartType: $Enums.ChartType
    lineType: string
    breakdowns: runtime.JsonValue
    events: runtime.JsonValue
    formula: string | null
    unit: string | null
    metric: $Enums.Metric
    projectId: string
    previous: boolean
    criteria: string | null
    funnelGroup: string | null
    funnelWindow: number | null
    dashboardId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["report"]>
  composites: {}
}

export type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ReportPayload, S>

export type ReportCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ReportCountAggregateInputType | true
  }

export interface ReportDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
  /**
   * Find zero or one Report that matches the filter.
   * @param {ReportFindUniqueArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ReportFindUniqueArgs>(args: Prisma.SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Report that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Report that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ReportFindFirstArgs>(args?: Prisma.SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Report that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
   * @example
   * // Get one Report
   * const report = await prisma.report.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Reports that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Reports
   * const reports = await prisma.report.findMany()
   * 
   * // Get first 10 Reports
   * const reports = await prisma.report.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ReportFindManyArgs>(args?: Prisma.SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Report.
   * @param {ReportCreateArgs} args - Arguments to create a Report.
   * @example
   * // Create one Report
   * const Report = await prisma.report.create({
   *   data: {
   *     // ... data to create a Report
   *   }
   * })
   * 
   */
  create<T extends ReportCreateArgs>(args: Prisma.SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Reports.
   * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ReportCreateManyArgs>(args?: Prisma.SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Reports and returns the data saved in the database.
   * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
   * @example
   * // Create many Reports
   * const report = await prisma.report.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Report.
   * @param {ReportDeleteArgs} args - Arguments to delete one Report.
   * @example
   * // Delete one Report
   * const Report = await prisma.report.delete({
   *   where: {
   *     // ... filter to delete one Report
   *   }
   * })
   * 
   */
  delete<T extends ReportDeleteArgs>(args: Prisma.SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Report.
   * @param {ReportUpdateArgs} args - Arguments to update one Report.
   * @example
   * // Update one Report
   * const report = await prisma.report.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ReportUpdateArgs>(args: Prisma.SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Reports.
   * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
   * @example
   * // Delete a few Reports
   * const { count } = await prisma.report.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ReportDeleteManyArgs>(args?: Prisma.SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ReportUpdateManyArgs>(args: Prisma.SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Reports and returns the data updated in the database.
   * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
   * @example
   * // Update many Reports
   * const report = await prisma.report.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Reports and only return the `id`
   * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Report.
   * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
   * @example
   * // Update or create a Report
   * const report = await prisma.report.upsert({
   *   create: {
   *     // ... data to create a Report
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Report we want to update
   *   }
   * })
   */
  upsert<T extends ReportUpsertArgs>(args: Prisma.SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma.Prisma__ReportClient<runtime.Types.Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Reports.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportCountArgs} args - Arguments to filter Reports to count.
   * @example
   * // Count the number of Reports
   * const count = await prisma.report.count({
   *   where: {
   *     // ... the filter for the Reports we want to count
   *   }
   * })
  **/
  count<T extends ReportCountArgs>(
    args?: Prisma.Subset<T, ReportCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ReportCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ReportAggregateArgs>(args: Prisma.Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

  /**
   * Group by Report.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ReportGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ReportGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ReportGroupByArgs['orderBy'] }
      : { orderBy?: ReportGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Report model
 */
readonly fields: ReportFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Report.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ReportClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  dashboard<T extends Prisma.DashboardDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DashboardDefaultArgs<ExtArgs>>): Prisma.Prisma__DashboardClient<runtime.Types.Result.GetResult<Prisma.$DashboardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Report model
 */
export interface ReportFieldRefs {
  readonly id: Prisma.FieldRef<"Report", 'String'>
  readonly name: Prisma.FieldRef<"Report", 'String'>
  readonly interval: Prisma.FieldRef<"Report", 'Interval'>
  readonly range: Prisma.FieldRef<"Report", 'String'>
  readonly chartType: Prisma.FieldRef<"Report", 'ChartType'>
  readonly lineType: Prisma.FieldRef<"Report", 'String'>
  readonly breakdowns: Prisma.FieldRef<"Report", 'Json'>
  readonly events: Prisma.FieldRef<"Report", 'Json'>
  readonly formula: Prisma.FieldRef<"Report", 'String'>
  readonly unit: Prisma.FieldRef<"Report", 'String'>
  readonly metric: Prisma.FieldRef<"Report", 'Metric'>
  readonly projectId: Prisma.FieldRef<"Report", 'String'>
  readonly previous: Prisma.FieldRef<"Report", 'Boolean'>
  readonly criteria: Prisma.FieldRef<"Report", 'String'>
  readonly funnelGroup: Prisma.FieldRef<"Report", 'String'>
  readonly funnelWindow: Prisma.FieldRef<"Report", 'Float'>
  readonly dashboardId: Prisma.FieldRef<"Report", 'String'>
  readonly createdAt: Prisma.FieldRef<"Report", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Report", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Report findUnique
 */
export type ReportFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report findUniqueOrThrow
 */
export type ReportFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report findFirst
 */
export type ReportFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Reports to fetch.
   */
  orderBy?: Prisma.ReportOrderByWithRelationInput | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report findFirstOrThrow
 */
export type ReportFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Report to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Reports to fetch.
   */
  orderBy?: Prisma.ReportOrderByWithRelationInput | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Reports.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Reports.
   */
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report findMany
 */
export type ReportFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter, which Reports to fetch.
   */
  where?: Prisma.ReportWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Reports to fetch.
   */
  orderBy?: Prisma.ReportOrderByWithRelationInput | Prisma.ReportOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Reports.
   */
  cursor?: Prisma.ReportWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Reports from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Reports.
   */
  skip?: number
  distinct?: Prisma.ReportScalarFieldEnum | Prisma.ReportScalarFieldEnum[]
}

/**
 * Report create
 */
export type ReportCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The data needed to create a Report.
   */
  data: Prisma.XOR<Prisma.ReportCreateInput, Prisma.ReportUncheckedCreateInput>
}

/**
 * Report createMany
 */
export type ReportCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Report createManyAndReturn
 */
export type ReportCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * The data used to create many Reports.
   */
  data: Prisma.ReportCreateManyInput | Prisma.ReportCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Report update
 */
export type ReportUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The data needed to update a Report.
   */
  data: Prisma.XOR<Prisma.ReportUpdateInput, Prisma.ReportUncheckedUpdateInput>
  /**
   * Choose, which Report to update.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report updateMany
 */
export type ReportUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<Prisma.ReportUpdateManyMutationInput, Prisma.ReportUncheckedUpdateManyInput>
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to update.
   */
  limit?: number
}

/**
 * Report updateManyAndReturn
 */
export type ReportUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * The data used to update Reports.
   */
  data: Prisma.XOR<Prisma.ReportUpdateManyMutationInput, Prisma.ReportUncheckedUpdateManyInput>
  /**
   * Filter which Reports to update
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Report upsert
 */
export type ReportUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * The filter to search for the Report to update in case it exists.
   */
  where: Prisma.ReportWhereUniqueInput
  /**
   * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
   */
  create: Prisma.XOR<Prisma.ReportCreateInput, Prisma.ReportUncheckedCreateInput>
  /**
   * In case the Report was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ReportUpdateInput, Prisma.ReportUncheckedUpdateInput>
}

/**
 * Report delete
 */
export type ReportDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
  /**
   * Filter which Report to delete.
   */
  where: Prisma.ReportWhereUniqueInput
}

/**
 * Report deleteMany
 */
export type ReportDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Reports to delete
   */
  where?: Prisma.ReportWhereInput
  /**
   * Limit how many Reports to delete.
   */
  limit?: number
}

/**
 * Report without action
 */
export type ReportDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Report
   */
  select?: Prisma.ReportSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Report
   */
  omit?: Prisma.ReportOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReportInclude<ExtArgs> | null
}
