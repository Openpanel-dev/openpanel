/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `NotificationRule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model NotificationRule
 *
 */
export type NotificationRuleModel =
  runtime.Types.Result.DefaultSelection<Prisma.$NotificationRulePayload>;

export type AggregateNotificationRule = {
  _count: NotificationRuleCountAggregateOutputType | null;
  _min: NotificationRuleMinAggregateOutputType | null;
  _max: NotificationRuleMaxAggregateOutputType | null;
};

export type NotificationRuleMinAggregateOutputType = {
  id: string | null;
  name: string | null;
  projectId: string | null;
  sendToApp: boolean | null;
  sendToEmail: boolean | null;
  template: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type NotificationRuleMaxAggregateOutputType = {
  id: string | null;
  name: string | null;
  projectId: string | null;
  sendToApp: boolean | null;
  sendToEmail: boolean | null;
  template: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type NotificationRuleCountAggregateOutputType = {
  id: number;
  name: number;
  projectId: number;
  sendToApp: number;
  sendToEmail: number;
  config: number;
  template: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type NotificationRuleMinAggregateInputType = {
  id?: true;
  name?: true;
  projectId?: true;
  sendToApp?: true;
  sendToEmail?: true;
  template?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type NotificationRuleMaxAggregateInputType = {
  id?: true;
  name?: true;
  projectId?: true;
  sendToApp?: true;
  sendToEmail?: true;
  template?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type NotificationRuleCountAggregateInputType = {
  id?: true;
  name?: true;
  projectId?: true;
  sendToApp?: true;
  sendToEmail?: true;
  config?: true;
  template?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type NotificationRuleAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationRule to aggregate.
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationRules to fetch.
   */
  orderBy?:
    | Prisma.NotificationRuleOrderByWithRelationInput
    | Prisma.NotificationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.NotificationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned NotificationRules
   **/
  _count?: true | NotificationRuleCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: NotificationRuleMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: NotificationRuleMaxAggregateInputType;
};

export type GetNotificationRuleAggregateType<
  T extends NotificationRuleAggregateArgs,
> = {
  [P in keyof T & keyof AggregateNotificationRule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNotificationRule[P]>
    : Prisma.GetScalarType<T[P], AggregateNotificationRule[P]>;
};

export type NotificationRuleGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationRuleWhereInput;
  orderBy?:
    | Prisma.NotificationRuleOrderByWithAggregationInput
    | Prisma.NotificationRuleOrderByWithAggregationInput[];
  by:
    | Prisma.NotificationRuleScalarFieldEnum[]
    | Prisma.NotificationRuleScalarFieldEnum;
  having?: Prisma.NotificationRuleScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: NotificationRuleCountAggregateInputType | true;
  _min?: NotificationRuleMinAggregateInputType;
  _max?: NotificationRuleMaxAggregateInputType;
};

export type NotificationRuleGroupByOutputType = {
  id: string;
  name: string;
  projectId: string;
  sendToApp: boolean;
  sendToEmail: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template: string | null;
  createdAt: Date;
  updatedAt: Date;
  _count: NotificationRuleCountAggregateOutputType | null;
  _min: NotificationRuleMinAggregateOutputType | null;
  _max: NotificationRuleMaxAggregateOutputType | null;
};

type GetNotificationRuleGroupByPayload<T extends NotificationRuleGroupByArgs> =
  Prisma.PrismaPromise<
    Array<
      Prisma.PickEnumerable<NotificationRuleGroupByOutputType, T['by']> & {
        [P in keyof T &
          keyof NotificationRuleGroupByOutputType]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotificationRuleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotificationRuleGroupByOutputType[P]>;
      }
    >
  >;

export type NotificationRuleWhereInput = {
  AND?: Prisma.NotificationRuleWhereInput | Prisma.NotificationRuleWhereInput[];
  OR?: Prisma.NotificationRuleWhereInput[];
  NOT?: Prisma.NotificationRuleWhereInput | Prisma.NotificationRuleWhereInput[];
  id?: Prisma.UuidFilter<'NotificationRule'> | string;
  name?: Prisma.StringFilter<'NotificationRule'> | string;
  projectId?: Prisma.StringFilter<'NotificationRule'> | string;
  sendToApp?: Prisma.BoolFilter<'NotificationRule'> | boolean;
  sendToEmail?: Prisma.BoolFilter<'NotificationRule'> | boolean;
  config?: Prisma.JsonFilter<'NotificationRule'>;
  template?: Prisma.StringNullableFilter<'NotificationRule'> | string | null;
  createdAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
  project?: Prisma.XOR<
    Prisma.ProjectScalarRelationFilter,
    Prisma.ProjectWhereInput
  >;
  integrations?: Prisma.IntegrationListRelationFilter;
  notifications?: Prisma.NotificationListRelationFilter;
};

export type NotificationRuleOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  template?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  project?: Prisma.ProjectOrderByWithRelationInput;
  integrations?: Prisma.IntegrationOrderByRelationAggregateInput;
  notifications?: Prisma.NotificationOrderByRelationAggregateInput;
};

export type NotificationRuleWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?:
      | Prisma.NotificationRuleWhereInput
      | Prisma.NotificationRuleWhereInput[];
    OR?: Prisma.NotificationRuleWhereInput[];
    NOT?:
      | Prisma.NotificationRuleWhereInput
      | Prisma.NotificationRuleWhereInput[];
    name?: Prisma.StringFilter<'NotificationRule'> | string;
    projectId?: Prisma.StringFilter<'NotificationRule'> | string;
    sendToApp?: Prisma.BoolFilter<'NotificationRule'> | boolean;
    sendToEmail?: Prisma.BoolFilter<'NotificationRule'> | boolean;
    config?: Prisma.JsonFilter<'NotificationRule'>;
    template?: Prisma.StringNullableFilter<'NotificationRule'> | string | null;
    createdAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
    project?: Prisma.XOR<
      Prisma.ProjectScalarRelationFilter,
      Prisma.ProjectWhereInput
    >;
    integrations?: Prisma.IntegrationListRelationFilter;
    notifications?: Prisma.NotificationListRelationFilter;
  },
  'id'
>;

export type NotificationRuleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  template?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.NotificationRuleCountOrderByAggregateInput;
  _max?: Prisma.NotificationRuleMaxOrderByAggregateInput;
  _min?: Prisma.NotificationRuleMinOrderByAggregateInput;
};

export type NotificationRuleScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.NotificationRuleScalarWhereWithAggregatesInput
    | Prisma.NotificationRuleScalarWhereWithAggregatesInput[];
  OR?: Prisma.NotificationRuleScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.NotificationRuleScalarWhereWithAggregatesInput
    | Prisma.NotificationRuleScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'NotificationRule'> | string;
  name?: Prisma.StringWithAggregatesFilter<'NotificationRule'> | string;
  projectId?: Prisma.StringWithAggregatesFilter<'NotificationRule'> | string;
  sendToApp?: Prisma.BoolWithAggregatesFilter<'NotificationRule'> | boolean;
  sendToEmail?: Prisma.BoolWithAggregatesFilter<'NotificationRule'> | boolean;
  config?: Prisma.JsonWithAggregatesFilter<'NotificationRule'>;
  template?:
    | Prisma.StringNullableWithAggregatesFilter<'NotificationRule'>
    | string
    | null;
  createdAt?:
    | Prisma.DateTimeWithAggregatesFilter<'NotificationRule'>
    | Date
    | string;
  updatedAt?:
    | Prisma.DateTimeWithAggregatesFilter<'NotificationRule'>
    | Date
    | string;
};

export type NotificationRuleCreateInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationRulesInput;
  integrations?: Prisma.IntegrationCreateNestedManyWithoutNotificationRulesInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleUncheckedCreateInput = {
  id?: string;
  name: string;
  projectId: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  integrations?: Prisma.IntegrationUncheckedCreateNestedManyWithoutNotificationRulesInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationRulesNestedInput;
  integrations?: Prisma.IntegrationUpdateManyWithoutNotificationRulesNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  integrations?: Prisma.IntegrationUncheckedUpdateManyWithoutNotificationRulesNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleCreateManyInput = {
  id?: string;
  name: string;
  projectId: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type NotificationRuleUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NotificationRuleUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NotificationRuleListRelationFilter = {
  every?: Prisma.NotificationRuleWhereInput;
  some?: Prisma.NotificationRuleWhereInput;
  none?: Prisma.NotificationRuleWhereInput;
};

export type NotificationRuleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type NotificationRuleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  config?: Prisma.SortOrder;
  template?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NotificationRuleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  template?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NotificationRuleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  name?: Prisma.SortOrder;
  projectId?: Prisma.SortOrder;
  sendToApp?: Prisma.SortOrder;
  sendToEmail?: Prisma.SortOrder;
  template?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type NotificationRuleNullableScalarRelationFilter = {
  is?: Prisma.NotificationRuleWhereInput | null;
  isNot?: Prisma.NotificationRuleWhereInput | null;
};

export type NotificationRuleCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutProjectInput,
        Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationRuleCreateWithoutProjectInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.NotificationRuleCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
};

export type NotificationRuleUncheckedCreateNestedManyWithoutProjectInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutProjectInput,
        Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationRuleCreateWithoutProjectInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput[];
  createMany?: Prisma.NotificationRuleCreateManyProjectInputEnvelope;
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
};

export type NotificationRuleUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutProjectInput,
        Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationRuleCreateWithoutProjectInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.NotificationRuleCreateManyProjectInputEnvelope;
  set?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  delete?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  update?:
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutProjectInput
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.NotificationRuleScalarWhereInput
    | Prisma.NotificationRuleScalarWhereInput[];
};

export type NotificationRuleUncheckedUpdateManyWithoutProjectNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutProjectInput,
        Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
      >
    | Prisma.NotificationRuleCreateWithoutProjectInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutProjectInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput
    | Prisma.NotificationRuleCreateOrConnectWithoutProjectInput[];
  upsert?:
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutProjectInput[];
  createMany?: Prisma.NotificationRuleCreateManyProjectInputEnvelope;
  set?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  delete?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  update?:
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutProjectInput
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutProjectInput[];
  updateMany?:
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutProjectInput
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutProjectInput[];
  deleteMany?:
    | Prisma.NotificationRuleScalarWhereInput
    | Prisma.NotificationRuleScalarWhereInput[];
};

export type NotificationRuleCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.NotificationRuleCreateOrConnectWithoutNotificationsInput;
  connect?: Prisma.NotificationRuleWhereUniqueInput;
};

export type NotificationRuleUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.NotificationRuleCreateOrConnectWithoutNotificationsInput;
  upsert?: Prisma.NotificationRuleUpsertWithoutNotificationsInput;
  disconnect?: Prisma.NotificationRuleWhereInput | boolean;
  delete?: Prisma.NotificationRuleWhereInput | boolean;
  connect?: Prisma.NotificationRuleWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.NotificationRuleUpdateToOneWithWhereWithoutNotificationsInput,
      Prisma.NotificationRuleUpdateWithoutNotificationsInput
    >,
    Prisma.NotificationRuleUncheckedUpdateWithoutNotificationsInput
  >;
};

export type NotificationRuleCreateNestedManyWithoutIntegrationsInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutIntegrationsInput,
        Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
      >
    | Prisma.NotificationRuleCreateWithoutIntegrationsInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput
    | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput[];
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
};

export type NotificationRuleUncheckedCreateNestedManyWithoutIntegrationsInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationRuleCreateWithoutIntegrationsInput,
          Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
        >
      | Prisma.NotificationRuleCreateWithoutIntegrationsInput[]
      | Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput[];
    connectOrCreate?:
      | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput
      | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput[];
    connect?:
      | Prisma.NotificationRuleWhereUniqueInput
      | Prisma.NotificationRuleWhereUniqueInput[];
  };

export type NotificationRuleUpdateManyWithoutIntegrationsNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.NotificationRuleCreateWithoutIntegrationsInput,
        Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
      >
    | Prisma.NotificationRuleCreateWithoutIntegrationsInput[]
    | Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput[];
  connectOrCreate?:
    | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput
    | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput[];
  upsert?:
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutIntegrationsInput
    | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutIntegrationsInput[];
  set?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  disconnect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  delete?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  connect?:
    | Prisma.NotificationRuleWhereUniqueInput
    | Prisma.NotificationRuleWhereUniqueInput[];
  update?:
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutIntegrationsInput
    | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutIntegrationsInput[];
  updateMany?:
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutIntegrationsInput
    | Prisma.NotificationRuleUpdateManyWithWhereWithoutIntegrationsInput[];
  deleteMany?:
    | Prisma.NotificationRuleScalarWhereInput
    | Prisma.NotificationRuleScalarWhereInput[];
};

export type NotificationRuleUncheckedUpdateManyWithoutIntegrationsNestedInput =
  {
    create?:
      | Prisma.XOR<
          Prisma.NotificationRuleCreateWithoutIntegrationsInput,
          Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
        >
      | Prisma.NotificationRuleCreateWithoutIntegrationsInput[]
      | Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput[];
    connectOrCreate?:
      | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput
      | Prisma.NotificationRuleCreateOrConnectWithoutIntegrationsInput[];
    upsert?:
      | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutIntegrationsInput
      | Prisma.NotificationRuleUpsertWithWhereUniqueWithoutIntegrationsInput[];
    set?:
      | Prisma.NotificationRuleWhereUniqueInput
      | Prisma.NotificationRuleWhereUniqueInput[];
    disconnect?:
      | Prisma.NotificationRuleWhereUniqueInput
      | Prisma.NotificationRuleWhereUniqueInput[];
    delete?:
      | Prisma.NotificationRuleWhereUniqueInput
      | Prisma.NotificationRuleWhereUniqueInput[];
    connect?:
      | Prisma.NotificationRuleWhereUniqueInput
      | Prisma.NotificationRuleWhereUniqueInput[];
    update?:
      | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutIntegrationsInput
      | Prisma.NotificationRuleUpdateWithWhereUniqueWithoutIntegrationsInput[];
    updateMany?:
      | Prisma.NotificationRuleUpdateManyWithWhereWithoutIntegrationsInput
      | Prisma.NotificationRuleUpdateManyWithWhereWithoutIntegrationsInput[];
    deleteMany?:
      | Prisma.NotificationRuleScalarWhereInput
      | Prisma.NotificationRuleScalarWhereInput[];
  };

export type NotificationRuleCreateWithoutProjectInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  integrations?: Prisma.IntegrationCreateNestedManyWithoutNotificationRulesInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleUncheckedCreateWithoutProjectInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  integrations?: Prisma.IntegrationUncheckedCreateNestedManyWithoutNotificationRulesInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleCreateOrConnectWithoutProjectInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutProjectInput,
    Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
  >;
};

export type NotificationRuleCreateManyProjectInputEnvelope = {
  data:
    | Prisma.NotificationRuleCreateManyProjectInput
    | Prisma.NotificationRuleCreateManyProjectInput[];
  skipDuplicates?: boolean;
};

export type NotificationRuleUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutProjectInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutProjectInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutProjectInput,
    Prisma.NotificationRuleUncheckedCreateWithoutProjectInput
  >;
};

export type NotificationRuleUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutProjectInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutProjectInput
  >;
};

export type NotificationRuleUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.NotificationRuleScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateManyMutationInput,
    Prisma.NotificationRuleUncheckedUpdateManyWithoutProjectInput
  >;
};

export type NotificationRuleScalarWhereInput = {
  AND?:
    | Prisma.NotificationRuleScalarWhereInput
    | Prisma.NotificationRuleScalarWhereInput[];
  OR?: Prisma.NotificationRuleScalarWhereInput[];
  NOT?:
    | Prisma.NotificationRuleScalarWhereInput
    | Prisma.NotificationRuleScalarWhereInput[];
  id?: Prisma.UuidFilter<'NotificationRule'> | string;
  name?: Prisma.StringFilter<'NotificationRule'> | string;
  projectId?: Prisma.StringFilter<'NotificationRule'> | string;
  sendToApp?: Prisma.BoolFilter<'NotificationRule'> | boolean;
  sendToEmail?: Prisma.BoolFilter<'NotificationRule'> | boolean;
  config?: Prisma.JsonFilter<'NotificationRule'>;
  template?: Prisma.StringNullableFilter<'NotificationRule'> | string | null;
  createdAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'NotificationRule'> | Date | string;
};

export type NotificationRuleCreateWithoutNotificationsInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationRulesInput;
  integrations?: Prisma.IntegrationCreateNestedManyWithoutNotificationRulesInput;
};

export type NotificationRuleUncheckedCreateWithoutNotificationsInput = {
  id?: string;
  name: string;
  projectId: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  integrations?: Prisma.IntegrationUncheckedCreateNestedManyWithoutNotificationRulesInput;
};

export type NotificationRuleCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutNotificationsInput
  >;
};

export type NotificationRuleUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutNotificationsInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutNotificationsInput
  >;
  where?: Prisma.NotificationRuleWhereInput;
};

export type NotificationRuleUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.NotificationRuleWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutNotificationsInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutNotificationsInput
  >;
};

export type NotificationRuleUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationRulesNestedInput;
  integrations?: Prisma.IntegrationUpdateManyWithoutNotificationRulesNestedInput;
};

export type NotificationRuleUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  integrations?: Prisma.IntegrationUncheckedUpdateManyWithoutNotificationRulesNestedInput;
};

export type NotificationRuleCreateWithoutIntegrationsInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  project: Prisma.ProjectCreateNestedOneWithoutNotificationRulesInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleUncheckedCreateWithoutIntegrationsInput = {
  id?: string;
  name: string;
  projectId: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutNotificationRuleInput;
};

export type NotificationRuleCreateOrConnectWithoutIntegrationsInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutIntegrationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
  >;
};

export type NotificationRuleUpsertWithWhereUniqueWithoutIntegrationsInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutIntegrationsInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutIntegrationsInput
  >;
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateWithoutIntegrationsInput,
    Prisma.NotificationRuleUncheckedCreateWithoutIntegrationsInput
  >;
};

export type NotificationRuleUpdateWithWhereUniqueWithoutIntegrationsInput = {
  where: Prisma.NotificationRuleWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateWithoutIntegrationsInput,
    Prisma.NotificationRuleUncheckedUpdateWithoutIntegrationsInput
  >;
};

export type NotificationRuleUpdateManyWithWhereWithoutIntegrationsInput = {
  where: Prisma.NotificationRuleScalarWhereInput;
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateManyMutationInput,
    Prisma.NotificationRuleUncheckedUpdateManyWithoutIntegrationsInput
  >;
};

export type NotificationRuleCreateManyProjectInput = {
  id?: string;
  name: string;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config: PrismaJson.IPrismaNotificationRuleConfig;
  template?: string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type NotificationRuleUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  integrations?: Prisma.IntegrationUpdateManyWithoutNotificationRulesNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  integrations?: Prisma.IntegrationUncheckedUpdateManyWithoutNotificationRulesNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type NotificationRuleUpdateWithoutIntegrationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  project?: Prisma.ProjectUpdateOneRequiredWithoutNotificationRulesNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleUncheckedUpdateWithoutIntegrationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutNotificationRuleNestedInput;
};

export type NotificationRuleUncheckedUpdateManyWithoutIntegrationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  name?: Prisma.StringFieldUpdateOperationsInput | string;
  projectId?: Prisma.StringFieldUpdateOperationsInput | string;
  sendToApp?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  sendToEmail?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  config?: PrismaJson.IPrismaNotificationRuleConfig;
  template?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type NotificationRuleCountOutputType
 */

export type NotificationRuleCountOutputType = {
  integrations: number;
  notifications: number;
};

export type NotificationRuleCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  integrations?: boolean | NotificationRuleCountOutputTypeCountIntegrationsArgs;
  notifications?:
    | boolean
    | NotificationRuleCountOutputTypeCountNotificationsArgs;
};

/**
 * NotificationRuleCountOutputType without action
 */
export type NotificationRuleCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRuleCountOutputType
   */
  select?: Prisma.NotificationRuleCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * NotificationRuleCountOutputType without action
 */
export type NotificationRuleCountOutputTypeCountIntegrationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.IntegrationWhereInput;
};

/**
 * NotificationRuleCountOutputType without action
 */
export type NotificationRuleCountOutputTypeCountNotificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationWhereInput;
};

export type NotificationRuleSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    projectId?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    config?: boolean;
    template?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
    integrations?: boolean | Prisma.NotificationRule$integrationsArgs<ExtArgs>;
    notifications?:
      | boolean
      | Prisma.NotificationRule$notificationsArgs<ExtArgs>;
    _count?:
      | boolean
      | Prisma.NotificationRuleCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['notificationRule']
>;

export type NotificationRuleSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    projectId?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    config?: boolean;
    template?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['notificationRule']
>;

export type NotificationRuleSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    name?: boolean;
    projectId?: boolean;
    sendToApp?: boolean;
    sendToEmail?: boolean;
    config?: boolean;
    template?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['notificationRule']
>;

export type NotificationRuleSelectScalar = {
  id?: boolean;
  name?: boolean;
  projectId?: boolean;
  sendToApp?: boolean;
  sendToEmail?: boolean;
  config?: boolean;
  template?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type NotificationRuleOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'name'
  | 'projectId'
  | 'sendToApp'
  | 'sendToEmail'
  | 'config'
  | 'template'
  | 'createdAt'
  | 'updatedAt',
  ExtArgs['result']['notificationRule']
>;
export type NotificationRuleInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
  integrations?: boolean | Prisma.NotificationRule$integrationsArgs<ExtArgs>;
  notifications?: boolean | Prisma.NotificationRule$notificationsArgs<ExtArgs>;
  _count?: boolean | Prisma.NotificationRuleCountOutputTypeDefaultArgs<ExtArgs>;
};
export type NotificationRuleIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};
export type NotificationRuleIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>;
};

export type $NotificationRulePayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'NotificationRule';
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>;
    integrations: Prisma.$IntegrationPayload<ExtArgs>[];
    notifications: Prisma.$NotificationPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      name: string;
      projectId: string;
      sendToApp: boolean;
      sendToEmail: boolean;
      /**
       * [IPrismaNotificationRuleConfig]
       */
      config: PrismaJson.IPrismaNotificationRuleConfig;
      template: string | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['notificationRule']
  >;
  composites: {};
};

export type NotificationRuleGetPayload<
  S extends boolean | null | undefined | NotificationRuleDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$NotificationRulePayload, S>;

export type NotificationRuleCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
  NotificationRuleFindManyArgs,
  'select' | 'include' | 'distinct' | 'omit'
> & {
  select?: NotificationRuleCountAggregateInputType | true;
};

export interface NotificationRuleDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['NotificationRule'];
    meta: { name: 'NotificationRule' };
  };
  /**
   * Find zero or one NotificationRule that matches the filter.
   * @param {NotificationRuleFindUniqueArgs} args - Arguments to find a NotificationRule
   * @example
   * // Get one NotificationRule
   * const notificationRule = await prisma.notificationRule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotificationRuleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one NotificationRule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotificationRuleFindUniqueOrThrowArgs} args - Arguments to find a NotificationRule
   * @example
   * // Get one NotificationRule
   * const notificationRule = await prisma.notificationRule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotificationRuleFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationRuleFindUniqueOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationRule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleFindFirstArgs} args - Arguments to find a NotificationRule
   * @example
   * // Get one NotificationRule
   * const notificationRule = await prisma.notificationRule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotificationRuleFindFirstArgs>(
    args?: Prisma.SelectSubset<T, NotificationRuleFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first NotificationRule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleFindFirstOrThrowArgs} args - Arguments to find a NotificationRule
   * @example
   * // Get one NotificationRule
   * const notificationRule = await prisma.notificationRule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotificationRuleFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationRuleFindFirstOrThrowArgs<ExtArgs>
    >,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more NotificationRules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all NotificationRules
   * const notificationRules = await prisma.notificationRule.findMany()
   *
   * // Get first 10 NotificationRules
   * const notificationRules = await prisma.notificationRule.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const notificationRuleWithIdOnly = await prisma.notificationRule.findMany({ select: { id: true } })
   *
   */
  findMany<T extends NotificationRuleFindManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationRuleFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a NotificationRule.
   * @param {NotificationRuleCreateArgs} args - Arguments to create a NotificationRule.
   * @example
   * // Create one NotificationRule
   * const NotificationRule = await prisma.notificationRule.create({
   *   data: {
   *     // ... data to create a NotificationRule
   *   }
   * })
   *
   */
  create<T extends NotificationRuleCreateArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many NotificationRules.
   * @param {NotificationRuleCreateManyArgs} args - Arguments to create many NotificationRules.
   * @example
   * // Create many NotificationRules
   * const notificationRule = await prisma.notificationRule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends NotificationRuleCreateManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationRuleCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many NotificationRules and returns the data saved in the database.
   * @param {NotificationRuleCreateManyAndReturnArgs} args - Arguments to create many NotificationRules.
   * @example
   * // Create many NotificationRules
   * const notificationRule = await prisma.notificationRule.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many NotificationRules and only return the `id`
   * const notificationRuleWithIdOnly = await prisma.notificationRule.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends NotificationRuleCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<
      T,
      NotificationRuleCreateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a NotificationRule.
   * @param {NotificationRuleDeleteArgs} args - Arguments to delete one NotificationRule.
   * @example
   * // Delete one NotificationRule
   * const NotificationRule = await prisma.notificationRule.delete({
   *   where: {
   *     // ... filter to delete one NotificationRule
   *   }
   * })
   *
   */
  delete<T extends NotificationRuleDeleteArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one NotificationRule.
   * @param {NotificationRuleUpdateArgs} args - Arguments to update one NotificationRule.
   * @example
   * // Update one NotificationRule
   * const notificationRule = await prisma.notificationRule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends NotificationRuleUpdateArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more NotificationRules.
   * @param {NotificationRuleDeleteManyArgs} args - Arguments to filter NotificationRules to delete.
   * @example
   * // Delete a few NotificationRules
   * const { count } = await prisma.notificationRule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends NotificationRuleDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, NotificationRuleDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many NotificationRules
   * const notificationRule = await prisma.notificationRule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends NotificationRuleUpdateManyArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more NotificationRules and returns the data updated in the database.
   * @param {NotificationRuleUpdateManyAndReturnArgs} args - Arguments to update many NotificationRules.
   * @example
   * // Update many NotificationRules
   * const notificationRule = await prisma.notificationRule.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more NotificationRules and only return the `id`
   * const notificationRuleWithIdOnly = await prisma.notificationRule.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends NotificationRuleUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<
      T,
      NotificationRuleUpdateManyAndReturnArgs<ExtArgs>
    >,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one NotificationRule.
   * @param {NotificationRuleUpsertArgs} args - Arguments to update or create a NotificationRule.
   * @example
   * // Update or create a NotificationRule
   * const notificationRule = await prisma.notificationRule.upsert({
   *   create: {
   *     // ... data to create a NotificationRule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the NotificationRule we want to update
   *   }
   * })
   */
  upsert<T extends NotificationRuleUpsertArgs>(
    args: Prisma.SelectSubset<T, NotificationRuleUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__NotificationRuleClient<
    runtime.Types.Result.GetResult<
      Prisma.$NotificationRulePayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of NotificationRules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleCountArgs} args - Arguments to filter NotificationRules to count.
   * @example
   * // Count the number of NotificationRules
   * const count = await prisma.notificationRule.count({
   *   where: {
   *     // ... the filter for the NotificationRules we want to count
   *   }
   * })
   **/
  count<T extends NotificationRuleCountArgs>(
    args?: Prisma.Subset<T, NotificationRuleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<
            T['select'],
            NotificationRuleCountAggregateOutputType
          >
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a NotificationRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends NotificationRuleAggregateArgs>(
    args: Prisma.Subset<T, NotificationRuleAggregateArgs>,
  ): Prisma.PrismaPromise<GetNotificationRuleAggregateType<T>>;

  /**
   * Group by NotificationRule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotificationRuleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends NotificationRuleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotificationRuleGroupByArgs['orderBy'] }
      : { orderBy?: NotificationRuleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<
      T,
      NotificationRuleGroupByArgs,
      OrderByArg
    > &
      InputErrors,
  ): {} extends InputErrors
    ? GetNotificationRuleGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the NotificationRule model
   */
  readonly fields: NotificationRuleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for NotificationRule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotificationRuleClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>,
  ): Prisma.Prisma__ProjectClient<
    | runtime.Types.Result.GetResult<
        Prisma.$ProjectPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  integrations<
    T extends Prisma.NotificationRule$integrationsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.NotificationRule$integrationsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$IntegrationPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  notifications<
    T extends Prisma.NotificationRule$notificationsArgs<ExtArgs> = {},
  >(
    args?: Prisma.Subset<T, Prisma.NotificationRule$notificationsArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the NotificationRule model
 */
export interface NotificationRuleFieldRefs {
  readonly id: Prisma.FieldRef<'NotificationRule', 'String'>;
  readonly name: Prisma.FieldRef<'NotificationRule', 'String'>;
  readonly projectId: Prisma.FieldRef<'NotificationRule', 'String'>;
  readonly sendToApp: Prisma.FieldRef<'NotificationRule', 'Boolean'>;
  readonly sendToEmail: Prisma.FieldRef<'NotificationRule', 'Boolean'>;
  readonly config: Prisma.FieldRef<'NotificationRule', 'Json'>;
  readonly template: Prisma.FieldRef<'NotificationRule', 'String'>;
  readonly createdAt: Prisma.FieldRef<'NotificationRule', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'NotificationRule', 'DateTime'>;
}

// Custom InputTypes
/**
 * NotificationRule findUnique
 */
export type NotificationRuleFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationRule to fetch.
   */
  where: Prisma.NotificationRuleWhereUniqueInput;
};

/**
 * NotificationRule findUniqueOrThrow
 */
export type NotificationRuleFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationRule to fetch.
   */
  where: Prisma.NotificationRuleWhereUniqueInput;
};

/**
 * NotificationRule findFirst
 */
export type NotificationRuleFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationRule to fetch.
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationRules to fetch.
   */
  orderBy?:
    | Prisma.NotificationRuleOrderByWithRelationInput
    | Prisma.NotificationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationRules.
   */
  cursor?: Prisma.NotificationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationRules.
   */
  distinct?:
    | Prisma.NotificationRuleScalarFieldEnum
    | Prisma.NotificationRuleScalarFieldEnum[];
};

/**
 * NotificationRule findFirstOrThrow
 */
export type NotificationRuleFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationRule to fetch.
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationRules to fetch.
   */
  orderBy?:
    | Prisma.NotificationRuleOrderByWithRelationInput
    | Prisma.NotificationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for NotificationRules.
   */
  cursor?: Prisma.NotificationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationRules.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of NotificationRules.
   */
  distinct?:
    | Prisma.NotificationRuleScalarFieldEnum
    | Prisma.NotificationRuleScalarFieldEnum[];
};

/**
 * NotificationRule findMany
 */
export type NotificationRuleFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter, which NotificationRules to fetch.
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of NotificationRules to fetch.
   */
  orderBy?:
    | Prisma.NotificationRuleOrderByWithRelationInput
    | Prisma.NotificationRuleOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing NotificationRules.
   */
  cursor?: Prisma.NotificationRuleWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` NotificationRules from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` NotificationRules.
   */
  skip?: number;
  distinct?:
    | Prisma.NotificationRuleScalarFieldEnum
    | Prisma.NotificationRuleScalarFieldEnum[];
};

/**
 * NotificationRule create
 */
export type NotificationRuleCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * The data needed to create a NotificationRule.
   */
  data: Prisma.XOR<
    Prisma.NotificationRuleCreateInput,
    Prisma.NotificationRuleUncheckedCreateInput
  >;
};

/**
 * NotificationRule createMany
 */
export type NotificationRuleCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many NotificationRules.
   */
  data:
    | Prisma.NotificationRuleCreateManyInput
    | Prisma.NotificationRuleCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * NotificationRule createManyAndReturn
 */
export type NotificationRuleCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * The data used to create many NotificationRules.
   */
  data:
    | Prisma.NotificationRuleCreateManyInput
    | Prisma.NotificationRuleCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationRule update
 */
export type NotificationRuleUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * The data needed to update a NotificationRule.
   */
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateInput,
    Prisma.NotificationRuleUncheckedUpdateInput
  >;
  /**
   * Choose, which NotificationRule to update.
   */
  where: Prisma.NotificationRuleWhereUniqueInput;
};

/**
 * NotificationRule updateMany
 */
export type NotificationRuleUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update NotificationRules.
   */
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateManyMutationInput,
    Prisma.NotificationRuleUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationRules to update
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * Limit how many NotificationRules to update.
   */
  limit?: number;
};

/**
 * NotificationRule updateManyAndReturn
 */
export type NotificationRuleUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * The data used to update NotificationRules.
   */
  data: Prisma.XOR<
    Prisma.NotificationRuleUpdateManyMutationInput,
    Prisma.NotificationRuleUncheckedUpdateManyInput
  >;
  /**
   * Filter which NotificationRules to update
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * Limit how many NotificationRules to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * NotificationRule upsert
 */
export type NotificationRuleUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * The filter to search for the NotificationRule to update in case it exists.
   */
  where: Prisma.NotificationRuleWhereUniqueInput;
  /**
   * In case the NotificationRule found by the `where` argument doesn't exist, create a new NotificationRule with this data.
   */
  create: Prisma.XOR<
    Prisma.NotificationRuleCreateInput,
    Prisma.NotificationRuleUncheckedCreateInput
  >;
  /**
   * In case the NotificationRule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<
    Prisma.NotificationRuleUpdateInput,
    Prisma.NotificationRuleUncheckedUpdateInput
  >;
};

/**
 * NotificationRule delete
 */
export type NotificationRuleDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
  /**
   * Filter which NotificationRule to delete.
   */
  where: Prisma.NotificationRuleWhereUniqueInput;
};

/**
 * NotificationRule deleteMany
 */
export type NotificationRuleDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which NotificationRules to delete
   */
  where?: Prisma.NotificationRuleWhereInput;
  /**
   * Limit how many NotificationRules to delete.
   */
  limit?: number;
};

/**
 * NotificationRule.integrations
 */
export type NotificationRule$integrationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Integration
   */
  select?: Prisma.IntegrationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Integration
   */
  omit?: Prisma.IntegrationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IntegrationInclude<ExtArgs> | null;
  where?: Prisma.IntegrationWhereInput;
  orderBy?:
    | Prisma.IntegrationOrderByWithRelationInput
    | Prisma.IntegrationOrderByWithRelationInput[];
  cursor?: Prisma.IntegrationWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.IntegrationScalarFieldEnum
    | Prisma.IntegrationScalarFieldEnum[];
};

/**
 * NotificationRule.notifications
 */
export type NotificationRule$notificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  where?: Prisma.NotificationWhereInput;
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  cursor?: Prisma.NotificationWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * NotificationRule without action
 */
export type NotificationRuleDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the NotificationRule
   */
  select?: Prisma.NotificationRuleSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the NotificationRule
   */
  omit?: Prisma.NotificationRuleOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationRuleInclude<ExtArgs> | null;
};
