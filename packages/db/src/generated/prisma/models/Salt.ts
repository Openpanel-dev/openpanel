/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Salt` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums.ts';
import type * as Prisma from '../internal/prismaNamespace.ts';

/**
 * Model Salt
 *
 */
export type SaltModel =
  runtime.Types.Result.DefaultSelection<Prisma.$SaltPayload>;

export type AggregateSalt = {
  _count: SaltCountAggregateOutputType | null;
  _min: SaltMinAggregateOutputType | null;
  _max: SaltMaxAggregateOutputType | null;
};

export type SaltMinAggregateOutputType = {
  salt: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type SaltMaxAggregateOutputType = {
  salt: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type SaltCountAggregateOutputType = {
  salt: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type SaltMinAggregateInputType = {
  salt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type SaltMaxAggregateInputType = {
  salt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type SaltCountAggregateInputType = {
  salt?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type SaltAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Salt to aggregate.
   */
  where?: Prisma.SaltWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Salts to fetch.
   */
  orderBy?:
    | Prisma.SaltOrderByWithRelationInput
    | Prisma.SaltOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.SaltWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Salts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Salts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Salts
   **/
  _count?: true | SaltCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: SaltMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: SaltMaxAggregateInputType;
};

export type GetSaltAggregateType<T extends SaltAggregateArgs> = {
  [P in keyof T & keyof AggregateSalt]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSalt[P]>
    : Prisma.GetScalarType<T[P], AggregateSalt[P]>;
};

export type SaltGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.SaltWhereInput;
  orderBy?:
    | Prisma.SaltOrderByWithAggregationInput
    | Prisma.SaltOrderByWithAggregationInput[];
  by: Prisma.SaltScalarFieldEnum[] | Prisma.SaltScalarFieldEnum;
  having?: Prisma.SaltScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: SaltCountAggregateInputType | true;
  _min?: SaltMinAggregateInputType;
  _max?: SaltMaxAggregateInputType;
};

export type SaltGroupByOutputType = {
  salt: string;
  createdAt: Date;
  updatedAt: Date;
  _count: SaltCountAggregateOutputType | null;
  _min: SaltMinAggregateOutputType | null;
  _max: SaltMaxAggregateOutputType | null;
};

type GetSaltGroupByPayload<T extends SaltGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SaltGroupByOutputType, T['by']> & {
      [P in keyof T & keyof SaltGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], SaltGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], SaltGroupByOutputType[P]>;
    }
  >
>;

export type SaltWhereInput = {
  AND?: Prisma.SaltWhereInput | Prisma.SaltWhereInput[];
  OR?: Prisma.SaltWhereInput[];
  NOT?: Prisma.SaltWhereInput | Prisma.SaltWhereInput[];
  salt?: Prisma.StringFilter<'Salt'> | string;
  createdAt?: Prisma.DateTimeFilter<'Salt'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Salt'> | Date | string;
};

export type SaltOrderByWithRelationInput = {
  salt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SaltWhereUniqueInput = Prisma.AtLeast<
  {
    salt?: string;
    AND?: Prisma.SaltWhereInput | Prisma.SaltWhereInput[];
    OR?: Prisma.SaltWhereInput[];
    NOT?: Prisma.SaltWhereInput | Prisma.SaltWhereInput[];
    createdAt?: Prisma.DateTimeFilter<'Salt'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Salt'> | Date | string;
  },
  'salt'
>;

export type SaltOrderByWithAggregationInput = {
  salt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.SaltCountOrderByAggregateInput;
  _max?: Prisma.SaltMaxOrderByAggregateInput;
  _min?: Prisma.SaltMinOrderByAggregateInput;
};

export type SaltScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.SaltScalarWhereWithAggregatesInput
    | Prisma.SaltScalarWhereWithAggregatesInput[];
  OR?: Prisma.SaltScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.SaltScalarWhereWithAggregatesInput
    | Prisma.SaltScalarWhereWithAggregatesInput[];
  salt?: Prisma.StringWithAggregatesFilter<'Salt'> | string;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Salt'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Salt'> | Date | string;
};

export type SaltCreateInput = {
  salt: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SaltUncheckedCreateInput = {
  salt: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SaltUpdateInput = {
  salt?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaltUncheckedUpdateInput = {
  salt?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaltCreateManyInput = {
  salt: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type SaltUpdateManyMutationInput = {
  salt?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaltUncheckedUpdateManyInput = {
  salt?: Prisma.StringFieldUpdateOperationsInput | string;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type SaltCountOrderByAggregateInput = {
  salt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SaltMaxOrderByAggregateInput = {
  salt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SaltMinOrderByAggregateInput = {
  salt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type SaltSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    salt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['salt']
>;

export type SaltSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    salt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['salt']
>;

export type SaltSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    salt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
  },
  ExtArgs['result']['salt']
>;

export type SaltSelectScalar = {
  salt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type SaltOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  'salt' | 'createdAt' | 'updatedAt',
  ExtArgs['result']['salt']
>;

export type $SaltPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Salt';
  objects: {};
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      salt: string;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs['result']['salt']
  >;
  composites: {};
};

export type SaltGetPayload<
  S extends boolean | null | undefined | SaltDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$SaltPayload, S>;

export type SaltCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<SaltFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: SaltCountAggregateInputType | true;
};

export interface SaltDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>['model']['Salt'];
    meta: { name: 'Salt' };
  };
  /**
   * Find zero or one Salt that matches the filter.
   * @param {SaltFindUniqueArgs} args - Arguments to find a Salt
   * @example
   * // Get one Salt
   * const salt = await prisma.salt.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SaltFindUniqueArgs>(
    args: Prisma.SelectSubset<T, SaltFindUniqueArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Salt that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SaltFindUniqueOrThrowArgs} args - Arguments to find a Salt
   * @example
   * // Get one Salt
   * const salt = await prisma.salt.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SaltFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, SaltFindUniqueOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Salt that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltFindFirstArgs} args - Arguments to find a Salt
   * @example
   * // Get one Salt
   * const salt = await prisma.salt.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SaltFindFirstArgs>(
    args?: Prisma.SelectSubset<T, SaltFindFirstArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Salt that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltFindFirstOrThrowArgs} args - Arguments to find a Salt
   * @example
   * // Get one Salt
   * const salt = await prisma.salt.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SaltFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, SaltFindFirstOrThrowArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Salts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Salts
   * const salts = await prisma.salt.findMany()
   *
   * // Get first 10 Salts
   * const salts = await prisma.salt.findMany({ take: 10 })
   *
   * // Only select the `salt`
   * const saltWithSaltOnly = await prisma.salt.findMany({ select: { salt: true } })
   *
   */
  findMany<T extends SaltFindManyArgs>(
    args?: Prisma.SelectSubset<T, SaltFindManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Salt.
   * @param {SaltCreateArgs} args - Arguments to create a Salt.
   * @example
   * // Create one Salt
   * const Salt = await prisma.salt.create({
   *   data: {
   *     // ... data to create a Salt
   *   }
   * })
   *
   */
  create<T extends SaltCreateArgs>(
    args: Prisma.SelectSubset<T, SaltCreateArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'create',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Salts.
   * @param {SaltCreateManyArgs} args - Arguments to create many Salts.
   * @example
   * // Create many Salts
   * const salt = await prisma.salt.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends SaltCreateManyArgs>(
    args?: Prisma.SelectSubset<T, SaltCreateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Salts and returns the data saved in the database.
   * @param {SaltCreateManyAndReturnArgs} args - Arguments to create many Salts.
   * @example
   * // Create many Salts
   * const salt = await prisma.salt.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Salts and only return the `salt`
   * const saltWithSaltOnly = await prisma.salt.createManyAndReturn({
   *   select: { salt: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends SaltCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, SaltCreateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Salt.
   * @param {SaltDeleteArgs} args - Arguments to delete one Salt.
   * @example
   * // Delete one Salt
   * const Salt = await prisma.salt.delete({
   *   where: {
   *     // ... filter to delete one Salt
   *   }
   * })
   *
   */
  delete<T extends SaltDeleteArgs>(
    args: Prisma.SelectSubset<T, SaltDeleteArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'delete',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Salt.
   * @param {SaltUpdateArgs} args - Arguments to update one Salt.
   * @example
   * // Update one Salt
   * const salt = await prisma.salt.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends SaltUpdateArgs>(
    args: Prisma.SelectSubset<T, SaltUpdateArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'update',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Salts.
   * @param {SaltDeleteManyArgs} args - Arguments to filter Salts to delete.
   * @example
   * // Delete a few Salts
   * const { count } = await prisma.salt.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends SaltDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, SaltDeleteManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Salts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Salts
   * const salt = await prisma.salt.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends SaltUpdateManyArgs>(
    args: Prisma.SelectSubset<T, SaltUpdateManyArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Salts and returns the data updated in the database.
   * @param {SaltUpdateManyAndReturnArgs} args - Arguments to update many Salts.
   * @example
   * // Update many Salts
   * const salt = await prisma.salt.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Salts and only return the `salt`
   * const saltWithSaltOnly = await prisma.salt.updateManyAndReturn({
   *   select: { salt: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends SaltUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, SaltUpdateManyAndReturnArgs<ExtArgs>>,
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Salt.
   * @param {SaltUpsertArgs} args - Arguments to update or create a Salt.
   * @example
   * // Update or create a Salt
   * const salt = await prisma.salt.upsert({
   *   create: {
   *     // ... data to create a Salt
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Salt we want to update
   *   }
   * })
   */
  upsert<T extends SaltUpsertArgs>(
    args: Prisma.SelectSubset<T, SaltUpsertArgs<ExtArgs>>,
  ): Prisma.Prisma__SaltClient<
    runtime.Types.Result.GetResult<
      Prisma.$SaltPayload<ExtArgs>,
      T,
      'upsert',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Salts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltCountArgs} args - Arguments to filter Salts to count.
   * @example
   * // Count the number of Salts
   * const count = await prisma.salt.count({
   *   where: {
   *     // ... the filter for the Salts we want to count
   *   }
   * })
   **/
  count<T extends SaltCountArgs>(
    args?: Prisma.Subset<T, SaltCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SaltCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Salt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends SaltAggregateArgs>(
    args: Prisma.Subset<T, SaltAggregateArgs>,
  ): Prisma.PrismaPromise<GetSaltAggregateType<T>>;

  /**
   * Group by Salt.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SaltGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends SaltGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SaltGroupByArgs['orderBy'] }
      : { orderBy?: SaltGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    'Field ',
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, SaltGroupByArgs, OrderByArg> &
      InputErrors,
  ): {} extends InputErrors
    ? GetSaltGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Salt model
   */
  readonly fields: SaltFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Salt.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SaltClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null,
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null,
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Salt model
 */
export interface SaltFieldRefs {
  readonly salt: Prisma.FieldRef<'Salt', 'String'>;
  readonly createdAt: Prisma.FieldRef<'Salt', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Salt', 'DateTime'>;
}

// Custom InputTypes
/**
 * Salt findUnique
 */
export type SaltFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter, which Salt to fetch.
   */
  where: Prisma.SaltWhereUniqueInput;
};

/**
 * Salt findUniqueOrThrow
 */
export type SaltFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter, which Salt to fetch.
   */
  where: Prisma.SaltWhereUniqueInput;
};

/**
 * Salt findFirst
 */
export type SaltFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter, which Salt to fetch.
   */
  where?: Prisma.SaltWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Salts to fetch.
   */
  orderBy?:
    | Prisma.SaltOrderByWithRelationInput
    | Prisma.SaltOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Salts.
   */
  cursor?: Prisma.SaltWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Salts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Salts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Salts.
   */
  distinct?: Prisma.SaltScalarFieldEnum | Prisma.SaltScalarFieldEnum[];
};

/**
 * Salt findFirstOrThrow
 */
export type SaltFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter, which Salt to fetch.
   */
  where?: Prisma.SaltWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Salts to fetch.
   */
  orderBy?:
    | Prisma.SaltOrderByWithRelationInput
    | Prisma.SaltOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Salts.
   */
  cursor?: Prisma.SaltWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Salts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Salts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Salts.
   */
  distinct?: Prisma.SaltScalarFieldEnum | Prisma.SaltScalarFieldEnum[];
};

/**
 * Salt findMany
 */
export type SaltFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter, which Salts to fetch.
   */
  where?: Prisma.SaltWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Salts to fetch.
   */
  orderBy?:
    | Prisma.SaltOrderByWithRelationInput
    | Prisma.SaltOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Salts.
   */
  cursor?: Prisma.SaltWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Salts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Salts.
   */
  skip?: number;
  distinct?: Prisma.SaltScalarFieldEnum | Prisma.SaltScalarFieldEnum[];
};

/**
 * Salt create
 */
export type SaltCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * The data needed to create a Salt.
   */
  data: Prisma.XOR<Prisma.SaltCreateInput, Prisma.SaltUncheckedCreateInput>;
};

/**
 * Salt createMany
 */
export type SaltCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Salts.
   */
  data: Prisma.SaltCreateManyInput | Prisma.SaltCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Salt createManyAndReturn
 */
export type SaltCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * The data used to create many Salts.
   */
  data: Prisma.SaltCreateManyInput | Prisma.SaltCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Salt update
 */
export type SaltUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * The data needed to update a Salt.
   */
  data: Prisma.XOR<Prisma.SaltUpdateInput, Prisma.SaltUncheckedUpdateInput>;
  /**
   * Choose, which Salt to update.
   */
  where: Prisma.SaltWhereUniqueInput;
};

/**
 * Salt updateMany
 */
export type SaltUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Salts.
   */
  data: Prisma.XOR<
    Prisma.SaltUpdateManyMutationInput,
    Prisma.SaltUncheckedUpdateManyInput
  >;
  /**
   * Filter which Salts to update
   */
  where?: Prisma.SaltWhereInput;
  /**
   * Limit how many Salts to update.
   */
  limit?: number;
};

/**
 * Salt updateManyAndReturn
 */
export type SaltUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * The data used to update Salts.
   */
  data: Prisma.XOR<
    Prisma.SaltUpdateManyMutationInput,
    Prisma.SaltUncheckedUpdateManyInput
  >;
  /**
   * Filter which Salts to update
   */
  where?: Prisma.SaltWhereInput;
  /**
   * Limit how many Salts to update.
   */
  limit?: number;
};

/**
 * Salt upsert
 */
export type SaltUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * The filter to search for the Salt to update in case it exists.
   */
  where: Prisma.SaltWhereUniqueInput;
  /**
   * In case the Salt found by the `where` argument doesn't exist, create a new Salt with this data.
   */
  create: Prisma.XOR<Prisma.SaltCreateInput, Prisma.SaltUncheckedCreateInput>;
  /**
   * In case the Salt was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SaltUpdateInput, Prisma.SaltUncheckedUpdateInput>;
};

/**
 * Salt delete
 */
export type SaltDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
  /**
   * Filter which Salt to delete.
   */
  where: Prisma.SaltWhereUniqueInput;
};

/**
 * Salt deleteMany
 */
export type SaltDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Salts to delete
   */
  where?: Prisma.SaltWhereInput;
  /**
   * Limit how many Salts to delete.
   */
  limit?: number;
};

/**
 * Salt without action
 */
export type SaltDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Salt
   */
  select?: Prisma.SaltSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Salt
   */
  omit?: Prisma.SaltOmit<ExtArgs> | null;
};
