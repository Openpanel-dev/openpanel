We use Sentry for watching for errors in our deployed application, as well as for instrumentation of our application.

## Error collection

Error collection is automatic and configured in `src/router.tsx`.

## Instrumentation

We want our server functions instrumented. So if you see a function name like `createServerFn`, you can instrument it with Sentry. You'll need to import `Sentry`:

```tsx
import * as Sentry from '@sentry/tanstackstart-react'
```

And then wrap the implementation of the server function with `Sentry.startSpan`, like so:

```tsx
Sentry.startSpan({ name: 'Requesting all the pokemon' }, async () => {
  // Some lengthy operation here
  await fetch('https://api.pokemon.com/data/')
})
```
# shadcn instructions

Use the latest version of Shadcn to install new components, like this command to add a button component:

```bash
pnpx shadcn@latest add button
```

# TanStack Router v1 â€” Routing Concepts (React) Cheat Sheet

> Quick, copyâ€‘pastable reference for fileâ€‘based routing in TanStack Router v1 (React).

## TL;DR

* **Root route** is always matched; it wraps everything.
* **createFileRoute(path)** defines a route; the path is autoâ€‘managed by the bundler/CLI.
* **Index routes** use a **trailing slash** (`/posts/`) to target the exact parent path.
* **Dynamic segments** use `$param` (e.g. `/posts/$postId`).
* **Splat (catchâ€‘all)** route is a lone `$` segment, exposing `params._splat`.
* **Optional segments** use `{-$param}`.
* **Layout routes** are normal routes that render an `<Outlet/>` for children.
* **Pathless layout routes** start with `_` (e.g. `/_settingsShell`), wrap children but donâ€™t match URL segments.
* **Nonâ€‘nested** routes suffix a segment with `_` to un-nest (e.g. `posts_.$postId.edit.tsx`).
* Prefix files/folders with `-` to **exclude** them from routing (colocation).
* Use `(group)` folders to **group** files only (no path impact).

---

## 1) Anatomy of a Route

```tsx
import { createFileRoute } from '@tanstack/react-router'

export const Route = createFileRoute('/')({
  component: PostsComponent,
})
```

* `createFileRoute(path)` â†’ declare a route for this file.
* Path string is autoâ€‘written/maintained by the bundler/CLI for type safety.

### Root Route

```tsx
import { createRootRoute } from '@tanstack/react-router'
export const Route = createRootRoute()
```

* No path; always matched; can host loaders, components, search param validation, etc.

**With context**:

```tsx
import { createRootRouteWithContext } from '@tanstack/react-router'
import type { QueryClient } from '@tanstack/react-query'

export interface MyRouterContext { queryClient: QueryClient }
export const Route = createRootRouteWithContext<MyRouterContext>()
```

---

## 2) Basic Routes

```tsx
// routes/about.tsx
import { createFileRoute } from '@tanstack/react-router'
export const Route = createFileRoute('/about')({
  component: () => <div>About</div>,
})
```

* Exact path match. Renders `component`.

### Index Routes (trailing slash)

```tsx
// routes/posts.index.tsx OR routes/posts/ index file
export const Route = createFileRoute('/posts/')({
  component: () => <div>Please select a post!</div>,
})
```

* Matches **exactly** `/posts`. The **trailing `/`** denotes an index.

---

## 3) Dynamic Segments

```tsx
// routes/posts.$postId.tsx
export const Route = createFileRoute('/posts/$postId')({
  loader: ({ params }) => fetchPost(params.postId),
  component: PostComponent,
})

function PostComponent() {
  const { postId } = Route.useParams()
  return <div>Post ID: {postId}</div>
}
```

* `$postId` captures `123` for `/posts/123` â†’ `{ postId: '123' }`.
* You can chain: `/posts/$postId/$revisionId` â†’ `{ postId, revisionId }`.

### Splat / Catchâ€‘All

```tsx
// routes/files/$.tsx
export const Route = createFileRoute('/files/$')({ component: Files })
```

* Captures the rest of the path into `params._splat` (e.g. `documents/hello-world`).

### Optional Parameters

```tsx
// routes/posts.{-$category}.tsx
export const Route = createFileRoute('/posts/{-$category}')({ component: Posts })

function Posts() {
  const { category } = Route.useParams()
  return <div>{category ? `Posts in ${category}` : 'All Posts'}</div>
}
```

* Matches `/posts` and `/posts/tech`.
* **Priority note:** routes with optional params are ranked lower than exact matches (e.g. `/posts/featured` beats `/posts/{-$category}`).

---

## 4) Layout & Pathless Layout Routes

### Layout Routes

```tsx
// routes/app.tsx
import { Outlet, createFileRoute } from '@tanstack/react-router'
export const Route = createFileRoute('/app')({ component: AppLayout })

function AppLayout() {
  return (
    <div>
      <h1>App</h1>
      <Outlet />
    </div>
  )
}
```

**Rendering matrix**

* `/app` â†’ `<AppLayout>`
* `/app/dashboard` â†’ `<AppLayout><Dashboard/>`
* `/app/settings` â†’ `<AppLayout><Settings/>`

### Pathless Layout Routes (no URL segment)

```tsx
// routes/_shell.tsx
import { Outlet, createFileRoute } from '@tanstack/react-router'
export const Route = createFileRoute('/_shell')({ component: Shell })

function Shell() {
  return (
    <div>
      <Header/>
      <Outlet />
    </div>
  )
}
```

* File/folder name starts with `_` â†’ doesnâ€™t match a URL segment; wraps children.
* **Cannot** include dynamic `$param` in the pathless segment name. Use a real `$param` directory **beside** your `_shell` if needed:

```
routes/
â”œâ”€ $postId/
â”œâ”€ _postShell/
```

---

## 5) Nonâ€‘Nested Routes ("un-nesting")

Append `_` after a segment name to un-nest a file so it renders its own tree:

```
routes/
â”œâ”€ posts.tsx
â”œâ”€ posts.$postId.tsx
â”œâ”€ posts_.$postId.edit.tsx  // un-nested
```

**Resulting renders**

* `/posts` â†’ `<Posts>`
* `/posts/123` â†’ `<Posts><Post id=123>`
* `/posts/123/edit` â†’ `<PostEditor id=123>` (not wrapped by `<Posts>`)

---

## 6) Excluding Files & Colocation

Prefix with `-` to exclude from route generation and safely colocate utilities:

```
routes/
â”œâ”€ posts.tsx
â”œâ”€ -posts-table.tsx      // ignored
â”œâ”€ -components/          // ignored
â”‚  â”œâ”€ header.tsx         // ignored
â”‚  â””â”€ footer.tsx         // ignored
```

```tsx
import { PostsTable } from './-posts-table'
```

* Excluded entries are not added to the generated `routeTree.gen.ts`.

---

## 7) Pathless Route Group Directories

Group routes for organization only using `(group)` folders â€” no effect on paths or nesting:

```
routes/
â”œâ”€ index.tsx
â”œâ”€ (app)/
â”‚  â”œâ”€ dashboard.tsx
â”‚  â”œâ”€ settings.tsx
â”‚  â””â”€ users.tsx
â”œâ”€ (auth)/
â”‚  â”œâ”€ login.tsx
â”‚  â””â”€ register.tsx
```

**URLs render as** `/dashboard`, `/settings`, `/users`, `/login`, `/register`.

---

## 8) Useful APIs & Hooks

* `Route.useParams()` â€” typed path params for the current file route.
* `Route.useLoaderData()` â€” typed data returned from the current routeâ€™s `loader`.
* `<Outlet/>` â€” placeholder for child routes.
* (See docs for: search param validation, data loading, mutations, type safety, preloading, SSR, etc.)

---

## 9) Common File Naming Patterns (fileâ€‘based routing)

* `__root.tsx` â€” root route file.
* `index.tsx` or trailing `/` in `createFileRoute` â€” index under a segment.
* `$param.tsx` â€” dynamic segment.
* `$.tsx` â€” splat (catchâ€‘all) segment.
* `{-$param}.tsx` â€” optional segment.
* `_segment.tsx` or `/_segment/route.tsx` â€” pathless layout route.
* `segment_.tsx` â€” un-nest that segment from parents.
* `-utils.tsx`, `-components/` â€” excluded from routing.
* `(group)/` â€” pathless grouping-only folder.

---

## 10) Quick Reference Examples

```tsx
// Simple loader + params + component
export const Route = createFileRoute('/users/$userId')({
  loader: ({ params }) => getUser(params.userId),
  component: () => {
    const { userId } = Route.useParams()
    const user = Route.useLoaderData()
    return <UserCard id={userId} data={user} />
  },
})
```

```tsx
// Layout
export const Route = createFileRoute('/dashboard')({ component: Layout })
function Layout() {
  return <>
    <Sidebar />
    <Outlet />
  </>
}
```

```tsx
// Optional + Splat combo (illustrative)
export const Route = createFileRoute('/docs/{-$section}/$')({ component: Docs })
```

---

## 11) Gotchas & Tips

* Prefer **fileâ€‘based** routing for less boilerplate and excellent type safety.
* Remember the **trailing slash** for index routes.
* Optional routes are **lower priority** than exact matches.
* Pathless layout routes **cannot** be dynamic.
* Use `-` prefix liberally to colocate nonâ€‘route code near routes.
* Use `(group)` folders to tame big route directories.

---

### Further Reading

* Route Trees, Route Matching, Fileâ€‘Based Routing, Outlets, Path/Search Params, Data Loading, SSR, etc.

Happy routing! ðŸš¦
